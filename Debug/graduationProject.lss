
graduationProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000415c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  0000415c  000041f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080013e  0080013e  000042ce  2**0
                  ALLOC
  3 .stab         00007380  00000000  00000000  000042d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027ae  00000000  00000000  0000b650  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000ddfe  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000de10  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0000de4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0000e332  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000e7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000e7ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	7c 01       	movw	r14, r24
      56:	98 01       	movw	r18, r16
      58:	b4 01       	movw	r22, r8
      5a:	d0 01       	movw	r26, r0
      5c:	ec 01       	movw	r28, r24
      5e:	08 02       	muls	r16, r24
      60:	24 02       	muls	r18, r20
      62:	40 02       	muls	r20, r16
      64:	37 03       	mulsu	r19, r23
      66:	53 03       	mulsu	r21, r19
      68:	6f 03       	fmul	r22, r23
      6a:	8b 03       	fmulsu	r16, r19
      6c:	a7 03       	fmuls	r18, r23
      6e:	c3 03       	fmuls	r20, r19
      70:	df 03       	fmulsu	r21, r23
      72:	fb 03       	fmulsu	r23, r19
      74:	2d 04       	cpc	r2, r13
      76:	52 04       	cpc	r5, r2
      78:	77 04       	cpc	r7, r7
      7a:	9c 04       	cpc	r9, r12
      7c:	c1 04       	cpc	r12, r1
      7e:	e6 04       	cpc	r14, r6
      80:	0b 05       	cpc	r16, r11
      82:	30 05       	cpc	r19, r0
      84:	55 05       	cpc	r21, r5
      86:	7a 05       	cpc	r23, r10
      88:	9f 05       	cpc	r25, r15
      8a:	c4 05       	cpc	r28, r4
      8c:	e9 05       	cpc	r30, r9
      8e:	58 06       	cpc	r5, r24
      90:	0e 06       	cpc	r0, r30
      92:	33 06       	cpc	r3, r19
      94:	3b 07       	cpc	r19, r27
      96:	57 07       	cpc	r21, r23
      98:	73 07       	cpc	r23, r19
      9a:	8f 07       	cpc	r24, r31
      9c:	ab 07       	cpc	r26, r27
      9e:	c7 07       	cpc	r28, r23
      a0:	e3 07       	cpc	r30, r19
      a2:	ff 07       	cpc	r31, r31
      a4:	bd 0a       	sbc	r11, r29
      a6:	d9 0a       	sbc	r13, r25
      a8:	f5 0a       	sbc	r15, r21
      aa:	11 0b       	sbc	r17, r17
      ac:	2d 0b       	sbc	r18, r29
      ae:	49 0b       	sbc	r20, r25
      b0:	65 0b       	sbc	r22, r21
      b2:	81 0b       	sbc	r24, r17

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf e5       	ldi	r28, 0x5F	; 95
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e6       	ldi	r26, 0x60	; 96
      c4:	b0 e0       	ldi	r27, 0x00	; 0
      c6:	ec e5       	ldi	r30, 0x5C	; 92
      c8:	f1 e4       	ldi	r31, 0x41	; 65
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ae 33       	cpi	r26, 0x3E	; 62
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	ae e3       	ldi	r26, 0x3E	; 62
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ab 34       	cpi	r26, 0x4B	; 75
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <main>
      ea:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <UART_voidInit>:
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	89 e2       	ldi	r24, 0x29	; 41
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	23 e3       	ldi	r18, 0x33	; 51
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
     104:	80 e4       	ldi	r24, 0x40	; 64
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	fc 01       	movw	r30, r24
     10a:	10 82       	st	Z, r1
     10c:	80 e4       	ldi	r24, 0x40	; 64
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	26 e8       	ldi	r18, 0x86	; 134
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
     116:	8a e2       	ldi	r24, 0x2A	; 42
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	28 e1       	ldi	r18, 0x18	; 24
     11c:	fc 01       	movw	r30, r24
     11e:	20 83       	st	Z, r18
     120:	00 00       	nop
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	08 95       	ret

00000128 <UART_voidSendChar>:
	UCSRC = 0x86;
	//Enable Rx and Tx
	UCSRB = 0x18; //||UCSRB;
}

void UART_voidSendChar(u8 data) {
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	1f 92       	push	r1
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
     132:	89 83       	std	Y+1, r24	; 0x01

	//while condition equivalent to GET_BIT(UCSRA, someBIT) check bit with calc programmer mode
	//while((UCSRA&0x20) == 0x00);
	while (!( UCSRA & (1 << UDRE)))
     134:	00 00       	nop
     136:	8b e2       	ldi	r24, 0x2B	; 43
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	fc 01       	movw	r30, r24
     13c:	80 81       	ld	r24, Z
     13e:	88 2f       	mov	r24, r24
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	80 72       	andi	r24, 0x20	; 32
     144:	99 27       	eor	r25, r25
     146:	89 2b       	or	r24, r25
     148:	b1 f3       	breq	.-20     	; 0x136 <UART_voidSendChar+0xe>
		;
	UDR_T = data;
     14a:	8c e2       	ldi	r24, 0x2C	; 44
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	29 81       	ldd	r18, Y+1	; 0x01
     150:	fc 01       	movw	r30, r24
     152:	20 83       	st	Z, r18
}
     154:	00 00       	nop
     156:	0f 90       	pop	r0
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <UART_u8GetChar>:

u8 UART_u8GetChar(void) {
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	1f 92       	push	r1
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Result = 0;
     168:	19 82       	std	Y+1, r1	; 0x01
	while ((UCSRA & 0x80) == 0x00)
     16a:	00 00       	nop
     16c:	8b e2       	ldi	r24, 0x2B	; 43
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	fc 01       	movw	r30, r24
     172:	80 81       	ld	r24, Z
     174:	88 23       	and	r24, r24
     176:	d4 f7       	brge	.-12     	; 0x16c <UART_u8GetChar+0xe>
		;
	LOC_u8Result = UDR_R;
     178:	8c e2       	ldi	r24, 0x2C	; 44
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	80 81       	ld	r24, Z
     180:	89 83       	std	Y+1, r24	; 0x01
	return LOC_u8Result;
     182:	89 81       	ldd	r24, Y+1	; 0x01
}
     184:	0f 90       	pop	r0
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <UART_sendString>:

void UART_sendString(u8 *data) {
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	00 d0       	rcall	.+0      	; 0x192 <UART_sendString+0x6>
     192:	00 d0       	rcall	.+0      	; 0x194 <UART_sendString+0x8>
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
     198:	9c 83       	std	Y+4, r25	; 0x04
     19a:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; data[i] != '\0'; i++) {
     19c:	1a 82       	std	Y+2, r1	; 0x02
     19e:	19 82       	std	Y+1, r1	; 0x01
     1a0:	0f c0       	rjmp	.+30     	; 0x1c0 <UART_sendString+0x34>
		UART_voidSendChar(data[i]);
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	9a 81       	ldd	r25, Y+2	; 0x02
     1a6:	2b 81       	ldd	r18, Y+3	; 0x03
     1a8:	3c 81       	ldd	r19, Y+4	; 0x04
     1aa:	82 0f       	add	r24, r18
     1ac:	93 1f       	adc	r25, r19
     1ae:	fc 01       	movw	r30, r24
     1b0:	80 81       	ld	r24, Z
     1b2:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
	LOC_u8Result = UDR_R;
	return LOC_u8Result;
}

void UART_sendString(u8 *data) {
	for (int i = 0; data[i] != '\0'; i++) {
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	9a 81       	ldd	r25, Y+2	; 0x02
     1c4:	2b 81       	ldd	r18, Y+3	; 0x03
     1c6:	3c 81       	ldd	r19, Y+4	; 0x04
     1c8:	82 0f       	add	r24, r18
     1ca:	93 1f       	adc	r25, r19
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	88 23       	and	r24, r24
     1d2:	39 f7       	brne	.-50     	; 0x1a2 <UART_sendString+0x16>
		UART_voidSendChar(data[i]);
	}
}
     1d4:	00 00       	nop
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <UART_u8GetString>:

void UART_u8GetString(u8 *string, u8 strLength) {
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <UART_u8GetString+0x6>
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <UART_u8GetString+0x8>
     1ec:	1f 92       	push	r1
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	9c 83       	std	Y+4, r25	; 0x04
     1f4:	8b 83       	std	Y+3, r24	; 0x03
     1f6:	6d 83       	std	Y+5, r22	; 0x05
	u8 LOC_u8Data = 0;
     1f8:	19 82       	std	Y+1, r1	; 0x01
	u8 idx = 0;
     1fa:	1a 82       	std	Y+2, r1	; 0x02
	LOC_u8Data = UART_u8GetChar();
     1fc:	0e 94 af 00 	call	0x15e	; 0x15e <UART_u8GetChar>
     200:	89 83       	std	Y+1, r24	; 0x01
	while (idx < strLength) {
     202:	10 c0       	rjmp	.+32     	; 0x224 <UART_u8GetString+0x40>
		string[idx] = LOC_u8Data;
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	2b 81       	ldd	r18, Y+3	; 0x03
     20c:	3c 81       	ldd	r19, Y+4	; 0x04
     20e:	82 0f       	add	r24, r18
     210:	93 1f       	adc	r25, r19
     212:	29 81       	ldd	r18, Y+1	; 0x01
     214:	fc 01       	movw	r30, r24
     216:	20 83       	st	Z, r18
		LOC_u8Data = UART_u8GetChar();
     218:	0e 94 af 00 	call	0x15e	; 0x15e <UART_u8GetChar>
     21c:	89 83       	std	Y+1, r24	; 0x01
		idx++;
     21e:	8a 81       	ldd	r24, Y+2	; 0x02
     220:	8f 5f       	subi	r24, 0xFF	; 255
     222:	8a 83       	std	Y+2, r24	; 0x02

void UART_u8GetString(u8 *string, u8 strLength) {
	u8 LOC_u8Data = 0;
	u8 idx = 0;
	LOC_u8Data = UART_u8GetChar();
	while (idx < strLength) {
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	8d 81       	ldd	r24, Y+5	; 0x05
     228:	98 17       	cp	r25, r24
     22a:	60 f3       	brcs	.-40     	; 0x204 <UART_u8GetString+0x20>
		string[idx] = LOC_u8Data;
		LOC_u8Data = UART_u8GetChar();
		idx++;
	}
//	string[idx] = '\0';
}
     22c:	00 00       	nop
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <clear_array>:

void clear_array(u8 *arr, u8 size) {
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	00 d0       	rcall	.+0      	; 0x244 <clear_array+0x6>
     244:	00 d0       	rcall	.+0      	; 0x246 <clear_array+0x8>
     246:	1f 92       	push	r1
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	9c 83       	std	Y+4, r25	; 0x04
     24e:	8b 83       	std	Y+3, r24	; 0x03
     250:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	for (i = 0; i < size; i++) {
     252:	1a 82       	std	Y+2, r1	; 0x02
     254:	19 82       	std	Y+1, r1	; 0x01
     256:	0d c0       	rjmp	.+26     	; 0x272 <clear_array+0x34>
		arr[i] = '\0';
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	9a 81       	ldd	r25, Y+2	; 0x02
     25c:	2b 81       	ldd	r18, Y+3	; 0x03
     25e:	3c 81       	ldd	r19, Y+4	; 0x04
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	fc 01       	movw	r30, r24
     266:	10 82       	st	Z, r1
//	string[idx] = '\0';
}

void clear_array(u8 *arr, u8 size) {
	int i;
	for (i = 0; i < size; i++) {
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	9a 81       	ldd	r25, Y+2	; 0x02
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	9a 83       	std	Y+2, r25	; 0x02
     270:	89 83       	std	Y+1, r24	; 0x01
     272:	8d 81       	ldd	r24, Y+5	; 0x05
     274:	28 2f       	mov	r18, r24
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
     27c:	82 17       	cp	r24, r18
     27e:	93 07       	cpc	r25, r19
     280:	5c f3       	brlt	.-42     	; 0x258 <clear_array+0x1a>
		arr[i] = '\0';
	}
}
     282:	00 00       	nop
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <Timer_init>:
#include "../../../SERVICES/STD_TYPES.h"
#include "../../../INCLUDE/MCAL/Timer/timer.h"
#include "../../../INCLUDE/MCAL/Timer/timer_prv.h"

void Timer_init(u8 Copy_u8TimerNo, u8 Copy_u8ClockSelect, u8 Copy_u8WGM,
		u8 Copy_u8OutputOnCompareMatch, u8 Copy_u8Timer1_OC2Mode) {
     294:	0f 93       	push	r16
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	00 d0       	rcall	.+0      	; 0x29c <Timer_init+0x8>
     29c:	00 d0       	rcall	.+0      	; 0x29e <Timer_init+0xa>
     29e:	1f 92       	push	r1
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	89 83       	std	Y+1, r24	; 0x01
     2a6:	6a 83       	std	Y+2, r22	; 0x02
     2a8:	4b 83       	std	Y+3, r20	; 0x03
     2aa:	2c 83       	std	Y+4, r18	; 0x04
     2ac:	0d 83       	std	Y+5, r16	; 0x05

	switch (Copy_u8TimerNo) {
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	88 2f       	mov	r24, r24
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	81 30       	cpi	r24, 0x01	; 1
     2b6:	91 05       	cpc	r25, r1
     2b8:	09 f4       	brne	.+2      	; 0x2bc <Timer_init+0x28>
     2ba:	c3 c1       	rjmp	.+902    	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	91 05       	cpc	r25, r1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <Timer_init+0x30>
     2c2:	c3 c5       	rjmp	.+2950   	; 0xe4a <__stack+0x5eb>
     2c4:	89 2b       	or	r24, r25
     2c6:	11 f0       	breq	.+4      	; 0x2cc <Timer_init+0x38>
			SET_BIT(TCCR2, COM21);
			break;
		}
		break;
	default:
		break;
     2c8:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__stack+0x961>
void Timer_init(u8 Copy_u8TimerNo, u8 Copy_u8ClockSelect, u8 Copy_u8WGM,
		u8 Copy_u8OutputOnCompareMatch, u8 Copy_u8Timer1_OC2Mode) {

	switch (Copy_u8TimerNo) {
	case Timer0:
		switch (Copy_u8ClockSelect) {
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	88 2f       	mov	r24, r24
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	09 2e       	mov	r0, r25
     2d4:	00 0c       	add	r0, r0
     2d6:	aa 0b       	sbc	r26, r26
     2d8:	bb 0b       	sbc	r27, r27
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	27 e0       	ldi	r18, 0x07	; 7
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	84 1b       	sub	r24, r20
     2e4:	95 0b       	sbc	r25, r21
     2e6:	28 17       	cp	r18, r24
     2e8:	39 07       	cpc	r19, r25
     2ea:	08 f4       	brcc	.+2      	; 0x2ee <Timer_init+0x5a>
     2ec:	e5 c0       	rjmp	.+458    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     2ee:	86 5d       	subi	r24, 0xD6	; 214
     2f0:	9f 4f       	sbci	r25, 0xFF	; 255
     2f2:	fc 01       	movw	r30, r24
     2f4:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__tablejump2__>
		case Clock0_NoClock:
			CLR_BIT(TCCR0, CS00);
     2f8:	83 e5       	ldi	r24, 0x53	; 83
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	23 e5       	ldi	r18, 0x53	; 83
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	f9 01       	movw	r30, r18
     302:	20 81       	ld	r18, Z
     304:	2e 7f       	andi	r18, 0xFE	; 254
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, CS01);
     30a:	83 e5       	ldi	r24, 0x53	; 83
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	23 e5       	ldi	r18, 0x53	; 83
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	f9 01       	movw	r30, r18
     314:	20 81       	ld	r18, Z
     316:	2d 7f       	andi	r18, 0xFD	; 253
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, CS02);
     31c:	83 e5       	ldi	r24, 0x53	; 83
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	23 e5       	ldi	r18, 0x53	; 83
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	2b 7f       	andi	r18, 0xFB	; 251
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
			break;
     32e:	c4 c0       	rjmp	.+392    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		case Clock0_Prescaler0:
			SET_BIT(TCCR0, CS00);
     330:	83 e5       	ldi	r24, 0x53	; 83
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	23 e5       	ldi	r18, 0x53	; 83
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	f9 01       	movw	r30, r18
     33a:	20 81       	ld	r18, Z
     33c:	21 60       	ori	r18, 0x01	; 1
     33e:	fc 01       	movw	r30, r24
     340:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, CS00);
     342:	83 e5       	ldi	r24, 0x53	; 83
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	23 e5       	ldi	r18, 0x53	; 83
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	f9 01       	movw	r30, r18
     34c:	20 81       	ld	r18, Z
     34e:	2e 7f       	andi	r18, 0xFE	; 254
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, CS00);
     354:	83 e5       	ldi	r24, 0x53	; 83
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	23 e5       	ldi	r18, 0x53	; 83
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	f9 01       	movw	r30, r18
     35e:	20 81       	ld	r18, Z
     360:	2e 7f       	andi	r18, 0xFE	; 254
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
			break;
     366:	a8 c0       	rjmp	.+336    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		case Clock0_Prescaler8:
			CLR_BIT(TCCR0, CS00);
     368:	83 e5       	ldi	r24, 0x53	; 83
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	23 e5       	ldi	r18, 0x53	; 83
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	f9 01       	movw	r30, r18
     372:	20 81       	ld	r18, Z
     374:	2e 7f       	andi	r18, 0xFE	; 254
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
			SET_BIT(TCCR0, CS01);
     37a:	83 e5       	ldi	r24, 0x53	; 83
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	23 e5       	ldi	r18, 0x53	; 83
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	f9 01       	movw	r30, r18
     384:	20 81       	ld	r18, Z
     386:	22 60       	ori	r18, 0x02	; 2
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, CS02);
     38c:	83 e5       	ldi	r24, 0x53	; 83
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	23 e5       	ldi	r18, 0x53	; 83
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	f9 01       	movw	r30, r18
     396:	20 81       	ld	r18, Z
     398:	2b 7f       	andi	r18, 0xFB	; 251
     39a:	fc 01       	movw	r30, r24
     39c:	20 83       	st	Z, r18
			break;
     39e:	8c c0       	rjmp	.+280    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		case Clock0_Prescaler64:
			SET_BIT(TCCR0, CS00);
     3a0:	83 e5       	ldi	r24, 0x53	; 83
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	23 e5       	ldi	r18, 0x53	; 83
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	20 81       	ld	r18, Z
     3ac:	21 60       	ori	r18, 0x01	; 1
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18
			SET_BIT(TCCR0, CS01);
     3b2:	83 e5       	ldi	r24, 0x53	; 83
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	23 e5       	ldi	r18, 0x53	; 83
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	f9 01       	movw	r30, r18
     3bc:	20 81       	ld	r18, Z
     3be:	22 60       	ori	r18, 0x02	; 2
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, CS02);
     3c4:	83 e5       	ldi	r24, 0x53	; 83
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	23 e5       	ldi	r18, 0x53	; 83
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	f9 01       	movw	r30, r18
     3ce:	20 81       	ld	r18, Z
     3d0:	2b 7f       	andi	r18, 0xFB	; 251
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
			break;
     3d6:	70 c0       	rjmp	.+224    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		case Clock0_Prescaler256:
			CLR_BIT(TCCR0, CS00);
     3d8:	83 e5       	ldi	r24, 0x53	; 83
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	23 e5       	ldi	r18, 0x53	; 83
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	f9 01       	movw	r30, r18
     3e2:	20 81       	ld	r18, Z
     3e4:	2e 7f       	andi	r18, 0xFE	; 254
     3e6:	fc 01       	movw	r30, r24
     3e8:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, CS01);
     3ea:	83 e5       	ldi	r24, 0x53	; 83
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	23 e5       	ldi	r18, 0x53	; 83
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	f9 01       	movw	r30, r18
     3f4:	20 81       	ld	r18, Z
     3f6:	2d 7f       	andi	r18, 0xFD	; 253
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
			SET_BIT(TCCR0, CS02);
     3fc:	83 e5       	ldi	r24, 0x53	; 83
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	23 e5       	ldi	r18, 0x53	; 83
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	24 60       	ori	r18, 0x04	; 4
     40a:	fc 01       	movw	r30, r24
     40c:	20 83       	st	Z, r18
			break;
     40e:	54 c0       	rjmp	.+168    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		case Clock0_Prescaler1024:
			SET_BIT(TCCR0, CS00);
     410:	83 e5       	ldi	r24, 0x53	; 83
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	23 e5       	ldi	r18, 0x53	; 83
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	f9 01       	movw	r30, r18
     41a:	20 81       	ld	r18, Z
     41c:	21 60       	ori	r18, 0x01	; 1
     41e:	fc 01       	movw	r30, r24
     420:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, CS01);
     422:	83 e5       	ldi	r24, 0x53	; 83
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	23 e5       	ldi	r18, 0x53	; 83
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	f9 01       	movw	r30, r18
     42c:	20 81       	ld	r18, Z
     42e:	2d 7f       	andi	r18, 0xFD	; 253
     430:	fc 01       	movw	r30, r24
     432:	20 83       	st	Z, r18
			SET_BIT(TCCR0, CS02);
     434:	83 e5       	ldi	r24, 0x53	; 83
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	23 e5       	ldi	r18, 0x53	; 83
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	f9 01       	movw	r30, r18
     43e:	20 81       	ld	r18, Z
     440:	24 60       	ori	r18, 0x04	; 4
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18
			break;
     446:	38 c0       	rjmp	.+112    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		case Clock0_EXTFallingEdge:
			CLR_BIT(TCCR0, CS00);
     448:	83 e5       	ldi	r24, 0x53	; 83
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	23 e5       	ldi	r18, 0x53	; 83
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	f9 01       	movw	r30, r18
     452:	20 81       	ld	r18, Z
     454:	2e 7f       	andi	r18, 0xFE	; 254
     456:	fc 01       	movw	r30, r24
     458:	20 83       	st	Z, r18
			SET_BIT(TCCR0, CS01);
     45a:	83 e5       	ldi	r24, 0x53	; 83
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	23 e5       	ldi	r18, 0x53	; 83
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	f9 01       	movw	r30, r18
     464:	20 81       	ld	r18, Z
     466:	22 60       	ori	r18, 0x02	; 2
     468:	fc 01       	movw	r30, r24
     46a:	20 83       	st	Z, r18
			SET_BIT(TCCR0, CS02);
     46c:	83 e5       	ldi	r24, 0x53	; 83
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	23 e5       	ldi	r18, 0x53	; 83
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	f9 01       	movw	r30, r18
     476:	20 81       	ld	r18, Z
     478:	24 60       	ori	r18, 0x04	; 4
     47a:	fc 01       	movw	r30, r24
     47c:	20 83       	st	Z, r18
			break;
     47e:	1c c0       	rjmp	.+56     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		case Clock0_EXTRisingEdge:
			SET_BIT(TCCR0, CS00);
     480:	83 e5       	ldi	r24, 0x53	; 83
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	23 e5       	ldi	r18, 0x53	; 83
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	f9 01       	movw	r30, r18
     48a:	20 81       	ld	r18, Z
     48c:	21 60       	ori	r18, 0x01	; 1
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
			SET_BIT(TCCR0, CS01);
     492:	83 e5       	ldi	r24, 0x53	; 83
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	23 e5       	ldi	r18, 0x53	; 83
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	f9 01       	movw	r30, r18
     49c:	20 81       	ld	r18, Z
     49e:	22 60       	ori	r18, 0x02	; 2
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
			SET_BIT(TCCR0, CS02);
     4a4:	83 e5       	ldi	r24, 0x53	; 83
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	23 e5       	ldi	r18, 0x53	; 83
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	f9 01       	movw	r30, r18
     4ae:	20 81       	ld	r18, Z
     4b0:	24 60       	ori	r18, 0x04	; 4
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
			break;
     4b6:	00 00       	nop
		}
		switch (Copy_u8WGM) {
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	91 05       	cpc	r25, r1
     4c2:	f9 f0       	breq	.+62     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	91 05       	cpc	r25, r1
     4c8:	1c f4       	brge	.+6      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
     4ca:	89 2b       	or	r24, r25
     4cc:	39 f0       	breq	.+14     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     4ce:	52 c0       	rjmp	.+164    	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	91 05       	cpc	r25, r1
     4d4:	49 f1       	breq	.+82     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     4d6:	03 97       	sbiw	r24, 0x03	; 3
     4d8:	d1 f1       	breq	.+116    	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
     4da:	4c c0       	rjmp	.+152    	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
		case WGM_Normal:
			CLR_BIT(TCCR0, WGM00);
     4dc:	83 e5       	ldi	r24, 0x53	; 83
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	23 e5       	ldi	r18, 0x53	; 83
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	f9 01       	movw	r30, r18
     4e6:	20 81       	ld	r18, Z
     4e8:	2f 7b       	andi	r18, 0xBF	; 191
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, WGM01);
     4ee:	83 e5       	ldi	r24, 0x53	; 83
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	23 e5       	ldi	r18, 0x53	; 83
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f9 01       	movw	r30, r18
     4f8:	20 81       	ld	r18, Z
     4fa:	27 7f       	andi	r18, 0xF7	; 247
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
			break;
     500:	39 c0       	rjmp	.+114    	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
		case WGM_PhaseCorrect:
			SET_BIT(TCCR0, WGM00);
     502:	83 e5       	ldi	r24, 0x53	; 83
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	23 e5       	ldi	r18, 0x53	; 83
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	20 64       	ori	r18, 0x40	; 64
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, WGM01);
     514:	83 e5       	ldi	r24, 0x53	; 83
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	23 e5       	ldi	r18, 0x53	; 83
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	f9 01       	movw	r30, r18
     51e:	20 81       	ld	r18, Z
     520:	27 7f       	andi	r18, 0xF7	; 247
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
			break;
     526:	26 c0       	rjmp	.+76     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
		case WGM_CTC:
			CLR_BIT(TCCR0, WGM00);
     528:	83 e5       	ldi	r24, 0x53	; 83
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	23 e5       	ldi	r18, 0x53	; 83
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	f9 01       	movw	r30, r18
     532:	20 81       	ld	r18, Z
     534:	2f 7b       	andi	r18, 0xBF	; 191
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18
			SET_BIT(TCCR0, WGM01);
     53a:	83 e5       	ldi	r24, 0x53	; 83
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	23 e5       	ldi	r18, 0x53	; 83
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	f9 01       	movw	r30, r18
     544:	20 81       	ld	r18, Z
     546:	28 60       	ori	r18, 0x08	; 8
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
			break;
     54c:	13 c0       	rjmp	.+38     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
		case WGM_FastPWM:
			SET_BIT(TCCR0, WGM00);
     54e:	83 e5       	ldi	r24, 0x53	; 83
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	23 e5       	ldi	r18, 0x53	; 83
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	20 81       	ld	r18, Z
     55a:	20 64       	ori	r18, 0x40	; 64
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
			SET_BIT(TCCR0, WGM01);
     560:	83 e5       	ldi	r24, 0x53	; 83
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	23 e5       	ldi	r18, 0x53	; 83
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	28 60       	ori	r18, 0x08	; 8
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
			break;
     572:	00 00       	nop
		}
		switch (Copy_u8OutputOnCompareMatch) {
     574:	8c 81       	ldd	r24, Y+4	; 0x04
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	91 05       	cpc	r25, r1
     57e:	01 f1       	breq	.+64     	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	91 05       	cpc	r25, r1
     584:	1c f4       	brge	.+6      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     586:	89 2b       	or	r24, r25
     588:	41 f0       	breq	.+16     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
		case OCM_SetOC1:
			SET_BIT(TCCR0, COM00);
			SET_BIT(TCCR0, COM01);
			break;
		}
		break;
     58a:	1a c6       	rjmp	.+3124   	; 0x11c0 <__stack+0x961>
		case WGM_FastPWM:
			SET_BIT(TCCR0, WGM00);
			SET_BIT(TCCR0, WGM01);
			break;
		}
		switch (Copy_u8OutputOnCompareMatch) {
     58c:	82 30       	cpi	r24, 0x02	; 2
     58e:	91 05       	cpc	r25, r1
     590:	81 f1       	breq	.+96     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
     592:	03 97       	sbiw	r24, 0x03	; 3
     594:	09 f4       	brne	.+2      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
     596:	40 c0       	rjmp	.+128    	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
		case OCM_SetOC1:
			SET_BIT(TCCR0, COM00);
			SET_BIT(TCCR0, COM01);
			break;
		}
		break;
     598:	13 c6       	rjmp	.+3110   	; 0x11c0 <__stack+0x961>
			SET_BIT(TCCR0, WGM01);
			break;
		}
		switch (Copy_u8OutputOnCompareMatch) {
		case OCM_DisconnectOC1:
			CLR_BIT(TCCR0, COM00);
     59a:	83 e5       	ldi	r24, 0x53	; 83
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	23 e5       	ldi	r18, 0x53	; 83
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	f9 01       	movw	r30, r18
     5a4:	20 81       	ld	r18, Z
     5a6:	2f 7e       	andi	r18, 0xEF	; 239
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18
			CLR_BIT(TCCR0, COM01);
     5ac:	83 e5       	ldi	r24, 0x53	; 83
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	23 e5       	ldi	r18, 0x53	; 83
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	f9 01       	movw	r30, r18
     5b6:	20 81       	ld	r18, Z
     5b8:	2f 7d       	andi	r18, 0xDF	; 223
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 83       	st	Z, r18
			break;
     5be:	40 c0       	rjmp	.+128    	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
		case OCM_ToggleOC1:
			if (Copy_u8WGM != WGM_FastPWM && Copy_u8WGM != WGM_PhaseCorrect) {
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	83 30       	cpi	r24, 0x03	; 3
     5c4:	e1 f1       	breq	.+120    	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	c9 f1       	breq	.+114    	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
				SET_BIT(TCCR0, COM00);CLR_BIT(TCCR0, COM01);
     5cc:	83 e5       	ldi	r24, 0x53	; 83
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	23 e5       	ldi	r18, 0x53	; 83
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	20 61       	ori	r18, 0x10	; 16
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
     5de:	83 e5       	ldi	r24, 0x53	; 83
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	23 e5       	ldi	r18, 0x53	; 83
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	2f 7d       	andi	r18, 0xDF	; 223
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18
			}
			break;
     5f0:	26 c0       	rjmp	.+76     	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
		case OCM_ClearOC1:
			CLR_BIT(TCCR0, COM00);
     5f2:	83 e5       	ldi	r24, 0x53	; 83
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	23 e5       	ldi	r18, 0x53	; 83
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	2f 7e       	andi	r18, 0xEF	; 239
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
			SET_BIT(TCCR0, COM01);
     604:	83 e5       	ldi	r24, 0x53	; 83
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	23 e5       	ldi	r18, 0x53	; 83
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	f9 01       	movw	r30, r18
     60e:	20 81       	ld	r18, Z
     610:	20 62       	ori	r18, 0x20	; 32
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
			break;
     616:	14 c0       	rjmp	.+40     	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
		case OCM_SetOC1:
			SET_BIT(TCCR0, COM00);
     618:	83 e5       	ldi	r24, 0x53	; 83
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	23 e5       	ldi	r18, 0x53	; 83
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	f9 01       	movw	r30, r18
     622:	20 81       	ld	r18, Z
     624:	20 61       	ori	r18, 0x10	; 16
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
			SET_BIT(TCCR0, COM01);
     62a:	83 e5       	ldi	r24, 0x53	; 83
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	23 e5       	ldi	r18, 0x53	; 83
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	20 62       	ori	r18, 0x20	; 32
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
			break;
     63c:	01 c0       	rjmp	.+2      	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
			break;
		case OCM_ToggleOC1:
			if (Copy_u8WGM != WGM_FastPWM && Copy_u8WGM != WGM_PhaseCorrect) {
				SET_BIT(TCCR0, COM00);CLR_BIT(TCCR0, COM01);
			}
			break;
     63e:	00 00       	nop
		case OCM_SetOC1:
			SET_BIT(TCCR0, COM00);
			SET_BIT(TCCR0, COM01);
			break;
		}
		break;
     640:	bf c5       	rjmp	.+2942   	; 0x11c0 <__stack+0x961>

		//TIMER 1
	case Timer1:
		switch (Copy_u8ClockSelect) {
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	88 2f       	mov	r24, r24
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	09 2e       	mov	r0, r25
     64a:	00 0c       	add	r0, r0
     64c:	aa 0b       	sbc	r26, r26
     64e:	bb 0b       	sbc	r27, r27
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	27 e0       	ldi	r18, 0x07	; 7
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	84 1b       	sub	r24, r20
     65a:	95 0b       	sbc	r25, r21
     65c:	28 17       	cp	r18, r24
     65e:	39 07       	cpc	r19, r25
     660:	08 f4       	brcc	.+2      	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
     662:	e5 c0       	rjmp	.+458    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     664:	8e 5c       	subi	r24, 0xCE	; 206
     666:	9f 4f       	sbci	r25, 0xFF	; 255
     668:	fc 01       	movw	r30, r24
     66a:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__tablejump2__>
		case Clock1_NoClock:
			CLR_BIT(TCCR1B, CS10);
     66e:	8e e4       	ldi	r24, 0x4E	; 78
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	2e e4       	ldi	r18, 0x4E	; 78
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	f9 01       	movw	r30, r18
     678:	20 81       	ld	r18, Z
     67a:	2e 7f       	andi	r18, 0xFE	; 254
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
			CLR_BIT(TCCR1B, CS11);
     680:	8e e4       	ldi	r24, 0x4E	; 78
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	2e e4       	ldi	r18, 0x4E	; 78
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	f9 01       	movw	r30, r18
     68a:	20 81       	ld	r18, Z
     68c:	2d 7f       	andi	r18, 0xFD	; 253
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
			CLR_BIT(TCCR1B, CS12);
     692:	8e e4       	ldi	r24, 0x4E	; 78
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	2e e4       	ldi	r18, 0x4E	; 78
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	f9 01       	movw	r30, r18
     69c:	20 81       	ld	r18, Z
     69e:	2b 7f       	andi	r18, 0xFB	; 251
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
			break;
     6a4:	c4 c0       	rjmp	.+392    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		case Clock1_Prescaler0:
			SET_BIT(TCCR1B, CS10);
     6a6:	8e e4       	ldi	r24, 0x4E	; 78
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	2e e4       	ldi	r18, 0x4E	; 78
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	f9 01       	movw	r30, r18
     6b0:	20 81       	ld	r18, Z
     6b2:	21 60       	ori	r18, 0x01	; 1
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 83       	st	Z, r18
			CLR_BIT(TCCR1B, CS11);
     6b8:	8e e4       	ldi	r24, 0x4E	; 78
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	2e e4       	ldi	r18, 0x4E	; 78
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	f9 01       	movw	r30, r18
     6c2:	20 81       	ld	r18, Z
     6c4:	2d 7f       	andi	r18, 0xFD	; 253
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
			CLR_BIT(TCCR1B, CS12);
     6ca:	8e e4       	ldi	r24, 0x4E	; 78
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	2e e4       	ldi	r18, 0x4E	; 78
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	f9 01       	movw	r30, r18
     6d4:	20 81       	ld	r18, Z
     6d6:	2b 7f       	andi	r18, 0xFB	; 251
     6d8:	fc 01       	movw	r30, r24
     6da:	20 83       	st	Z, r18
			break;
     6dc:	a8 c0       	rjmp	.+336    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		case Clock1_Prescaler8:
			CLR_BIT(TCCR1B, CS10);
     6de:	8e e4       	ldi	r24, 0x4E	; 78
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	2e e4       	ldi	r18, 0x4E	; 78
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	f9 01       	movw	r30, r18
     6e8:	20 81       	ld	r18, Z
     6ea:	2e 7f       	andi	r18, 0xFE	; 254
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
			SET_BIT(TCCR1B, CS11);
     6f0:	8e e4       	ldi	r24, 0x4E	; 78
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	2e e4       	ldi	r18, 0x4E	; 78
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	f9 01       	movw	r30, r18
     6fa:	20 81       	ld	r18, Z
     6fc:	22 60       	ori	r18, 0x02	; 2
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
			CLR_BIT(TCCR1B, CS12);
     702:	8e e4       	ldi	r24, 0x4E	; 78
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	2e e4       	ldi	r18, 0x4E	; 78
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	f9 01       	movw	r30, r18
     70c:	20 81       	ld	r18, Z
     70e:	2b 7f       	andi	r18, 0xFB	; 251
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
			break;
     714:	8c c0       	rjmp	.+280    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		case Clock1_Prescaler64:
			SET_BIT(TCCR1B, CS10);
     716:	8e e4       	ldi	r24, 0x4E	; 78
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	2e e4       	ldi	r18, 0x4E	; 78
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	f9 01       	movw	r30, r18
     720:	20 81       	ld	r18, Z
     722:	21 60       	ori	r18, 0x01	; 1
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18
			SET_BIT(TCCR1B, CS11);
     728:	8e e4       	ldi	r24, 0x4E	; 78
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	2e e4       	ldi	r18, 0x4E	; 78
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	f9 01       	movw	r30, r18
     732:	20 81       	ld	r18, Z
     734:	22 60       	ori	r18, 0x02	; 2
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
			CLR_BIT(TCCR1B, CS12);
     73a:	8e e4       	ldi	r24, 0x4E	; 78
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	2e e4       	ldi	r18, 0x4E	; 78
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	f9 01       	movw	r30, r18
     744:	20 81       	ld	r18, Z
     746:	2b 7f       	andi	r18, 0xFB	; 251
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
			break;
     74c:	70 c0       	rjmp	.+224    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		case Clock1_Prescaler256:
			CLR_BIT(TCCR1B, CS10);
     74e:	8e e4       	ldi	r24, 0x4E	; 78
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	2e e4       	ldi	r18, 0x4E	; 78
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	f9 01       	movw	r30, r18
     758:	20 81       	ld	r18, Z
     75a:	2e 7f       	andi	r18, 0xFE	; 254
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
			CLR_BIT(TCCR1B, CS11);
     760:	8e e4       	ldi	r24, 0x4E	; 78
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	2e e4       	ldi	r18, 0x4E	; 78
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	f9 01       	movw	r30, r18
     76a:	20 81       	ld	r18, Z
     76c:	2d 7f       	andi	r18, 0xFD	; 253
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
			SET_BIT(TCCR1B, CS12);
     772:	8e e4       	ldi	r24, 0x4E	; 78
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	2e e4       	ldi	r18, 0x4E	; 78
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	24 60       	ori	r18, 0x04	; 4
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
			break;
     784:	54 c0       	rjmp	.+168    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		case Clock1_Prescaler1024:
			SET_BIT(TCCR1B, CS10);
     786:	8e e4       	ldi	r24, 0x4E	; 78
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	2e e4       	ldi	r18, 0x4E	; 78
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	f9 01       	movw	r30, r18
     790:	20 81       	ld	r18, Z
     792:	21 60       	ori	r18, 0x01	; 1
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
			CLR_BIT(TCCR1B, CS11);
     798:	8e e4       	ldi	r24, 0x4E	; 78
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	2e e4       	ldi	r18, 0x4E	; 78
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	f9 01       	movw	r30, r18
     7a2:	20 81       	ld	r18, Z
     7a4:	2d 7f       	andi	r18, 0xFD	; 253
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
			SET_BIT(TCCR1B, CS12);
     7aa:	8e e4       	ldi	r24, 0x4E	; 78
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	2e e4       	ldi	r18, 0x4E	; 78
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	f9 01       	movw	r30, r18
     7b4:	20 81       	ld	r18, Z
     7b6:	24 60       	ori	r18, 0x04	; 4
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18
			break;
     7bc:	38 c0       	rjmp	.+112    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		case Clock1_EXTFallingEdge:
			CLR_BIT(TCCR1B, CS10);
     7be:	8e e4       	ldi	r24, 0x4E	; 78
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	2e e4       	ldi	r18, 0x4E	; 78
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	2e 7f       	andi	r18, 0xFE	; 254
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
			SET_BIT(TCCR1B, CS11);
     7d0:	8e e4       	ldi	r24, 0x4E	; 78
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	2e e4       	ldi	r18, 0x4E	; 78
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	f9 01       	movw	r30, r18
     7da:	20 81       	ld	r18, Z
     7dc:	22 60       	ori	r18, 0x02	; 2
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
			SET_BIT(TCCR1B, CS12);
     7e2:	8e e4       	ldi	r24, 0x4E	; 78
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	2e e4       	ldi	r18, 0x4E	; 78
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	f9 01       	movw	r30, r18
     7ec:	20 81       	ld	r18, Z
     7ee:	24 60       	ori	r18, 0x04	; 4
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 83       	st	Z, r18
			break;
     7f4:	1c c0       	rjmp	.+56     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		case Clock1_EXTRisingEdge:
			SET_BIT(TCCR1B, CS10);
     7f6:	8e e4       	ldi	r24, 0x4E	; 78
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	2e e4       	ldi	r18, 0x4E	; 78
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	f9 01       	movw	r30, r18
     800:	20 81       	ld	r18, Z
     802:	21 60       	ori	r18, 0x01	; 1
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
			SET_BIT(TCCR1B, CS11);
     808:	8e e4       	ldi	r24, 0x4E	; 78
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	2e e4       	ldi	r18, 0x4E	; 78
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	f9 01       	movw	r30, r18
     812:	20 81       	ld	r18, Z
     814:	22 60       	ori	r18, 0x02	; 2
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
			SET_BIT(TCCR1B, CS12);
     81a:	8e e4       	ldi	r24, 0x4E	; 78
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	2e e4       	ldi	r18, 0x4E	; 78
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	f9 01       	movw	r30, r18
     824:	20 81       	ld	r18, Z
     826:	24 60       	ori	r18, 0x04	; 4
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
			break;
     82c:	00 00       	nop
		}

		switch (Copy_u8WGM) {
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	88 2f       	mov	r24, r24
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	09 2e       	mov	r0, r25
     836:	00 0c       	add	r0, r0
     838:	aa 0b       	sbc	r26, r26
     83a:	bb 0b       	sbc	r27, r27
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	2f e0       	ldi	r18, 0x0F	; 15
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	84 1b       	sub	r24, r20
     846:	95 0b       	sbc	r25, r21
     848:	28 17       	cp	r18, r24
     84a:	39 07       	cpc	r19, r25
     84c:	08 f4       	brcc	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     84e:	30 c2       	rjmp	.+1120   	; 0xcb0 <__stack+0x451>
     850:	86 5c       	subi	r24, 0xC6	; 198
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	fc 01       	movw	r30, r24
     856:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__tablejump2__>
		case Timer1_WGM_Normal16BitR:
			implement_Timer1_WGM_Normal16BitR
     85a:	8e e4       	ldi	r24, 0x4E	; 78
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	2e e4       	ldi	r18, 0x4E	; 78
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	f9 01       	movw	r30, r18
     864:	20 81       	ld	r18, Z
     866:	2f 7e       	andi	r18, 0xEF	; 239
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
     86c:	8e e4       	ldi	r24, 0x4E	; 78
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2e e4       	ldi	r18, 0x4E	; 78
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	20 81       	ld	r18, Z
     878:	27 7f       	andi	r18, 0xF7	; 247
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
     87e:	8f e4       	ldi	r24, 0x4F	; 79
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	2f e4       	ldi	r18, 0x4F	; 79
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	2d 7f       	andi	r18, 0xFD	; 253
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
     890:	8f e4       	ldi	r24, 0x4F	; 79
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	2f e4       	ldi	r18, 0x4F	; 79
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	f9 01       	movw	r30, r18
     89a:	20 81       	ld	r18, Z
     89c:	2e 7f       	andi	r18, 0xFE	; 254
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
			;
			break;
     8a2:	06 c2       	rjmp	.+1036   	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_PhaseCorrect8BitR:
			implement_Timer1_WGM_PhaseCorrect8BitR
     8a4:	8e e4       	ldi	r24, 0x4E	; 78
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	2e e4       	ldi	r18, 0x4E	; 78
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	f9 01       	movw	r30, r18
     8ae:	20 81       	ld	r18, Z
     8b0:	2f 7e       	andi	r18, 0xEF	; 239
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18
     8b6:	8e e4       	ldi	r24, 0x4E	; 78
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	2e e4       	ldi	r18, 0x4E	; 78
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	f9 01       	movw	r30, r18
     8c0:	20 81       	ld	r18, Z
     8c2:	27 7f       	andi	r18, 0xF7	; 247
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 83       	st	Z, r18
     8c8:	8f e4       	ldi	r24, 0x4F	; 79
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	2f e4       	ldi	r18, 0x4F	; 79
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	f9 01       	movw	r30, r18
     8d2:	20 81       	ld	r18, Z
     8d4:	2d 7f       	andi	r18, 0xFD	; 253
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
     8da:	8f e4       	ldi	r24, 0x4F	; 79
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	2f e4       	ldi	r18, 0x4F	; 79
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	f9 01       	movw	r30, r18
     8e4:	20 81       	ld	r18, Z
     8e6:	21 60       	ori	r18, 0x01	; 1
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
			;
			break;
     8ec:	e1 c1       	rjmp	.+962    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_PhaseCorrect9BitR:
			implement_Timer1_WGM_FastPWM9BitR
     8ee:	8e e4       	ldi	r24, 0x4E	; 78
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	2e e4       	ldi	r18, 0x4E	; 78
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	f9 01       	movw	r30, r18
     8f8:	20 81       	ld	r18, Z
     8fa:	2f 7e       	andi	r18, 0xEF	; 239
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
     900:	8e e4       	ldi	r24, 0x4E	; 78
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	2e e4       	ldi	r18, 0x4E	; 78
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	f9 01       	movw	r30, r18
     90a:	20 81       	ld	r18, Z
     90c:	28 60       	ori	r18, 0x08	; 8
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
     912:	8f e4       	ldi	r24, 0x4F	; 79
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	2f e4       	ldi	r18, 0x4F	; 79
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	22 60       	ori	r18, 0x02	; 2
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18
     924:	8f e4       	ldi	r24, 0x4F	; 79
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	2f e4       	ldi	r18, 0x4F	; 79
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	20 81       	ld	r18, Z
     930:	2e 7f       	andi	r18, 0xFE	; 254
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
			;
			break;
     936:	bc c1       	rjmp	.+888    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_PhaseCorrect10BitR:
			implement_Timer1_WGM_PhaseCorrect10BitR
     938:	8e e4       	ldi	r24, 0x4E	; 78
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	2e e4       	ldi	r18, 0x4E	; 78
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	20 81       	ld	r18, Z
     944:	2f 7e       	andi	r18, 0xEF	; 239
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
     94a:	8e e4       	ldi	r24, 0x4E	; 78
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	2e e4       	ldi	r18, 0x4E	; 78
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	27 7f       	andi	r18, 0xF7	; 247
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
     95c:	8f e4       	ldi	r24, 0x4F	; 79
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	2f e4       	ldi	r18, 0x4F	; 79
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	22 60       	ori	r18, 0x02	; 2
     96a:	fc 01       	movw	r30, r24
     96c:	20 83       	st	Z, r18
     96e:	8f e4       	ldi	r24, 0x4F	; 79
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	2f e4       	ldi	r18, 0x4F	; 79
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	f9 01       	movw	r30, r18
     978:	20 81       	ld	r18, Z
     97a:	21 60       	ori	r18, 0x01	; 1
     97c:	fc 01       	movw	r30, r24
     97e:	20 83       	st	Z, r18
			;
			break;
     980:	97 c1       	rjmp	.+814    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_ctcOCR1ATop:
			implement_Timer1_WGM_CTC
     982:	8e e4       	ldi	r24, 0x4E	; 78
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	2e e4       	ldi	r18, 0x4E	; 78
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	f9 01       	movw	r30, r18
     98c:	20 81       	ld	r18, Z
     98e:	2f 7e       	andi	r18, 0xEF	; 239
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
     994:	8e e4       	ldi	r24, 0x4E	; 78
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	2e e4       	ldi	r18, 0x4E	; 78
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	f9 01       	movw	r30, r18
     99e:	20 81       	ld	r18, Z
     9a0:	28 60       	ori	r18, 0x08	; 8
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
     9a6:	8f e4       	ldi	r24, 0x4F	; 79
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	2f e4       	ldi	r18, 0x4F	; 79
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	f9 01       	movw	r30, r18
     9b0:	20 81       	ld	r18, Z
     9b2:	2d 7f       	andi	r18, 0xFD	; 253
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
     9b8:	8f e4       	ldi	r24, 0x4F	; 79
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	2f e4       	ldi	r18, 0x4F	; 79
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	f9 01       	movw	r30, r18
     9c2:	20 81       	ld	r18, Z
     9c4:	2e 7f       	andi	r18, 0xFE	; 254
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18
			;
			break;
     9ca:	72 c1       	rjmp	.+740    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_FastPWM8BitR:
			implement_Timer1_WGM_FastPWM8BitR
     9cc:	8e e4       	ldi	r24, 0x4E	; 78
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	2e e4       	ldi	r18, 0x4E	; 78
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	f9 01       	movw	r30, r18
     9d6:	20 81       	ld	r18, Z
     9d8:	2f 7e       	andi	r18, 0xEF	; 239
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18
     9de:	8e e4       	ldi	r24, 0x4E	; 78
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	2e e4       	ldi	r18, 0x4E	; 78
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	f9 01       	movw	r30, r18
     9e8:	20 81       	ld	r18, Z
     9ea:	28 60       	ori	r18, 0x08	; 8
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
     9f0:	8f e4       	ldi	r24, 0x4F	; 79
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	2f e4       	ldi	r18, 0x4F	; 79
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	f9 01       	movw	r30, r18
     9fa:	20 81       	ld	r18, Z
     9fc:	2d 7f       	andi	r18, 0xFD	; 253
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
     a02:	8f e4       	ldi	r24, 0x4F	; 79
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	2f e4       	ldi	r18, 0x4F	; 79
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	f9 01       	movw	r30, r18
     a0c:	20 81       	ld	r18, Z
     a0e:	21 60       	ori	r18, 0x01	; 1
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
			;
			break;
     a14:	4d c1       	rjmp	.+666    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_FastPWM9BitR:
			implement_Timer1_WGM_FastPWM9BitR
     a16:	8e e4       	ldi	r24, 0x4E	; 78
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	2e e4       	ldi	r18, 0x4E	; 78
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	2f 7e       	andi	r18, 0xEF	; 239
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
     a28:	8e e4       	ldi	r24, 0x4E	; 78
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	2e e4       	ldi	r18, 0x4E	; 78
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	f9 01       	movw	r30, r18
     a32:	20 81       	ld	r18, Z
     a34:	28 60       	ori	r18, 0x08	; 8
     a36:	fc 01       	movw	r30, r24
     a38:	20 83       	st	Z, r18
     a3a:	8f e4       	ldi	r24, 0x4F	; 79
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	2f e4       	ldi	r18, 0x4F	; 79
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	f9 01       	movw	r30, r18
     a44:	20 81       	ld	r18, Z
     a46:	22 60       	ori	r18, 0x02	; 2
     a48:	fc 01       	movw	r30, r24
     a4a:	20 83       	st	Z, r18
     a4c:	8f e4       	ldi	r24, 0x4F	; 79
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	2f e4       	ldi	r18, 0x4F	; 79
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	f9 01       	movw	r30, r18
     a56:	20 81       	ld	r18, Z
     a58:	2e 7f       	andi	r18, 0xFE	; 254
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
			;
			break;
     a5e:	28 c1       	rjmp	.+592    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_FastPWM10BitR:
			implement_Timer1_WGM_FastPWM10BitR
     a60:	8e e4       	ldi	r24, 0x4E	; 78
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	2e e4       	ldi	r18, 0x4E	; 78
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	f9 01       	movw	r30, r18
     a6a:	20 81       	ld	r18, Z
     a6c:	2f 7e       	andi	r18, 0xEF	; 239
     a6e:	fc 01       	movw	r30, r24
     a70:	20 83       	st	Z, r18
     a72:	8e e4       	ldi	r24, 0x4E	; 78
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	2e e4       	ldi	r18, 0x4E	; 78
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	f9 01       	movw	r30, r18
     a7c:	20 81       	ld	r18, Z
     a7e:	28 60       	ori	r18, 0x08	; 8
     a80:	fc 01       	movw	r30, r24
     a82:	20 83       	st	Z, r18
     a84:	8f e4       	ldi	r24, 0x4F	; 79
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	2f e4       	ldi	r18, 0x4F	; 79
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	f9 01       	movw	r30, r18
     a8e:	20 81       	ld	r18, Z
     a90:	22 60       	ori	r18, 0x02	; 2
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
     a96:	8f e4       	ldi	r24, 0x4F	; 79
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	2f e4       	ldi	r18, 0x4F	; 79
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	f9 01       	movw	r30, r18
     aa0:	20 81       	ld	r18, Z
     aa2:	21 60       	ori	r18, 0x01	; 1
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18
			;
			break;
     aa8:	03 c1       	rjmp	.+518    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_PhFreqCorrectICR1Top:
			implement_Timer1_WGM_PhFreqCorrectICR1Top
     aaa:	8e e4       	ldi	r24, 0x4E	; 78
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	2e e4       	ldi	r18, 0x4E	; 78
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	20 61       	ori	r18, 0x10	; 16
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
     abc:	8e e4       	ldi	r24, 0x4E	; 78
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	2e e4       	ldi	r18, 0x4E	; 78
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	f9 01       	movw	r30, r18
     ac6:	20 81       	ld	r18, Z
     ac8:	27 7f       	andi	r18, 0xF7	; 247
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
     ace:	8f e4       	ldi	r24, 0x4F	; 79
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	2f e4       	ldi	r18, 0x4F	; 79
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	f9 01       	movw	r30, r18
     ad8:	20 81       	ld	r18, Z
     ada:	2d 7f       	andi	r18, 0xFD	; 253
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
     ae0:	8f e4       	ldi	r24, 0x4F	; 79
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	2f e4       	ldi	r18, 0x4F	; 79
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	f9 01       	movw	r30, r18
     aea:	20 81       	ld	r18, Z
     aec:	2e 7f       	andi	r18, 0xFE	; 254
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
			;
			break;
     af2:	de c0       	rjmp	.+444    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_PhFreqCorrectOCR1ATop:
			implement_Timer1_WGM_PhFreqCorrectOCR1ATop
     af4:	8e e4       	ldi	r24, 0x4E	; 78
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	2e e4       	ldi	r18, 0x4E	; 78
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	f9 01       	movw	r30, r18
     afe:	20 81       	ld	r18, Z
     b00:	20 61       	ori	r18, 0x10	; 16
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
     b06:	8e e4       	ldi	r24, 0x4E	; 78
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	2e e4       	ldi	r18, 0x4E	; 78
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	20 81       	ld	r18, Z
     b12:	27 7f       	andi	r18, 0xF7	; 247
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
     b18:	8f e4       	ldi	r24, 0x4F	; 79
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	2f e4       	ldi	r18, 0x4F	; 79
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	f9 01       	movw	r30, r18
     b22:	20 81       	ld	r18, Z
     b24:	2d 7f       	andi	r18, 0xFD	; 253
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
     b2a:	8f e4       	ldi	r24, 0x4F	; 79
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	2f e4       	ldi	r18, 0x4F	; 79
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	f9 01       	movw	r30, r18
     b34:	20 81       	ld	r18, Z
     b36:	21 60       	ori	r18, 0x01	; 1
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18
			;
			break;
     b3c:	b9 c0       	rjmp	.+370    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_PhaseCorrectICR1Top:
			implement_Timer1_WGM_PhaseCorrectICR1Top
     b3e:	8e e4       	ldi	r24, 0x4E	; 78
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	2e e4       	ldi	r18, 0x4E	; 78
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	f9 01       	movw	r30, r18
     b48:	20 81       	ld	r18, Z
     b4a:	20 61       	ori	r18, 0x10	; 16
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
     b50:	8e e4       	ldi	r24, 0x4E	; 78
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	2e e4       	ldi	r18, 0x4E	; 78
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	f9 01       	movw	r30, r18
     b5a:	20 81       	ld	r18, Z
     b5c:	27 7f       	andi	r18, 0xF7	; 247
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
     b62:	8f e4       	ldi	r24, 0x4F	; 79
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	2f e4       	ldi	r18, 0x4F	; 79
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	f9 01       	movw	r30, r18
     b6c:	20 81       	ld	r18, Z
     b6e:	22 60       	ori	r18, 0x02	; 2
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
     b74:	8f e4       	ldi	r24, 0x4F	; 79
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	2f e4       	ldi	r18, 0x4F	; 79
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	f9 01       	movw	r30, r18
     b7e:	20 81       	ld	r18, Z
     b80:	2e 7f       	andi	r18, 0xFE	; 254
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18
			;
			break;
     b86:	94 c0       	rjmp	.+296    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_PhaseCorrectOCR1ATop:
			implement_Timer1_WGM_PhaseCorrectOCR1ATop
     b88:	8e e4       	ldi	r24, 0x4E	; 78
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	2e e4       	ldi	r18, 0x4E	; 78
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	f9 01       	movw	r30, r18
     b92:	20 81       	ld	r18, Z
     b94:	20 61       	ori	r18, 0x10	; 16
     b96:	fc 01       	movw	r30, r24
     b98:	20 83       	st	Z, r18
     b9a:	8e e4       	ldi	r24, 0x4E	; 78
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	2e e4       	ldi	r18, 0x4E	; 78
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	f9 01       	movw	r30, r18
     ba4:	20 81       	ld	r18, Z
     ba6:	27 7f       	andi	r18, 0xF7	; 247
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18
     bac:	8f e4       	ldi	r24, 0x4F	; 79
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	2f e4       	ldi	r18, 0x4F	; 79
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	f9 01       	movw	r30, r18
     bb6:	20 81       	ld	r18, Z
     bb8:	22 60       	ori	r18, 0x02	; 2
     bba:	fc 01       	movw	r30, r24
     bbc:	20 83       	st	Z, r18
     bbe:	8f e4       	ldi	r24, 0x4F	; 79
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	2f e4       	ldi	r18, 0x4F	; 79
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	f9 01       	movw	r30, r18
     bc8:	20 81       	ld	r18, Z
     bca:	21 60       	ori	r18, 0x01	; 1
     bcc:	fc 01       	movw	r30, r24
     bce:	20 83       	st	Z, r18
			;
			break;
     bd0:	6f c0       	rjmp	.+222    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_ctcICR1Top:
			implement_Timer1_WGM_ctcICR1Top
     bd2:	8e e4       	ldi	r24, 0x4E	; 78
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	2e e4       	ldi	r18, 0x4E	; 78
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	f9 01       	movw	r30, r18
     bdc:	20 81       	ld	r18, Z
     bde:	20 61       	ori	r18, 0x10	; 16
     be0:	fc 01       	movw	r30, r24
     be2:	20 83       	st	Z, r18
     be4:	8e e4       	ldi	r24, 0x4E	; 78
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	2e e4       	ldi	r18, 0x4E	; 78
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	f9 01       	movw	r30, r18
     bee:	20 81       	ld	r18, Z
     bf0:	28 60       	ori	r18, 0x08	; 8
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
     bf6:	8f e4       	ldi	r24, 0x4F	; 79
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	2f e4       	ldi	r18, 0x4F	; 79
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	f9 01       	movw	r30, r18
     c00:	20 81       	ld	r18, Z
     c02:	2d 7f       	andi	r18, 0xFD	; 253
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
     c08:	8f e4       	ldi	r24, 0x4F	; 79
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	2f e4       	ldi	r18, 0x4F	; 79
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	f9 01       	movw	r30, r18
     c12:	20 81       	ld	r18, Z
     c14:	2e 7f       	andi	r18, 0xFE	; 254
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
			;
			break;
     c1a:	4a c0       	rjmp	.+148    	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_FastPWMICR1Top:
			implement_Timer1_WGM_FastPWMICR1Top
     c1c:	8e e4       	ldi	r24, 0x4E	; 78
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	2e e4       	ldi	r18, 0x4E	; 78
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	f9 01       	movw	r30, r18
     c26:	20 81       	ld	r18, Z
     c28:	20 61       	ori	r18, 0x10	; 16
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18
     c2e:	8e e4       	ldi	r24, 0x4E	; 78
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	2e e4       	ldi	r18, 0x4E	; 78
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	f9 01       	movw	r30, r18
     c38:	20 81       	ld	r18, Z
     c3a:	28 60       	ori	r18, 0x08	; 8
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18
     c40:	8f e4       	ldi	r24, 0x4F	; 79
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	2f e4       	ldi	r18, 0x4F	; 79
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	f9 01       	movw	r30, r18
     c4a:	20 81       	ld	r18, Z
     c4c:	22 60       	ori	r18, 0x02	; 2
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18
     c52:	8f e4       	ldi	r24, 0x4F	; 79
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	2f e4       	ldi	r18, 0x4F	; 79
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	f9 01       	movw	r30, r18
     c5c:	20 81       	ld	r18, Z
     c5e:	2e 7f       	andi	r18, 0xFE	; 254
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
			;
			break;
     c64:	25 c0       	rjmp	.+74     	; 0xcb0 <__stack+0x451>
		case Timer1_WGM_FastPWMOCR1ATop:
			implement_Timer1_WGM_FastPWMOCR1ATop
     c66:	8e e4       	ldi	r24, 0x4E	; 78
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	2e e4       	ldi	r18, 0x4E	; 78
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	f9 01       	movw	r30, r18
     c70:	20 81       	ld	r18, Z
     c72:	20 61       	ori	r18, 0x10	; 16
     c74:	fc 01       	movw	r30, r24
     c76:	20 83       	st	Z, r18
     c78:	8e e4       	ldi	r24, 0x4E	; 78
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	2e e4       	ldi	r18, 0x4E	; 78
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	f9 01       	movw	r30, r18
     c82:	20 81       	ld	r18, Z
     c84:	28 60       	ori	r18, 0x08	; 8
     c86:	fc 01       	movw	r30, r24
     c88:	20 83       	st	Z, r18
     c8a:	8f e4       	ldi	r24, 0x4F	; 79
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	2f e4       	ldi	r18, 0x4F	; 79
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	22 60       	ori	r18, 0x02	; 2
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
     c9c:	8f e4       	ldi	r24, 0x4F	; 79
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	2f e4       	ldi	r18, 0x4F	; 79
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	f9 01       	movw	r30, r18
     ca6:	20 81       	ld	r18, Z
     ca8:	21 60       	ori	r18, 0x01	; 1
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
			;
			break;
     cae:	00 00       	nop
		}

		switch (Copy_u8OutputOnCompareMatch) {
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	91 05       	cpc	r25, r1
     cba:	01 f1       	breq	.+64     	; 0xcfc <__stack+0x49d>
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	91 05       	cpc	r25, r1
     cc0:	1c f4       	brge	.+6      	; 0xcc8 <__stack+0x469>
     cc2:	89 2b       	or	r24, r25
     cc4:	41 f0       	breq	.+16     	; 0xcd6 <__stack+0x477>
     cc6:	5a c0       	rjmp	.+180    	; 0xd7c <__stack+0x51d>
     cc8:	82 30       	cpi	r24, 0x02	; 2
     cca:	91 05       	cpc	r25, r1
     ccc:	81 f1       	breq	.+96     	; 0xd2e <__stack+0x4cf>
     cce:	03 97       	sbiw	r24, 0x03	; 3
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <__stack+0x475>
     cd2:	40 c0       	rjmp	.+128    	; 0xd54 <__stack+0x4f5>
     cd4:	53 c0       	rjmp	.+166    	; 0xd7c <__stack+0x51d>
		case OCM_DisconnectOC1:
			CLR_BIT(TCCR1A, COM1A0);
     cd6:	8f e4       	ldi	r24, 0x4F	; 79
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	2f e4       	ldi	r18, 0x4F	; 79
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	f9 01       	movw	r30, r18
     ce0:	20 81       	ld	r18, Z
     ce2:	2f 7b       	andi	r18, 0xBF	; 191
     ce4:	fc 01       	movw	r30, r24
     ce6:	20 83       	st	Z, r18
			CLR_BIT(TCCR1A, COM1A1);
     ce8:	8f e4       	ldi	r24, 0x4F	; 79
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	2f e4       	ldi	r18, 0x4F	; 79
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	f9 01       	movw	r30, r18
     cf2:	20 81       	ld	r18, Z
     cf4:	2f 77       	andi	r18, 0x7F	; 127
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 83       	st	Z, r18
			break;
     cfa:	40 c0       	rjmp	.+128    	; 0xd7c <__stack+0x51d>
		case OCM_ToggleOC1:
			if (Copy_u8WGM != WGM_FastPWM && Copy_u8WGM != WGM_PhaseCorrect) {
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	e1 f1       	breq	.+120    	; 0xd7a <__stack+0x51b>
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	c9 f1       	breq	.+114    	; 0xd7a <__stack+0x51b>
				SET_BIT(TCCR1A, COM1A0);CLR_BIT(TCCR1A, COM1A1);
     d08:	8f e4       	ldi	r24, 0x4F	; 79
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	2f e4       	ldi	r18, 0x4F	; 79
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	f9 01       	movw	r30, r18
     d12:	20 81       	ld	r18, Z
     d14:	20 64       	ori	r18, 0x40	; 64
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
     d1a:	8f e4       	ldi	r24, 0x4F	; 79
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	2f e4       	ldi	r18, 0x4F	; 79
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	f9 01       	movw	r30, r18
     d24:	20 81       	ld	r18, Z
     d26:	2f 77       	andi	r18, 0x7F	; 127
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
			}
			break;
     d2c:	26 c0       	rjmp	.+76     	; 0xd7a <__stack+0x51b>
		case OCM_ClearOC1ComSetTop:
			CLR_BIT(TCCR1A, COM1A0);
     d2e:	8f e4       	ldi	r24, 0x4F	; 79
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	2f e4       	ldi	r18, 0x4F	; 79
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	2f 7b       	andi	r18, 0xBF	; 191
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
			SET_BIT(TCCR1A, COM1A1);
     d40:	8f e4       	ldi	r24, 0x4F	; 79
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	2f e4       	ldi	r18, 0x4F	; 79
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	f9 01       	movw	r30, r18
     d4a:	20 81       	ld	r18, Z
     d4c:	20 68       	ori	r18, 0x80	; 128
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
			break;
     d52:	14 c0       	rjmp	.+40     	; 0xd7c <__stack+0x51d>
		case OCM_SetOC1ComClrTop:
			SET_BIT(TCCR1A, COM1A0);
     d54:	8f e4       	ldi	r24, 0x4F	; 79
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	2f e4       	ldi	r18, 0x4F	; 79
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	f9 01       	movw	r30, r18
     d5e:	20 81       	ld	r18, Z
     d60:	20 64       	ori	r18, 0x40	; 64
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
			SET_BIT(TCCR1A, COM1A1);
     d66:	8f e4       	ldi	r24, 0x4F	; 79
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	2f e4       	ldi	r18, 0x4F	; 79
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	f9 01       	movw	r30, r18
     d70:	20 81       	ld	r18, Z
     d72:	20 68       	ori	r18, 0x80	; 128
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
			break;
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <__stack+0x51d>
			break;
		case OCM_ToggleOC1:
			if (Copy_u8WGM != WGM_FastPWM && Copy_u8WGM != WGM_PhaseCorrect) {
				SET_BIT(TCCR1A, COM1A0);CLR_BIT(TCCR1A, COM1A1);
			}
			break;
     d7a:	00 00       	nop
			SET_BIT(TCCR1A, COM1A0);
			SET_BIT(TCCR1A, COM1A1);
			break;
		}

		switch (Copy_u8Timer1_OC2Mode) {
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 05       	cpc	r25, r1
     d86:	01 f1       	breq	.+64     	; 0xdc8 <__stack+0x569>
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	91 05       	cpc	r25, r1
     d8c:	1c f4       	brge	.+6      	; 0xd94 <__stack+0x535>
     d8e:	89 2b       	or	r24, r25
     d90:	41 f0       	breq	.+16     	; 0xda2 <__stack+0x543>
		case OCM_SetOC1ComClrTop:
			SET_BIT(TCCR1A, COM1B0);
			SET_BIT(TCCR1A, COM1B1);
			break;
		}
		break;
     d92:	16 c2       	rjmp	.+1068   	; 0x11c0 <__stack+0x961>
			SET_BIT(TCCR1A, COM1A0);
			SET_BIT(TCCR1A, COM1A1);
			break;
		}

		switch (Copy_u8Timer1_OC2Mode) {
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	91 05       	cpc	r25, r1
     d98:	81 f1       	breq	.+96     	; 0xdfa <__stack+0x59b>
     d9a:	03 97       	sbiw	r24, 0x03	; 3
     d9c:	09 f4       	brne	.+2      	; 0xda0 <__stack+0x541>
     d9e:	40 c0       	rjmp	.+128    	; 0xe20 <__stack+0x5c1>
		case OCM_SetOC1ComClrTop:
			SET_BIT(TCCR1A, COM1B0);
			SET_BIT(TCCR1A, COM1B1);
			break;
		}
		break;
     da0:	0f c2       	rjmp	.+1054   	; 0x11c0 <__stack+0x961>
			break;
		}

		switch (Copy_u8Timer1_OC2Mode) {
		case OCM_DisconnectOC1:
			CLR_BIT(TCCR1A, COM1B0);
     da2:	8f e4       	ldi	r24, 0x4F	; 79
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	2f e4       	ldi	r18, 0x4F	; 79
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	f9 01       	movw	r30, r18
     dac:	20 81       	ld	r18, Z
     dae:	2f 7e       	andi	r18, 0xEF	; 239
     db0:	fc 01       	movw	r30, r24
     db2:	20 83       	st	Z, r18
			CLR_BIT(TCCR1A, COM1B1);
     db4:	8f e4       	ldi	r24, 0x4F	; 79
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	2f e4       	ldi	r18, 0x4F	; 79
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	f9 01       	movw	r30, r18
     dbe:	20 81       	ld	r18, Z
     dc0:	2f 7d       	andi	r18, 0xDF	; 223
     dc2:	fc 01       	movw	r30, r24
     dc4:	20 83       	st	Z, r18
			break;
     dc6:	40 c0       	rjmp	.+128    	; 0xe48 <__stack+0x5e9>
		case OCM_ToggleOC1:
			if (Copy_u8WGM != WGM_FastPWM && Copy_u8WGM != WGM_PhaseCorrect) {
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	e1 f1       	breq	.+120    	; 0xe46 <__stack+0x5e7>
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	c9 f1       	breq	.+114    	; 0xe46 <__stack+0x5e7>
				SET_BIT(TCCR1A, COM1B0);CLR_BIT(TCCR1A, COM1B1);
     dd4:	8f e4       	ldi	r24, 0x4F	; 79
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	2f e4       	ldi	r18, 0x4F	; 79
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	f9 01       	movw	r30, r18
     dde:	20 81       	ld	r18, Z
     de0:	20 61       	ori	r18, 0x10	; 16
     de2:	fc 01       	movw	r30, r24
     de4:	20 83       	st	Z, r18
     de6:	8f e4       	ldi	r24, 0x4F	; 79
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	2f e4       	ldi	r18, 0x4F	; 79
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	f9 01       	movw	r30, r18
     df0:	20 81       	ld	r18, Z
     df2:	2f 7d       	andi	r18, 0xDF	; 223
     df4:	fc 01       	movw	r30, r24
     df6:	20 83       	st	Z, r18
			}
			break;
     df8:	26 c0       	rjmp	.+76     	; 0xe46 <__stack+0x5e7>
		case OCM_ClearOC1ComSetTop:
			CLR_BIT(TCCR1A, COM1B0);
     dfa:	8f e4       	ldi	r24, 0x4F	; 79
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	2f e4       	ldi	r18, 0x4F	; 79
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	f9 01       	movw	r30, r18
     e04:	20 81       	ld	r18, Z
     e06:	2f 7e       	andi	r18, 0xEF	; 239
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
			SET_BIT(TCCR1A, COM1B1);
     e0c:	8f e4       	ldi	r24, 0x4F	; 79
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	2f e4       	ldi	r18, 0x4F	; 79
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	f9 01       	movw	r30, r18
     e16:	20 81       	ld	r18, Z
     e18:	20 62       	ori	r18, 0x20	; 32
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 83       	st	Z, r18
			break;
     e1e:	14 c0       	rjmp	.+40     	; 0xe48 <__stack+0x5e9>
		case OCM_SetOC1ComClrTop:
			SET_BIT(TCCR1A, COM1B0);
     e20:	8f e4       	ldi	r24, 0x4F	; 79
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	2f e4       	ldi	r18, 0x4F	; 79
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	f9 01       	movw	r30, r18
     e2a:	20 81       	ld	r18, Z
     e2c:	20 61       	ori	r18, 0x10	; 16
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18
			SET_BIT(TCCR1A, COM1B1);
     e32:	8f e4       	ldi	r24, 0x4F	; 79
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	2f e4       	ldi	r18, 0x4F	; 79
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	f9 01       	movw	r30, r18
     e3c:	20 81       	ld	r18, Z
     e3e:	20 62       	ori	r18, 0x20	; 32
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
			break;
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <__stack+0x5e9>
			break;
		case OCM_ToggleOC1:
			if (Copy_u8WGM != WGM_FastPWM && Copy_u8WGM != WGM_PhaseCorrect) {
				SET_BIT(TCCR1A, COM1B0);CLR_BIT(TCCR1A, COM1B1);
			}
			break;
     e46:	00 00       	nop
		case OCM_SetOC1ComClrTop:
			SET_BIT(TCCR1A, COM1B0);
			SET_BIT(TCCR1A, COM1B1);
			break;
		}
		break;
     e48:	bb c1       	rjmp	.+886    	; 0x11c0 <__stack+0x961>

	case Timer2:
		switch (Copy_u8ClockSelect) {
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	09 2e       	mov	r0, r25
     e52:	00 0c       	add	r0, r0
     e54:	aa 0b       	sbc	r26, r26
     e56:	bb 0b       	sbc	r27, r27
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	27 e0       	ldi	r18, 0x07	; 7
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	84 1b       	sub	r24, r20
     e62:	95 0b       	sbc	r25, r21
     e64:	28 17       	cp	r18, r24
     e66:	39 07       	cpc	r19, r25
     e68:	08 f4       	brcc	.+2      	; 0xe6c <__stack+0x60d>
     e6a:	e5 c0       	rjmp	.+458    	; 0x1036 <__stack+0x7d7>
     e6c:	86 5b       	subi	r24, 0xB6	; 182
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	fc 01       	movw	r30, r24
     e72:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__tablejump2__>
		case Clock2_NoClock:
			CLR_BIT(TCCR2, CS20);
     e76:	85 e4       	ldi	r24, 0x45	; 69
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	25 e4       	ldi	r18, 0x45	; 69
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	f9 01       	movw	r30, r18
     e80:	20 81       	ld	r18, Z
     e82:	2e 7f       	andi	r18, 0xFE	; 254
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, CS21);
     e88:	85 e4       	ldi	r24, 0x45	; 69
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	25 e4       	ldi	r18, 0x45	; 69
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	f9 01       	movw	r30, r18
     e92:	20 81       	ld	r18, Z
     e94:	2d 7f       	andi	r18, 0xFD	; 253
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, CS22);
     e9a:	85 e4       	ldi	r24, 0x45	; 69
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	25 e4       	ldi	r18, 0x45	; 69
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	f9 01       	movw	r30, r18
     ea4:	20 81       	ld	r18, Z
     ea6:	2b 7f       	andi	r18, 0xFB	; 251
     ea8:	fc 01       	movw	r30, r24
     eaa:	20 83       	st	Z, r18
			break;
     eac:	c4 c0       	rjmp	.+392    	; 0x1036 <__stack+0x7d7>
		case Clock2_Prescaler0:
			SET_BIT(TCCR2, CS20);
     eae:	85 e4       	ldi	r24, 0x45	; 69
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	25 e4       	ldi	r18, 0x45	; 69
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	f9 01       	movw	r30, r18
     eb8:	20 81       	ld	r18, Z
     eba:	21 60       	ori	r18, 0x01	; 1
     ebc:	fc 01       	movw	r30, r24
     ebe:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, CS20);
     ec0:	85 e4       	ldi	r24, 0x45	; 69
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	25 e4       	ldi	r18, 0x45	; 69
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	f9 01       	movw	r30, r18
     eca:	20 81       	ld	r18, Z
     ecc:	2e 7f       	andi	r18, 0xFE	; 254
     ece:	fc 01       	movw	r30, r24
     ed0:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, CS20);
     ed2:	85 e4       	ldi	r24, 0x45	; 69
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	25 e4       	ldi	r18, 0x45	; 69
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	f9 01       	movw	r30, r18
     edc:	20 81       	ld	r18, Z
     ede:	2e 7f       	andi	r18, 0xFE	; 254
     ee0:	fc 01       	movw	r30, r24
     ee2:	20 83       	st	Z, r18
			break;
     ee4:	a8 c0       	rjmp	.+336    	; 0x1036 <__stack+0x7d7>
		case Clock2_Prescaler8:
			CLR_BIT(TCCR2, CS20);
     ee6:	85 e4       	ldi	r24, 0x45	; 69
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	25 e4       	ldi	r18, 0x45	; 69
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	f9 01       	movw	r30, r18
     ef0:	20 81       	ld	r18, Z
     ef2:	2e 7f       	andi	r18, 0xFE	; 254
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 83       	st	Z, r18
			SET_BIT(TCCR2, CS21);
     ef8:	85 e4       	ldi	r24, 0x45	; 69
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	25 e4       	ldi	r18, 0x45	; 69
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	22 60       	ori	r18, 0x02	; 2
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, CS22);
     f0a:	85 e4       	ldi	r24, 0x45	; 69
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	25 e4       	ldi	r18, 0x45	; 69
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	2b 7f       	andi	r18, 0xFB	; 251
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
			break;
     f1c:	8c c0       	rjmp	.+280    	; 0x1036 <__stack+0x7d7>
		case Clock2_Prescaler32:
			SET_BIT(TCCR2, CS20);
     f1e:	85 e4       	ldi	r24, 0x45	; 69
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	25 e4       	ldi	r18, 0x45	; 69
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	f9 01       	movw	r30, r18
     f28:	20 81       	ld	r18, Z
     f2a:	21 60       	ori	r18, 0x01	; 1
     f2c:	fc 01       	movw	r30, r24
     f2e:	20 83       	st	Z, r18
			SET_BIT(TCCR2, CS21);
     f30:	85 e4       	ldi	r24, 0x45	; 69
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	25 e4       	ldi	r18, 0x45	; 69
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	f9 01       	movw	r30, r18
     f3a:	20 81       	ld	r18, Z
     f3c:	22 60       	ori	r18, 0x02	; 2
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, CS22);
     f42:	85 e4       	ldi	r24, 0x45	; 69
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	25 e4       	ldi	r18, 0x45	; 69
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	f9 01       	movw	r30, r18
     f4c:	20 81       	ld	r18, Z
     f4e:	2b 7f       	andi	r18, 0xFB	; 251
     f50:	fc 01       	movw	r30, r24
     f52:	20 83       	st	Z, r18
			break;
     f54:	70 c0       	rjmp	.+224    	; 0x1036 <__stack+0x7d7>
		case Clock2_Prescaler64:
			CLR_BIT(TCCR2, CS20);
     f56:	85 e4       	ldi	r24, 0x45	; 69
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	25 e4       	ldi	r18, 0x45	; 69
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	2e 7f       	andi	r18, 0xFE	; 254
     f64:	fc 01       	movw	r30, r24
     f66:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, CS21);
     f68:	85 e4       	ldi	r24, 0x45	; 69
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	25 e4       	ldi	r18, 0x45	; 69
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	f9 01       	movw	r30, r18
     f72:	20 81       	ld	r18, Z
     f74:	2d 7f       	andi	r18, 0xFD	; 253
     f76:	fc 01       	movw	r30, r24
     f78:	20 83       	st	Z, r18
			SET_BIT(TCCR2, CS22);
     f7a:	85 e4       	ldi	r24, 0x45	; 69
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	25 e4       	ldi	r18, 0x45	; 69
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	f9 01       	movw	r30, r18
     f84:	20 81       	ld	r18, Z
     f86:	24 60       	ori	r18, 0x04	; 4
     f88:	fc 01       	movw	r30, r24
     f8a:	20 83       	st	Z, r18
			break;
     f8c:	54 c0       	rjmp	.+168    	; 0x1036 <__stack+0x7d7>
		case Clock2_Prescaler128:
			SET_BIT(TCCR2, CS20);
     f8e:	85 e4       	ldi	r24, 0x45	; 69
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	25 e4       	ldi	r18, 0x45	; 69
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	f9 01       	movw	r30, r18
     f98:	20 81       	ld	r18, Z
     f9a:	21 60       	ori	r18, 0x01	; 1
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, CS21);
     fa0:	85 e4       	ldi	r24, 0x45	; 69
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	25 e4       	ldi	r18, 0x45	; 69
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	f9 01       	movw	r30, r18
     faa:	20 81       	ld	r18, Z
     fac:	2d 7f       	andi	r18, 0xFD	; 253
     fae:	fc 01       	movw	r30, r24
     fb0:	20 83       	st	Z, r18
			SET_BIT(TCCR2, CS22);
     fb2:	85 e4       	ldi	r24, 0x45	; 69
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	25 e4       	ldi	r18, 0x45	; 69
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	f9 01       	movw	r30, r18
     fbc:	20 81       	ld	r18, Z
     fbe:	24 60       	ori	r18, 0x04	; 4
     fc0:	fc 01       	movw	r30, r24
     fc2:	20 83       	st	Z, r18
			break;
     fc4:	38 c0       	rjmp	.+112    	; 0x1036 <__stack+0x7d7>
		case Clock2_Prescaler256:
			CLR_BIT(TCCR2, CS20);
     fc6:	85 e4       	ldi	r24, 0x45	; 69
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	25 e4       	ldi	r18, 0x45	; 69
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	f9 01       	movw	r30, r18
     fd0:	20 81       	ld	r18, Z
     fd2:	2e 7f       	andi	r18, 0xFE	; 254
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
			SET_BIT(TCCR2, CS21);
     fd8:	85 e4       	ldi	r24, 0x45	; 69
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	25 e4       	ldi	r18, 0x45	; 69
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	f9 01       	movw	r30, r18
     fe2:	20 81       	ld	r18, Z
     fe4:	22 60       	ori	r18, 0x02	; 2
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
			SET_BIT(TCCR2, CS22);
     fea:	85 e4       	ldi	r24, 0x45	; 69
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	25 e4       	ldi	r18, 0x45	; 69
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	f9 01       	movw	r30, r18
     ff4:	20 81       	ld	r18, Z
     ff6:	24 60       	ori	r18, 0x04	; 4
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 83       	st	Z, r18
			break;
     ffc:	1c c0       	rjmp	.+56     	; 0x1036 <__stack+0x7d7>
		case Clock2_Prescaler1024:
			SET_BIT(TCCR2, CS20);
     ffe:	85 e4       	ldi	r24, 0x45	; 69
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	25 e4       	ldi	r18, 0x45	; 69
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	f9 01       	movw	r30, r18
    1008:	20 81       	ld	r18, Z
    100a:	21 60       	ori	r18, 0x01	; 1
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18
			SET_BIT(TCCR2, CS21);
    1010:	85 e4       	ldi	r24, 0x45	; 69
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	25 e4       	ldi	r18, 0x45	; 69
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	f9 01       	movw	r30, r18
    101a:	20 81       	ld	r18, Z
    101c:	22 60       	ori	r18, 0x02	; 2
    101e:	fc 01       	movw	r30, r24
    1020:	20 83       	st	Z, r18
			SET_BIT(TCCR2, CS22);
    1022:	85 e4       	ldi	r24, 0x45	; 69
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	25 e4       	ldi	r18, 0x45	; 69
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	20 81       	ld	r18, Z
    102e:	24 60       	ori	r18, 0x04	; 4
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
			break;
    1034:	00 00       	nop
		}
		switch (Copy_u8WGM) {
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	f9 f0       	breq	.+62     	; 0x1080 <__stack+0x821>
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	91 05       	cpc	r25, r1
    1046:	1c f4       	brge	.+6      	; 0x104e <__stack+0x7ef>
    1048:	89 2b       	or	r24, r25
    104a:	39 f0       	breq	.+14     	; 0x105a <__stack+0x7fb>
    104c:	52 c0       	rjmp	.+164    	; 0x10f2 <__stack+0x893>
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	91 05       	cpc	r25, r1
    1052:	49 f1       	breq	.+82     	; 0x10a6 <__stack+0x847>
    1054:	03 97       	sbiw	r24, 0x03	; 3
    1056:	d1 f1       	breq	.+116    	; 0x10cc <__stack+0x86d>
    1058:	4c c0       	rjmp	.+152    	; 0x10f2 <__stack+0x893>
		case WGM_Normal:
			CLR_BIT(TCCR2, WGM20);
    105a:	85 e4       	ldi	r24, 0x45	; 69
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	25 e4       	ldi	r18, 0x45	; 69
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	f9 01       	movw	r30, r18
    1064:	20 81       	ld	r18, Z
    1066:	2f 7b       	andi	r18, 0xBF	; 191
    1068:	fc 01       	movw	r30, r24
    106a:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, WGM21);
    106c:	85 e4       	ldi	r24, 0x45	; 69
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	25 e4       	ldi	r18, 0x45	; 69
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	f9 01       	movw	r30, r18
    1076:	20 81       	ld	r18, Z
    1078:	27 7f       	andi	r18, 0xF7	; 247
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
			break;
    107e:	39 c0       	rjmp	.+114    	; 0x10f2 <__stack+0x893>
		case WGM_PhaseCorrect:
			SET_BIT(TCCR2, WGM20);
    1080:	85 e4       	ldi	r24, 0x45	; 69
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	25 e4       	ldi	r18, 0x45	; 69
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	f9 01       	movw	r30, r18
    108a:	20 81       	ld	r18, Z
    108c:	20 64       	ori	r18, 0x40	; 64
    108e:	fc 01       	movw	r30, r24
    1090:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, WGM21);
    1092:	85 e4       	ldi	r24, 0x45	; 69
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	25 e4       	ldi	r18, 0x45	; 69
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	f9 01       	movw	r30, r18
    109c:	20 81       	ld	r18, Z
    109e:	27 7f       	andi	r18, 0xF7	; 247
    10a0:	fc 01       	movw	r30, r24
    10a2:	20 83       	st	Z, r18
			break;
    10a4:	26 c0       	rjmp	.+76     	; 0x10f2 <__stack+0x893>
		case WGM_CTC:
			CLR_BIT(TCCR2, WGM20);
    10a6:	85 e4       	ldi	r24, 0x45	; 69
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	25 e4       	ldi	r18, 0x45	; 69
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	20 81       	ld	r18, Z
    10b2:	2f 7b       	andi	r18, 0xBF	; 191
    10b4:	fc 01       	movw	r30, r24
    10b6:	20 83       	st	Z, r18
			SET_BIT(TCCR2, WGM21);
    10b8:	85 e4       	ldi	r24, 0x45	; 69
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	25 e4       	ldi	r18, 0x45	; 69
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	f9 01       	movw	r30, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	28 60       	ori	r18, 0x08	; 8
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
			break;
    10ca:	13 c0       	rjmp	.+38     	; 0x10f2 <__stack+0x893>
		case WGM_FastPWM:
			SET_BIT(TCCR2, WGM20);
    10cc:	85 e4       	ldi	r24, 0x45	; 69
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	25 e4       	ldi	r18, 0x45	; 69
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	20 64       	ori	r18, 0x40	; 64
    10da:	fc 01       	movw	r30, r24
    10dc:	20 83       	st	Z, r18
			SET_BIT(TCCR2, WGM21);
    10de:	85 e4       	ldi	r24, 0x45	; 69
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	25 e4       	ldi	r18, 0x45	; 69
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	f9 01       	movw	r30, r18
    10e8:	20 81       	ld	r18, Z
    10ea:	28 60       	ori	r18, 0x08	; 8
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
			break;
    10f0:	00 00       	nop
		}
		switch (Copy_u8OutputOnCompareMatch) {
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	01 f1       	breq	.+64     	; 0x113e <__stack+0x8df>
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	91 05       	cpc	r25, r1
    1102:	1c f4       	brge	.+6      	; 0x110a <__stack+0x8ab>
    1104:	89 2b       	or	r24, r25
    1106:	41 f0       	breq	.+16     	; 0x1118 <__stack+0x8b9>
		case OCM_SetOC1ComClrTop:
			SET_BIT(TCCR2, COM20);
			SET_BIT(TCCR2, COM21);
			break;
		}
		break;
    1108:	5a c0       	rjmp	.+180    	; 0x11be <__stack+0x95f>
		case WGM_FastPWM:
			SET_BIT(TCCR2, WGM20);
			SET_BIT(TCCR2, WGM21);
			break;
		}
		switch (Copy_u8OutputOnCompareMatch) {
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	91 05       	cpc	r25, r1
    110e:	81 f1       	breq	.+96     	; 0x1170 <__stack+0x911>
    1110:	03 97       	sbiw	r24, 0x03	; 3
    1112:	09 f4       	brne	.+2      	; 0x1116 <__stack+0x8b7>
    1114:	40 c0       	rjmp	.+128    	; 0x1196 <__stack+0x937>
		case OCM_SetOC1ComClrTop:
			SET_BIT(TCCR2, COM20);
			SET_BIT(TCCR2, COM21);
			break;
		}
		break;
    1116:	53 c0       	rjmp	.+166    	; 0x11be <__stack+0x95f>
			SET_BIT(TCCR2, WGM21);
			break;
		}
		switch (Copy_u8OutputOnCompareMatch) {
		case OCM_DisconnectOC2:
			CLR_BIT(TCCR2, COM20);
    1118:	85 e4       	ldi	r24, 0x45	; 69
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	25 e4       	ldi	r18, 0x45	; 69
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	f9 01       	movw	r30, r18
    1122:	20 81       	ld	r18, Z
    1124:	2f 7e       	andi	r18, 0xEF	; 239
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
			CLR_BIT(TCCR2, COM21);
    112a:	85 e4       	ldi	r24, 0x45	; 69
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	25 e4       	ldi	r18, 0x45	; 69
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	f9 01       	movw	r30, r18
    1134:	20 81       	ld	r18, Z
    1136:	2f 7d       	andi	r18, 0xDF	; 223
    1138:	fc 01       	movw	r30, r24
    113a:	20 83       	st	Z, r18
			break;
    113c:	40 c0       	rjmp	.+128    	; 0x11be <__stack+0x95f>
		case OCM_ToggleOC2:
			if (Copy_u8WGM != WGM_FastPWM && Copy_u8WGM != WGM_PhaseCorrect) {
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	e1 f1       	breq	.+120    	; 0x11bc <__stack+0x95d>
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	c9 f1       	breq	.+114    	; 0x11bc <__stack+0x95d>
				SET_BIT(TCCR2, COM20);CLR_BIT(TCCR2, COM21);
    114a:	85 e4       	ldi	r24, 0x45	; 69
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	25 e4       	ldi	r18, 0x45	; 69
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	f9 01       	movw	r30, r18
    1154:	20 81       	ld	r18, Z
    1156:	20 61       	ori	r18, 0x10	; 16
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
    115c:	85 e4       	ldi	r24, 0x45	; 69
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	25 e4       	ldi	r18, 0x45	; 69
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	f9 01       	movw	r30, r18
    1166:	20 81       	ld	r18, Z
    1168:	2f 7d       	andi	r18, 0xDF	; 223
    116a:	fc 01       	movw	r30, r24
    116c:	20 83       	st	Z, r18
			}
			break;
    116e:	26 c0       	rjmp	.+76     	; 0x11bc <__stack+0x95d>
		case OCM_ClearOC1ComSetTop:
			CLR_BIT(TCCR2, COM20);
    1170:	85 e4       	ldi	r24, 0x45	; 69
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	25 e4       	ldi	r18, 0x45	; 69
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	f9 01       	movw	r30, r18
    117a:	20 81       	ld	r18, Z
    117c:	2f 7e       	andi	r18, 0xEF	; 239
    117e:	fc 01       	movw	r30, r24
    1180:	20 83       	st	Z, r18
			SET_BIT(TCCR2, COM21);
    1182:	85 e4       	ldi	r24, 0x45	; 69
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	25 e4       	ldi	r18, 0x45	; 69
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	f9 01       	movw	r30, r18
    118c:	20 81       	ld	r18, Z
    118e:	20 62       	ori	r18, 0x20	; 32
    1190:	fc 01       	movw	r30, r24
    1192:	20 83       	st	Z, r18
			break;
    1194:	14 c0       	rjmp	.+40     	; 0x11be <__stack+0x95f>
		case OCM_SetOC1ComClrTop:
			SET_BIT(TCCR2, COM20);
    1196:	85 e4       	ldi	r24, 0x45	; 69
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	25 e4       	ldi	r18, 0x45	; 69
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	f9 01       	movw	r30, r18
    11a0:	20 81       	ld	r18, Z
    11a2:	20 61       	ori	r18, 0x10	; 16
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
			SET_BIT(TCCR2, COM21);
    11a8:	85 e4       	ldi	r24, 0x45	; 69
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	25 e4       	ldi	r18, 0x45	; 69
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	f9 01       	movw	r30, r18
    11b2:	20 81       	ld	r18, Z
    11b4:	20 62       	ori	r18, 0x20	; 32
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
			break;
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <__stack+0x95f>
			break;
		case OCM_ToggleOC2:
			if (Copy_u8WGM != WGM_FastPWM && Copy_u8WGM != WGM_PhaseCorrect) {
				SET_BIT(TCCR2, COM20);CLR_BIT(TCCR2, COM21);
			}
			break;
    11bc:	00 00       	nop
		case OCM_SetOC1ComClrTop:
			SET_BIT(TCCR2, COM20);
			SET_BIT(TCCR2, COM21);
			break;
		}
		break;
    11be:	00 00       	nop
	default:
		break;
	}

}
    11c0:	00 00       	nop
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	0f 91       	pop	r16
    11d2:	08 95       	ret

000011d4 <Timer_voidOCMInterrupt>:

void Timer_voidOCMInterrupt(u8 Copy_u8TimerNo, u8 state, u8 Copy_u8Timer1OCIEn) {
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	00 d0       	rcall	.+0      	; 0x11da <Timer_voidOCMInterrupt+0x6>
    11da:	1f 92       	push	r1
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	6a 83       	std	Y+2, r22	; 0x02
    11e4:	4b 83       	std	Y+3, r20	; 0x03

	switch (Copy_u8TimerNo) {
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	21 f1       	breq	.+72     	; 0x123a <Timer_voidOCMInterrupt+0x66>
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <Timer_voidOCMInterrupt+0x26>
    11f8:	5e c0       	rjmp	.+188    	; 0x12b6 <Timer_voidOCMInterrupt+0xe2>
    11fa:	89 2b       	or	r24, r25
    11fc:	09 f0       	breq	.+2      	; 0x1200 <Timer_voidOCMInterrupt+0x2c>
			CLR_BIT(TIMSK, OCIE2);
			break;
		}
		break;
	}
}
    11fe:	78 c0       	rjmp	.+240    	; 0x12f0 <Timer_voidOCMInterrupt+0x11c>

void Timer_voidOCMInterrupt(u8 Copy_u8TimerNo, u8 state, u8 Copy_u8Timer1OCIEn) {

	switch (Copy_u8TimerNo) {
	case Timer0:
		switch (state) {
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	69 f0       	breq	.+26     	; 0x1224 <Timer_voidOCMInterrupt+0x50>
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	09 f0       	breq	.+2      	; 0x1210 <Timer_voidOCMInterrupt+0x3c>
			break;
		case Disable:
			CLR_BIT(TIMSK, OCIE0);
			break;
		}
		break;
    120e:	70 c0       	rjmp	.+224    	; 0x12f0 <Timer_voidOCMInterrupt+0x11c>

	switch (Copy_u8TimerNo) {
	case Timer0:
		switch (state) {
		case Enable:
			SET_BIT(TIMSK, OCIE0);
    1210:	89 e5       	ldi	r24, 0x59	; 89
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	29 e5       	ldi	r18, 0x59	; 89
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	f9 01       	movw	r30, r18
    121a:	20 81       	ld	r18, Z
    121c:	22 60       	ori	r18, 0x02	; 2
    121e:	fc 01       	movw	r30, r24
    1220:	20 83       	st	Z, r18
			break;
    1222:	0a c0       	rjmp	.+20     	; 0x1238 <Timer_voidOCMInterrupt+0x64>
		case Disable:
			CLR_BIT(TIMSK, OCIE0);
    1224:	89 e5       	ldi	r24, 0x59	; 89
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	29 e5       	ldi	r18, 0x59	; 89
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	f9 01       	movw	r30, r18
    122e:	20 81       	ld	r18, Z
    1230:	2d 7f       	andi	r18, 0xFD	; 253
    1232:	fc 01       	movw	r30, r24
    1234:	20 83       	st	Z, r18
			break;
    1236:	00 00       	nop
		}
		break;
    1238:	5b c0       	rjmp	.+182    	; 0x12f0 <Timer_voidOCMInterrupt+0x11c>

	case Timer1:
		switch (Copy_u8Timer1OCIEn) {
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	19 f0       	breq	.+6      	; 0x124c <Timer_voidOCMInterrupt+0x78>
    1246:	04 97       	sbiw	r24, 0x04	; 4
    1248:	d9 f0       	breq	.+54     	; 0x1280 <Timer_voidOCMInterrupt+0xac>
				break;
			}

			break;
		}
		break;
    124a:	52 c0       	rjmp	.+164    	; 0x12f0 <Timer_voidOCMInterrupt+0x11c>
		break;

	case Timer1:
		switch (Copy_u8Timer1OCIEn) {
		case OCIE1A:
			switch (state) {
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	51 f4       	brne	.+20     	; 0x126a <Timer_voidOCMInterrupt+0x96>
			case Enable:
				SET_BIT(TIMSK, OCIE1A);
    1256:	89 e5       	ldi	r24, 0x59	; 89
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	29 e5       	ldi	r18, 0x59	; 89
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	f9 01       	movw	r30, r18
    1260:	20 81       	ld	r18, Z
    1262:	28 60       	ori	r18, 0x08	; 8
    1264:	fc 01       	movw	r30, r24
    1266:	20 83       	st	Z, r18
				break;
    1268:	0a c0       	rjmp	.+20     	; 0x127e <Timer_voidOCMInterrupt+0xaa>
			default:
				CLR_BIT(TIMSK, OCIE1A);
    126a:	89 e5       	ldi	r24, 0x59	; 89
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	29 e5       	ldi	r18, 0x59	; 89
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	f9 01       	movw	r30, r18
    1274:	20 81       	ld	r18, Z
    1276:	27 7f       	andi	r18, 0xF7	; 247
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
				break;
    127c:	00 00       	nop
			}
			break;
    127e:	1a c0       	rjmp	.+52     	; 0x12b4 <Timer_voidOCMInterrupt+0xe0>

		case OCIE1B:
			switch (state) {
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	51 f4       	brne	.+20     	; 0x129e <Timer_voidOCMInterrupt+0xca>
			case Enable:
				SET_BIT(TIMSK, OCIE1B);
    128a:	89 e5       	ldi	r24, 0x59	; 89
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	29 e5       	ldi	r18, 0x59	; 89
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	f9 01       	movw	r30, r18
    1294:	20 81       	ld	r18, Z
    1296:	20 61       	ori	r18, 0x10	; 16
    1298:	fc 01       	movw	r30, r24
    129a:	20 83       	st	Z, r18
				break;
    129c:	0a c0       	rjmp	.+20     	; 0x12b2 <Timer_voidOCMInterrupt+0xde>
			default:
				CLR_BIT(TIMSK, OCIE1B);
    129e:	89 e5       	ldi	r24, 0x59	; 89
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	29 e5       	ldi	r18, 0x59	; 89
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	f9 01       	movw	r30, r18
    12a8:	20 81       	ld	r18, Z
    12aa:	2f 7e       	andi	r18, 0xEF	; 239
    12ac:	fc 01       	movw	r30, r24
    12ae:	20 83       	st	Z, r18
				break;
    12b0:	00 00       	nop
				break;
			}

			break;
    12b2:	00 00       	nop
		}
		break;
    12b4:	1d c0       	rjmp	.+58     	; 0x12f0 <Timer_voidOCMInterrupt+0x11c>

	case Timer2:
		switch (state) {
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	69 f0       	breq	.+26     	; 0x12da <Timer_voidOCMInterrupt+0x106>
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <Timer_voidOCMInterrupt+0xf2>
			break;
		case Disable:
			CLR_BIT(TIMSK, OCIE2);
			break;
		}
		break;
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <Timer_voidOCMInterrupt+0x11a>
		break;

	case Timer2:
		switch (state) {
		case Enable:
			SET_BIT(TIMSK, OCIE2);
    12c6:	89 e5       	ldi	r24, 0x59	; 89
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	29 e5       	ldi	r18, 0x59	; 89
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	f9 01       	movw	r30, r18
    12d0:	20 81       	ld	r18, Z
    12d2:	20 68       	ori	r18, 0x80	; 128
    12d4:	fc 01       	movw	r30, r24
    12d6:	20 83       	st	Z, r18
			break;
    12d8:	0a c0       	rjmp	.+20     	; 0x12ee <Timer_voidOCMInterrupt+0x11a>
		case Disable:
			CLR_BIT(TIMSK, OCIE2);
    12da:	89 e5       	ldi	r24, 0x59	; 89
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	29 e5       	ldi	r18, 0x59	; 89
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	f9 01       	movw	r30, r18
    12e4:	20 81       	ld	r18, Z
    12e6:	2f 77       	andi	r18, 0x7F	; 127
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18
			break;
    12ec:	00 00       	nop
		}
		break;
    12ee:	00 00       	nop
	}
}
    12f0:	00 00       	nop
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <Timer_voidOverflowInterrupt>:

void Timer_voidOverflowInterrupt(u8 Copy_u8TimerNo, u8 state) {
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	00 d0       	rcall	.+0      	; 0x1304 <Timer_voidOverflowInterrupt+0x6>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8TimerNo) {
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	91 05       	cpc	r25, r1
    1316:	19 f1       	breq	.+70     	; 0x135e <Timer_voidOverflowInterrupt+0x60>
    1318:	82 30       	cpi	r24, 0x02	; 2
    131a:	91 05       	cpc	r25, r1
    131c:	d1 f1       	breq	.+116    	; 0x1392 <Timer_voidOverflowInterrupt+0x94>
    131e:	89 2b       	or	r24, r25
    1320:	09 f0       	breq	.+2      	; 0x1324 <Timer_voidOverflowInterrupt+0x26>
			break;
		}
		break;
	}

}
    1322:	54 c0       	rjmp	.+168    	; 0x13cc <Timer_voidOverflowInterrupt+0xce>

void Timer_voidOverflowInterrupt(u8 Copy_u8TimerNo, u8 state) {

	switch (Copy_u8TimerNo) {
	case Timer0:
		switch (state) {
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f0       	breq	.+26     	; 0x1348 <Timer_voidOverflowInterrupt+0x4a>
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	09 f0       	breq	.+2      	; 0x1334 <Timer_voidOverflowInterrupt+0x36>
			break;
		case Disable:
			CLR_BIT(TIMSK, TOIE0);
			break;
		}
		break;
    1332:	4c c0       	rjmp	.+152    	; 0x13cc <Timer_voidOverflowInterrupt+0xce>

	switch (Copy_u8TimerNo) {
	case Timer0:
		switch (state) {
		case Enable:
			SET_BIT(TIMSK, TOIE0);
    1334:	89 e5       	ldi	r24, 0x59	; 89
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	29 e5       	ldi	r18, 0x59	; 89
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	f9 01       	movw	r30, r18
    133e:	20 81       	ld	r18, Z
    1340:	21 60       	ori	r18, 0x01	; 1
    1342:	fc 01       	movw	r30, r24
    1344:	20 83       	st	Z, r18
			break;
    1346:	0a c0       	rjmp	.+20     	; 0x135c <Timer_voidOverflowInterrupt+0x5e>
		case Disable:
			CLR_BIT(TIMSK, TOIE0);
    1348:	89 e5       	ldi	r24, 0x59	; 89
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	29 e5       	ldi	r18, 0x59	; 89
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	f9 01       	movw	r30, r18
    1352:	20 81       	ld	r18, Z
    1354:	2e 7f       	andi	r18, 0xFE	; 254
    1356:	fc 01       	movw	r30, r24
    1358:	20 83       	st	Z, r18
			break;
    135a:	00 00       	nop
		}
		break;
    135c:	37 c0       	rjmp	.+110    	; 0x13cc <Timer_voidOverflowInterrupt+0xce>

	case Timer1:
		switch (state) {
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	51 f4       	brne	.+20     	; 0x137c <Timer_voidOverflowInterrupt+0x7e>
		case Enable:
			SET_BIT(TIMSK, TOIE1);
    1368:	89 e5       	ldi	r24, 0x59	; 89
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	29 e5       	ldi	r18, 0x59	; 89
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	f9 01       	movw	r30, r18
    1372:	20 81       	ld	r18, Z
    1374:	24 60       	ori	r18, 0x04	; 4
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
			break;
    137a:	0a c0       	rjmp	.+20     	; 0x1390 <Timer_voidOverflowInterrupt+0x92>
		default:
			CLR_BIT(TIMSK, TOIE1);
    137c:	89 e5       	ldi	r24, 0x59	; 89
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	29 e5       	ldi	r18, 0x59	; 89
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	20 81       	ld	r18, Z
    1388:	2b 7f       	andi	r18, 0xFB	; 251
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
			break;
    138e:	00 00       	nop
		}
		break;
    1390:	1d c0       	rjmp	.+58     	; 0x13cc <Timer_voidOverflowInterrupt+0xce>

	case Timer2:
		switch (state) {
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	69 f0       	breq	.+26     	; 0x13b6 <Timer_voidOverflowInterrupt+0xb8>
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	09 f0       	breq	.+2      	; 0x13a2 <Timer_voidOverflowInterrupt+0xa4>
			break;
		case Disable:
			CLR_BIT(TIMSK, TOIE2);
			break;
		}
		break;
    13a0:	14 c0       	rjmp	.+40     	; 0x13ca <Timer_voidOverflowInterrupt+0xcc>
		break;

	case Timer2:
		switch (state) {
		case Enable:
			SET_BIT(TIMSK, TOIE2);
    13a2:	89 e5       	ldi	r24, 0x59	; 89
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	29 e5       	ldi	r18, 0x59	; 89
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	f9 01       	movw	r30, r18
    13ac:	20 81       	ld	r18, Z
    13ae:	20 64       	ori	r18, 0x40	; 64
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18
			break;
    13b4:	0a c0       	rjmp	.+20     	; 0x13ca <Timer_voidOverflowInterrupt+0xcc>
		case Disable:
			CLR_BIT(TIMSK, TOIE2);
    13b6:	89 e5       	ldi	r24, 0x59	; 89
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	29 e5       	ldi	r18, 0x59	; 89
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	f9 01       	movw	r30, r18
    13c0:	20 81       	ld	r18, Z
    13c2:	2f 7b       	andi	r18, 0xBF	; 191
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
			break;
    13c8:	00 00       	nop
		}
		break;
    13ca:	00 00       	nop
	}

}
    13cc:	00 00       	nop
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <Timer_voidPreloadValue>:

void Timer_voidPreloadValue(u8 Copy_u8TimerNo, u16 Copy_u16Value,
		u8 Copy_u8Timer1OCR1x) {
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	00 d0       	rcall	.+0      	; 0x13de <Timer_voidPreloadValue+0x6>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <Timer_voidPreloadValue+0x8>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	7b 83       	std	Y+3, r23	; 0x03
    13e8:	6a 83       	std	Y+2, r22	; 0x02
    13ea:	4c 83       	std	Y+4, r20	; 0x04
	switch (Copy_u8TimerNo) {
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	61 f0       	breq	.+24     	; 0x1410 <Timer_voidPreloadValue+0x38>
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	91 05       	cpc	r25, r1
    13fc:	71 f1       	breq	.+92     	; 0x145a <Timer_voidPreloadValue+0x82>
    13fe:	89 2b       	or	r24, r25
    1400:	09 f0       	breq	.+2      	; 0x1404 <Timer_voidPreloadValue+0x2c>

	case Timer2:
		ASSIGN_REG(OCR2, (u8 )Copy_u16Value);
		break;
	}
}
    1402:	31 c0       	rjmp	.+98     	; 0x1466 <Timer_voidPreloadValue+0x8e>

void Timer_voidPreloadValue(u8 Copy_u8TimerNo, u16 Copy_u16Value,
		u8 Copy_u8Timer1OCR1x) {
	switch (Copy_u8TimerNo) {
	case Timer0:
		ASSIGN_REG(OCR0, (u8 )Copy_u16Value);
    1404:	8c e5       	ldi	r24, 0x5C	; 92
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	2a 81       	ldd	r18, Y+2	; 0x02
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
		break;
    140e:	2b c0       	rjmp	.+86     	; 0x1466 <Timer_voidPreloadValue+0x8e>
	case Timer1:
		switch (Copy_u8Timer1OCR1x) {
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	91 05       	cpc	r25, r1
    141a:	71 f0       	breq	.+28     	; 0x1438 <Timer_voidPreloadValue+0x60>
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	91 05       	cpc	r25, r1
    1420:	99 f0       	breq	.+38     	; 0x1448 <Timer_voidPreloadValue+0x70>
    1422:	89 2b       	or	r24, r25
    1424:	09 f0       	breq	.+2      	; 0x1428 <Timer_voidPreloadValue+0x50>
			break;
		case ICR:
			ICR1 = Copy_u16Value;
			break;
		}
		break;
    1426:	1f c0       	rjmp	.+62     	; 0x1466 <Timer_voidPreloadValue+0x8e>
		ASSIGN_REG(OCR0, (u8 )Copy_u16Value);
		break;
	case Timer1:
		switch (Copy_u8Timer1OCR1x) {
		case OCR11:
			OCR1A = Copy_u16Value;
    1428:	8a e4       	ldi	r24, 0x4A	; 74
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	2a 81       	ldd	r18, Y+2	; 0x02
    142e:	3b 81       	ldd	r19, Y+3	; 0x03
    1430:	fc 01       	movw	r30, r24
    1432:	31 83       	std	Z+1, r19	; 0x01
    1434:	20 83       	st	Z, r18
			break;
    1436:	10 c0       	rjmp	.+32     	; 0x1458 <Timer_voidPreloadValue+0x80>
		case OCR12:
			OCR1B = Copy_u16Value;
    1438:	88 e4       	ldi	r24, 0x48	; 72
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	2a 81       	ldd	r18, Y+2	; 0x02
    143e:	3b 81       	ldd	r19, Y+3	; 0x03
    1440:	fc 01       	movw	r30, r24
    1442:	31 83       	std	Z+1, r19	; 0x01
    1444:	20 83       	st	Z, r18
			break;
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <Timer_voidPreloadValue+0x80>
		case ICR:
			ICR1 = Copy_u16Value;
    1448:	86 e4       	ldi	r24, 0x46	; 70
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	2a 81       	ldd	r18, Y+2	; 0x02
    144e:	3b 81       	ldd	r19, Y+3	; 0x03
    1450:	fc 01       	movw	r30, r24
    1452:	31 83       	std	Z+1, r19	; 0x01
    1454:	20 83       	st	Z, r18
			break;
    1456:	00 00       	nop
		}
		break;
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <Timer_voidPreloadValue+0x8e>

	case Timer2:
		ASSIGN_REG(OCR2, (u8 )Copy_u16Value);
    145a:	83 e4       	ldi	r24, 0x43	; 67
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	2a 81       	ldd	r18, Y+2	; 0x02
    1460:	fc 01       	movw	r30, r24
    1462:	20 83       	st	Z, r18
		break;
    1464:	00 00       	nop
	}
}
    1466:	00 00       	nop
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <SPI_enuMasterInit>:
#include "../../../SERVICES/STD_TYPES.h"
#include "../../../INCLUDE/MCAL/DIO/Dio.h"
#include "avr/delay.h"

SPI_tenuErrorStatus SPI_enuMasterInit(u8 Copy_u8DataMode, u8 Copy_u8ClockSelect,
		u8 Copy_u8DataOrder) {
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	00 d0       	rcall	.+0      	; 0x147c <SPI_enuMasterInit+0x6>
    147c:	00 d0       	rcall	.+0      	; 0x147e <SPI_enuMasterInit+0x8>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	8a 83       	std	Y+2, r24	; 0x02
    1484:	6b 83       	std	Y+3, r22	; 0x03
    1486:	4c 83       	std	Y+4, r20	; 0x04
	SPI_tenuErrorStatus LOC_enuErrorStatus = spi_enuOk;
    1488:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8DataMode) {
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 05       	cpc	r25, r1
    1494:	f9 f0       	breq	.+62     	; 0x14d4 <SPI_enuMasterInit+0x5e>
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	91 05       	cpc	r25, r1
    149a:	1c f4       	brge	.+6      	; 0x14a2 <SPI_enuMasterInit+0x2c>
    149c:	89 2b       	or	r24, r25
    149e:	39 f0       	breq	.+14     	; 0x14ae <SPI_enuMasterInit+0x38>
    14a0:	52 c0       	rjmp	.+164    	; 0x1546 <SPI_enuMasterInit+0xd0>
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	91 05       	cpc	r25, r1
    14a6:	49 f1       	breq	.+82     	; 0x14fa <SPI_enuMasterInit+0x84>
    14a8:	03 97       	sbiw	r24, 0x03	; 3
    14aa:	d1 f1       	breq	.+116    	; 0x1520 <SPI_enuMasterInit+0xaa>
    14ac:	4c c0       	rjmp	.+152    	; 0x1546 <SPI_enuMasterInit+0xd0>
	case 0:
		CLR_BIT(SPCR, SPCR_CPOL);
    14ae:	8d e2       	ldi	r24, 0x2D	; 45
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	2d e2       	ldi	r18, 0x2D	; 45
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	f9 01       	movw	r30, r18
    14b8:	20 81       	ld	r18, Z
    14ba:	27 7f       	andi	r18, 0xF7	; 247
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_CPHA);
    14c0:	8d e2       	ldi	r24, 0x2D	; 45
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	2d e2       	ldi	r18, 0x2D	; 45
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	f9 01       	movw	r30, r18
    14ca:	20 81       	ld	r18, Z
    14cc:	2b 7f       	andi	r18, 0xFB	; 251
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18
		break;
    14d2:	3d c0       	rjmp	.+122    	; 0x154e <SPI_enuMasterInit+0xd8>
	case 1:
		CLR_BIT(SPCR, SPCR_CPOL);
    14d4:	8d e2       	ldi	r24, 0x2D	; 45
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	2d e2       	ldi	r18, 0x2D	; 45
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	f9 01       	movw	r30, r18
    14de:	20 81       	ld	r18, Z
    14e0:	27 7f       	andi	r18, 0xF7	; 247
    14e2:	fc 01       	movw	r30, r24
    14e4:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_CPHA);
    14e6:	8d e2       	ldi	r24, 0x2D	; 45
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	2d e2       	ldi	r18, 0x2D	; 45
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	f9 01       	movw	r30, r18
    14f0:	20 81       	ld	r18, Z
    14f2:	24 60       	ori	r18, 0x04	; 4
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
		break;
    14f8:	2a c0       	rjmp	.+84     	; 0x154e <SPI_enuMasterInit+0xd8>
	case 2:
		SET_BIT(SPCR, SPCR_CPOL);
    14fa:	8d e2       	ldi	r24, 0x2D	; 45
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	2d e2       	ldi	r18, 0x2D	; 45
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	f9 01       	movw	r30, r18
    1504:	20 81       	ld	r18, Z
    1506:	28 60       	ori	r18, 0x08	; 8
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_CPHA);
    150c:	8d e2       	ldi	r24, 0x2D	; 45
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	2d e2       	ldi	r18, 0x2D	; 45
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	f9 01       	movw	r30, r18
    1516:	20 81       	ld	r18, Z
    1518:	2b 7f       	andi	r18, 0xFB	; 251
    151a:	fc 01       	movw	r30, r24
    151c:	20 83       	st	Z, r18
		break;
    151e:	17 c0       	rjmp	.+46     	; 0x154e <SPI_enuMasterInit+0xd8>
	case 3:
		SET_BIT(SPCR, SPCR_CPOL);
    1520:	8d e2       	ldi	r24, 0x2D	; 45
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	2d e2       	ldi	r18, 0x2D	; 45
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	f9 01       	movw	r30, r18
    152a:	20 81       	ld	r18, Z
    152c:	28 60       	ori	r18, 0x08	; 8
    152e:	fc 01       	movw	r30, r24
    1530:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_CPHA);
    1532:	8d e2       	ldi	r24, 0x2D	; 45
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	2d e2       	ldi	r18, 0x2D	; 45
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	f9 01       	movw	r30, r18
    153c:	20 81       	ld	r18, Z
    153e:	24 60       	ori	r18, 0x04	; 4
    1540:	fc 01       	movw	r30, r24
    1542:	20 83       	st	Z, r18
		break;
    1544:	04 c0       	rjmp	.+8      	; 0x154e <SPI_enuMasterInit+0xd8>
	default:
		LOC_enuErrorStatus = spi_invalidInput;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	89 83       	std	Y+1, r24	; 0x01
		return LOC_enuErrorStatus;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	44 c1       	rjmp	.+648    	; 0x17d6 <SPI_enuMasterInit+0x360>
	}

	switch (Copy_u8ClockSelect) {
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	09 2e       	mov	r0, r25
    1556:	00 0c       	add	r0, r0
    1558:	aa 0b       	sbc	r26, r26
    155a:	bb 0b       	sbc	r27, r27
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	27 e0       	ldi	r18, 0x07	; 7
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	84 1b       	sub	r24, r20
    1566:	95 0b       	sbc	r25, r21
    1568:	28 17       	cp	r18, r24
    156a:	39 07       	cpc	r19, r25
    156c:	08 f4       	brcc	.+2      	; 0x1570 <SPI_enuMasterInit+0xfa>
    156e:	e5 c0       	rjmp	.+458    	; 0x173a <SPI_enuMasterInit+0x2c4>
    1570:	8e 5a       	subi	r24, 0xAE	; 174
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	fc 01       	movw	r30, r24
    1576:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__tablejump2__>
	case SPI_Prescaler4:
		CLR_BIT(SPSR, SPSR_SPI2X);
    157a:	8e e2       	ldi	r24, 0x2E	; 46
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	2e e2       	ldi	r18, 0x2E	; 46
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	f9 01       	movw	r30, r18
    1584:	20 81       	ld	r18, Z
    1586:	2e 7f       	andi	r18, 0xFE	; 254
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_SPR1);
    158c:	8d e2       	ldi	r24, 0x2D	; 45
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	2d e2       	ldi	r18, 0x2D	; 45
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	f9 01       	movw	r30, r18
    1596:	20 81       	ld	r18, Z
    1598:	2d 7f       	andi	r18, 0xFD	; 253
    159a:	fc 01       	movw	r30, r24
    159c:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_SPR1);
    159e:	8d e2       	ldi	r24, 0x2D	; 45
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	2d e2       	ldi	r18, 0x2D	; 45
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	f9 01       	movw	r30, r18
    15a8:	20 81       	ld	r18, Z
    15aa:	2d 7f       	andi	r18, 0xFD	; 253
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18
		break;
    15b0:	c8 c0       	rjmp	.+400    	; 0x1742 <SPI_enuMasterInit+0x2cc>
	case SPI_Prescaler16:
		CLR_BIT(SPSR, SPSR_SPI2X);
    15b2:	8e e2       	ldi	r24, 0x2E	; 46
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	2e e2       	ldi	r18, 0x2E	; 46
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	f9 01       	movw	r30, r18
    15bc:	20 81       	ld	r18, Z
    15be:	2e 7f       	andi	r18, 0xFE	; 254
    15c0:	fc 01       	movw	r30, r24
    15c2:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_SPR1);
    15c4:	8d e2       	ldi	r24, 0x2D	; 45
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	2d e2       	ldi	r18, 0x2D	; 45
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	f9 01       	movw	r30, r18
    15ce:	20 81       	ld	r18, Z
    15d0:	2d 7f       	andi	r18, 0xFD	; 253
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_SPR1);
    15d6:	8d e2       	ldi	r24, 0x2D	; 45
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	2d e2       	ldi	r18, 0x2D	; 45
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	f9 01       	movw	r30, r18
    15e0:	20 81       	ld	r18, Z
    15e2:	22 60       	ori	r18, 0x02	; 2
    15e4:	fc 01       	movw	r30, r24
    15e6:	20 83       	st	Z, r18
		break;
    15e8:	ac c0       	rjmp	.+344    	; 0x1742 <SPI_enuMasterInit+0x2cc>
	case SPI_Prescaler64:
		CLR_BIT(SPSR, SPSR_SPI2X);
    15ea:	8e e2       	ldi	r24, 0x2E	; 46
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	2e e2       	ldi	r18, 0x2E	; 46
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	f9 01       	movw	r30, r18
    15f4:	20 81       	ld	r18, Z
    15f6:	2e 7f       	andi	r18, 0xFE	; 254
    15f8:	fc 01       	movw	r30, r24
    15fa:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_SPR1);
    15fc:	8d e2       	ldi	r24, 0x2D	; 45
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	2d e2       	ldi	r18, 0x2D	; 45
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	f9 01       	movw	r30, r18
    1606:	20 81       	ld	r18, Z
    1608:	22 60       	ori	r18, 0x02	; 2
    160a:	fc 01       	movw	r30, r24
    160c:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_SPR1);
    160e:	8d e2       	ldi	r24, 0x2D	; 45
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	2d e2       	ldi	r18, 0x2D	; 45
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	f9 01       	movw	r30, r18
    1618:	20 81       	ld	r18, Z
    161a:	2d 7f       	andi	r18, 0xFD	; 253
    161c:	fc 01       	movw	r30, r24
    161e:	20 83       	st	Z, r18
		break;
    1620:	90 c0       	rjmp	.+288    	; 0x1742 <SPI_enuMasterInit+0x2cc>
	case SPI_Prescaler128:
		CLR_BIT(SPSR, SPSR_SPI2X);
    1622:	8e e2       	ldi	r24, 0x2E	; 46
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	2e e2       	ldi	r18, 0x2E	; 46
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	f9 01       	movw	r30, r18
    162c:	20 81       	ld	r18, Z
    162e:	2e 7f       	andi	r18, 0xFE	; 254
    1630:	fc 01       	movw	r30, r24
    1632:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_SPR1);
    1634:	8d e2       	ldi	r24, 0x2D	; 45
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	2d e2       	ldi	r18, 0x2D	; 45
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	f9 01       	movw	r30, r18
    163e:	20 81       	ld	r18, Z
    1640:	22 60       	ori	r18, 0x02	; 2
    1642:	fc 01       	movw	r30, r24
    1644:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_SPR1);
    1646:	8d e2       	ldi	r24, 0x2D	; 45
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	2d e2       	ldi	r18, 0x2D	; 45
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	f9 01       	movw	r30, r18
    1650:	20 81       	ld	r18, Z
    1652:	22 60       	ori	r18, 0x02	; 2
    1654:	fc 01       	movw	r30, r24
    1656:	20 83       	st	Z, r18
		break;
    1658:	74 c0       	rjmp	.+232    	; 0x1742 <SPI_enuMasterInit+0x2cc>
	case SPI_2xPrescaler2:
		SET_BIT(SPSR, SPSR_SPI2X);
    165a:	8e e2       	ldi	r24, 0x2E	; 46
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	2e e2       	ldi	r18, 0x2E	; 46
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	f9 01       	movw	r30, r18
    1664:	20 81       	ld	r18, Z
    1666:	21 60       	ori	r18, 0x01	; 1
    1668:	fc 01       	movw	r30, r24
    166a:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_SPR1);
    166c:	8d e2       	ldi	r24, 0x2D	; 45
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	2d e2       	ldi	r18, 0x2D	; 45
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	f9 01       	movw	r30, r18
    1676:	20 81       	ld	r18, Z
    1678:	2d 7f       	andi	r18, 0xFD	; 253
    167a:	fc 01       	movw	r30, r24
    167c:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_SPR1);
    167e:	8d e2       	ldi	r24, 0x2D	; 45
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	2d e2       	ldi	r18, 0x2D	; 45
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	f9 01       	movw	r30, r18
    1688:	20 81       	ld	r18, Z
    168a:	2d 7f       	andi	r18, 0xFD	; 253
    168c:	fc 01       	movw	r30, r24
    168e:	20 83       	st	Z, r18
		break;
    1690:	58 c0       	rjmp	.+176    	; 0x1742 <SPI_enuMasterInit+0x2cc>
	case SPI_2xPrescaler8:
		SET_BIT(SPSR, SPSR_SPI2X);
    1692:	8e e2       	ldi	r24, 0x2E	; 46
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	2e e2       	ldi	r18, 0x2E	; 46
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	f9 01       	movw	r30, r18
    169c:	20 81       	ld	r18, Z
    169e:	21 60       	ori	r18, 0x01	; 1
    16a0:	fc 01       	movw	r30, r24
    16a2:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_SPR1);
    16a4:	8d e2       	ldi	r24, 0x2D	; 45
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	2d e2       	ldi	r18, 0x2D	; 45
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	f9 01       	movw	r30, r18
    16ae:	20 81       	ld	r18, Z
    16b0:	2d 7f       	andi	r18, 0xFD	; 253
    16b2:	fc 01       	movw	r30, r24
    16b4:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_SPR1);
    16b6:	8d e2       	ldi	r24, 0x2D	; 45
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	2d e2       	ldi	r18, 0x2D	; 45
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	f9 01       	movw	r30, r18
    16c0:	20 81       	ld	r18, Z
    16c2:	22 60       	ori	r18, 0x02	; 2
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
		break;
    16c8:	3c c0       	rjmp	.+120    	; 0x1742 <SPI_enuMasterInit+0x2cc>
	case SPI_2xPrescaler32:
		SET_BIT(SPSR, SPSR_SPI2X);
    16ca:	8e e2       	ldi	r24, 0x2E	; 46
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	2e e2       	ldi	r18, 0x2E	; 46
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	f9 01       	movw	r30, r18
    16d4:	20 81       	ld	r18, Z
    16d6:	21 60       	ori	r18, 0x01	; 1
    16d8:	fc 01       	movw	r30, r24
    16da:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_SPR1);
    16dc:	8d e2       	ldi	r24, 0x2D	; 45
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	2d e2       	ldi	r18, 0x2D	; 45
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	f9 01       	movw	r30, r18
    16e6:	20 81       	ld	r18, Z
    16e8:	22 60       	ori	r18, 0x02	; 2
    16ea:	fc 01       	movw	r30, r24
    16ec:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_SPR1);
    16ee:	8d e2       	ldi	r24, 0x2D	; 45
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	2d e2       	ldi	r18, 0x2D	; 45
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	f9 01       	movw	r30, r18
    16f8:	20 81       	ld	r18, Z
    16fa:	2d 7f       	andi	r18, 0xFD	; 253
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18
		break;
    1700:	20 c0       	rjmp	.+64     	; 0x1742 <SPI_enuMasterInit+0x2cc>
	case SPI_2xPrescaler64:
		SET_BIT(SPSR, SPSR_SPI2X);
    1702:	8e e2       	ldi	r24, 0x2E	; 46
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	2e e2       	ldi	r18, 0x2E	; 46
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	f9 01       	movw	r30, r18
    170c:	20 81       	ld	r18, Z
    170e:	21 60       	ori	r18, 0x01	; 1
    1710:	fc 01       	movw	r30, r24
    1712:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_SPR1);
    1714:	8d e2       	ldi	r24, 0x2D	; 45
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	2d e2       	ldi	r18, 0x2D	; 45
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	f9 01       	movw	r30, r18
    171e:	20 81       	ld	r18, Z
    1720:	22 60       	ori	r18, 0x02	; 2
    1722:	fc 01       	movw	r30, r24
    1724:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_SPR1);
    1726:	8d e2       	ldi	r24, 0x2D	; 45
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	2d e2       	ldi	r18, 0x2D	; 45
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	f9 01       	movw	r30, r18
    1730:	20 81       	ld	r18, Z
    1732:	22 60       	ori	r18, 0x02	; 2
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
		break;
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <SPI_enuMasterInit+0x2cc>
	default:
		LOC_enuErrorStatus = spi_invalidInput;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
		return LOC_enuErrorStatus;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	4a c0       	rjmp	.+148    	; 0x17d6 <SPI_enuMasterInit+0x360>
	}

	switch (Copy_u8DataOrder) {
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	19 f0       	breq	.+6      	; 0x1752 <SPI_enuMasterInit+0x2dc>
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	59 f0       	breq	.+22     	; 0x1766 <SPI_enuMasterInit+0x2f0>
    1750:	14 c0       	rjmp	.+40     	; 0x177a <SPI_enuMasterInit+0x304>
	case SPI_TransmitMSB:
		CLR_BIT(SPCR, SPCR_DORD);
    1752:	8d e2       	ldi	r24, 0x2D	; 45
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	2d e2       	ldi	r18, 0x2D	; 45
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	f9 01       	movw	r30, r18
    175c:	20 81       	ld	r18, Z
    175e:	2f 7d       	andi	r18, 0xDF	; 223
    1760:	fc 01       	movw	r30, r24
    1762:	20 83       	st	Z, r18
		break;
    1764:	0e c0       	rjmp	.+28     	; 0x1782 <SPI_enuMasterInit+0x30c>
	case SPI_TransmitLSB:
		SET_BIT(SPCR, SPCR_DORD);
    1766:	8d e2       	ldi	r24, 0x2D	; 45
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	2d e2       	ldi	r18, 0x2D	; 45
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	f9 01       	movw	r30, r18
    1770:	20 81       	ld	r18, Z
    1772:	20 62       	ori	r18, 0x20	; 32
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
		break;
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <SPI_enuMasterInit+0x30c>
	default:
		LOC_enuErrorStatus = spi_invalidInput;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01
		return LOC_enuErrorStatus;
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	2a c0       	rjmp	.+84     	; 0x17d6 <SPI_enuMasterInit+0x360>
	}

	SET_BIT(SPCR, SPCR_MSTR);
    1782:	8d e2       	ldi	r24, 0x2D	; 45
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	2d e2       	ldi	r18, 0x2D	; 45
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	20 61       	ori	r18, 0x10	; 16
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18
	DIO_enuSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN5, DIO_u8_OUTPUT);
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	65 e0       	ldi	r22, 0x05	; 5
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN7, DIO_u8_OUTPUT);
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	67 e0       	ldi	r22, 0x07	; 7
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_OUTPUT);
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	64 e0       	ldi	r22, 0x04	; 4
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_HIGH);
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	64 e0       	ldi	r22, 0x04	; 4
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
	SET_BIT(SPCR, SPCR_SPE);
    17c2:	8d e2       	ldi	r24, 0x2D	; 45
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	2d e2       	ldi	r18, 0x2D	; 45
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	f9 01       	movw	r30, r18
    17cc:	20 81       	ld	r18, Z
    17ce:	20 64       	ori	r18, 0x40	; 64
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 83       	st	Z, r18

	return LOC_enuErrorStatus;
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <SPI_enuSlaveInit>:

SPI_tenuErrorStatus SPI_enuSlaveInit(u8 Copy_u8DataMode, u8 Copy_u8DataOrder) {
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <SPI_enuSlaveInit+0x6>
    17ea:	1f 92       	push	r1
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	8a 83       	std	Y+2, r24	; 0x02
    17f2:	6b 83       	std	Y+3, r22	; 0x03

	SPI_tenuErrorStatus LOC_enuErrorStatus = spi_enuOk;
    17f4:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8DataMode) {
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 05       	cpc	r25, r1
    1800:	f9 f0       	breq	.+62     	; 0x1840 <SPI_enuSlaveInit+0x5c>
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	91 05       	cpc	r25, r1
    1806:	1c f4       	brge	.+6      	; 0x180e <SPI_enuSlaveInit+0x2a>
    1808:	89 2b       	or	r24, r25
    180a:	39 f0       	breq	.+14     	; 0x181a <SPI_enuSlaveInit+0x36>
    180c:	52 c0       	rjmp	.+164    	; 0x18b2 <SPI_enuSlaveInit+0xce>
    180e:	82 30       	cpi	r24, 0x02	; 2
    1810:	91 05       	cpc	r25, r1
    1812:	49 f1       	breq	.+82     	; 0x1866 <SPI_enuSlaveInit+0x82>
    1814:	03 97       	sbiw	r24, 0x03	; 3
    1816:	d1 f1       	breq	.+116    	; 0x188c <SPI_enuSlaveInit+0xa8>
    1818:	4c c0       	rjmp	.+152    	; 0x18b2 <SPI_enuSlaveInit+0xce>
	case 0:
		CLR_BIT(SPCR, SPCR_CPOL);
    181a:	8d e2       	ldi	r24, 0x2D	; 45
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	2d e2       	ldi	r18, 0x2D	; 45
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	f9 01       	movw	r30, r18
    1824:	20 81       	ld	r18, Z
    1826:	27 7f       	andi	r18, 0xF7	; 247
    1828:	fc 01       	movw	r30, r24
    182a:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_CPHA);
    182c:	8d e2       	ldi	r24, 0x2D	; 45
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	2d e2       	ldi	r18, 0x2D	; 45
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	f9 01       	movw	r30, r18
    1836:	20 81       	ld	r18, Z
    1838:	2b 7f       	andi	r18, 0xFB	; 251
    183a:	fc 01       	movw	r30, r24
    183c:	20 83       	st	Z, r18
		break;
    183e:	3d c0       	rjmp	.+122    	; 0x18ba <SPI_enuSlaveInit+0xd6>
	case 1:
		CLR_BIT(SPCR, SPCR_CPOL);
    1840:	8d e2       	ldi	r24, 0x2D	; 45
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	2d e2       	ldi	r18, 0x2D	; 45
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	f9 01       	movw	r30, r18
    184a:	20 81       	ld	r18, Z
    184c:	27 7f       	andi	r18, 0xF7	; 247
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_CPHA);
    1852:	8d e2       	ldi	r24, 0x2D	; 45
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	2d e2       	ldi	r18, 0x2D	; 45
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	f9 01       	movw	r30, r18
    185c:	20 81       	ld	r18, Z
    185e:	24 60       	ori	r18, 0x04	; 4
    1860:	fc 01       	movw	r30, r24
    1862:	20 83       	st	Z, r18
		break;
    1864:	2a c0       	rjmp	.+84     	; 0x18ba <SPI_enuSlaveInit+0xd6>
	case 2:
		SET_BIT(SPCR, SPCR_CPOL);
    1866:	8d e2       	ldi	r24, 0x2D	; 45
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	2d e2       	ldi	r18, 0x2D	; 45
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	f9 01       	movw	r30, r18
    1870:	20 81       	ld	r18, Z
    1872:	28 60       	ori	r18, 0x08	; 8
    1874:	fc 01       	movw	r30, r24
    1876:	20 83       	st	Z, r18
		CLR_BIT(SPCR, SPCR_CPHA);
    1878:	8d e2       	ldi	r24, 0x2D	; 45
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	2d e2       	ldi	r18, 0x2D	; 45
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	f9 01       	movw	r30, r18
    1882:	20 81       	ld	r18, Z
    1884:	2b 7f       	andi	r18, 0xFB	; 251
    1886:	fc 01       	movw	r30, r24
    1888:	20 83       	st	Z, r18
		break;
    188a:	17 c0       	rjmp	.+46     	; 0x18ba <SPI_enuSlaveInit+0xd6>
	case 3:
		SET_BIT(SPCR, SPCR_CPOL);
    188c:	8d e2       	ldi	r24, 0x2D	; 45
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	2d e2       	ldi	r18, 0x2D	; 45
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	f9 01       	movw	r30, r18
    1896:	20 81       	ld	r18, Z
    1898:	28 60       	ori	r18, 0x08	; 8
    189a:	fc 01       	movw	r30, r24
    189c:	20 83       	st	Z, r18
		SET_BIT(SPCR, SPCR_CPHA);
    189e:	8d e2       	ldi	r24, 0x2D	; 45
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	2d e2       	ldi	r18, 0x2D	; 45
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	f9 01       	movw	r30, r18
    18a8:	20 81       	ld	r18, Z
    18aa:	24 60       	ori	r18, 0x04	; 4
    18ac:	fc 01       	movw	r30, r24
    18ae:	20 83       	st	Z, r18
		break;
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <SPI_enuSlaveInit+0xd6>
	default:
		LOC_enuErrorStatus = spi_invalidInput;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	89 83       	std	Y+1, r24	; 0x01
		return LOC_enuErrorStatus;
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	38 c0       	rjmp	.+112    	; 0x192a <SPI_enuSlaveInit+0x146>
	}

	switch (Copy_u8DataOrder) {
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	19 f0       	breq	.+6      	; 0x18ca <SPI_enuSlaveInit+0xe6>
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	59 f0       	breq	.+22     	; 0x18de <SPI_enuSlaveInit+0xfa>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <SPI_enuSlaveInit+0x10e>
	case SPI_TransmitMSB:
		CLR_BIT(SPCR, SPCR_DORD);
    18ca:	8d e2       	ldi	r24, 0x2D	; 45
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	2d e2       	ldi	r18, 0x2D	; 45
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	f9 01       	movw	r30, r18
    18d4:	20 81       	ld	r18, Z
    18d6:	2f 7d       	andi	r18, 0xDF	; 223
    18d8:	fc 01       	movw	r30, r24
    18da:	20 83       	st	Z, r18
		break;
    18dc:	0e c0       	rjmp	.+28     	; 0x18fa <SPI_enuSlaveInit+0x116>
	case SPI_TransmitLSB:
		SET_BIT(SPCR, SPCR_DORD);
    18de:	8d e2       	ldi	r24, 0x2D	; 45
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	2d e2       	ldi	r18, 0x2D	; 45
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	f9 01       	movw	r30, r18
    18e8:	20 81       	ld	r18, Z
    18ea:	20 62       	ori	r18, 0x20	; 32
    18ec:	fc 01       	movw	r30, r24
    18ee:	20 83       	st	Z, r18
		break;
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <SPI_enuSlaveInit+0x116>
	default:
		LOC_enuErrorStatus = spi_invalidInput;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01
		return LOC_enuErrorStatus;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	18 c0       	rjmp	.+48     	; 0x192a <SPI_enuSlaveInit+0x146>
	}

	CLR_BIT(SPCR, SPCR_MSTR);
    18fa:	8d e2       	ldi	r24, 0x2D	; 45
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	2d e2       	ldi	r18, 0x2D	; 45
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	f9 01       	movw	r30, r18
    1904:	20 81       	ld	r18, Z
    1906:	2f 7e       	andi	r18, 0xEF	; 239
    1908:	fc 01       	movw	r30, r24
    190a:	20 83       	st	Z, r18
	SET_BIT(SPCR, SPCR_SPE);
    190c:	8d e2       	ldi	r24, 0x2D	; 45
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	2d e2       	ldi	r18, 0x2D	; 45
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	f9 01       	movw	r30, r18
    1916:	20 81       	ld	r18, Z
    1918:	20 64       	ori	r18, 0x40	; 64
    191a:	fc 01       	movw	r30, r24
    191c:	20 83       	st	Z, r18
	DIO_enuSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN6, DIO_u8_OUTPUT);
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	66 e0       	ldi	r22, 0x06	; 6
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>

	return LOC_enuErrorStatus;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <SPI_u8Trancieve>:

u8 SPI_u8Trancieve(u8 Copy_u8Data) {
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	a1 97       	sbiw	r28, 0x21	; 33
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	89 a3       	std	Y+33, r24	; 0x21
	SPDR = Copy_u8Data;
    194c:	8f e2       	ldi	r24, 0x2F	; 47
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	29 a1       	ldd	r18, Y+33	; 0x21
    1952:	fc 01       	movw	r30, r24
    1954:	20 83       	st	Z, r18
	while (GET_BIT(SPSR, SPSR_SPIF) == 0)
    1956:	00 00       	nop
    1958:	8e e2       	ldi	r24, 0x2E	; 46
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	fc 01       	movw	r30, r24
    195e:	80 81       	ld	r24, Z
    1960:	88 1f       	adc	r24, r24
    1962:	88 27       	eor	r24, r24
    1964:	88 1f       	adc	r24, r24
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	81 70       	andi	r24, 0x01	; 1
    196c:	99 27       	eor	r25, r25
    196e:	89 2b       	or	r24, r25
    1970:	99 f3       	breq	.-26     	; 0x1958 <SPI_u8Trancieve+0x22>
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	aa ef       	ldi	r26, 0xFA	; 250
    1978:	b4 e4       	ldi	r27, 0x44	; 68
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	ab 83       	std	Y+3, r26	; 0x03
    1980:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1982:	2b ea       	ldi	r18, 0xAB	; 171
    1984:	3a ea       	ldi	r19, 0xAA	; 170
    1986:	4a e2       	ldi	r20, 0x2A	; 42
    1988:	50 e4       	ldi	r21, 0x40	; 64
    198a:	69 81       	ldd	r22, Y+1	; 0x01
    198c:	7a 81       	ldd	r23, Y+2	; 0x02
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8d 83       	std	Y+5, r24	; 0x05
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	af 83       	std	Y+7, r26	; 0x07
    19a0:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	ab 81       	ldd	r26, Y+3	; 0x03
    19a8:	bc 81       	ldd	r27, Y+4	; 0x04
    19aa:	9c 01       	movw	r18, r24
    19ac:	ad 01       	movw	r20, r26
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__addsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	89 87       	std	Y+9, r24	; 0x09
    19bc:	9a 87       	std	Y+10, r25	; 0x0a
    19be:	ab 87       	std	Y+11, r26	; 0x0b
    19c0:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e8       	ldi	r20, 0x80	; 128
    19c8:	5f e3       	ldi	r21, 0x3F	; 63
    19ca:	6d 81       	ldd	r22, Y+5	; 0x05
    19cc:	7e 81       	ldd	r23, Y+6	; 0x06
    19ce:	8f 81       	ldd	r24, Y+7	; 0x07
    19d0:	98 85       	ldd	r25, Y+8	; 0x08
    19d2:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	1c f4       	brge	.+6      	; 0x19e0 <SPI_u8Trancieve+0xaa>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	8d 87       	std	Y+13, r24	; 0x0d
    19de:	b2 c0       	rjmp	.+356    	; 0x1b44 <SPI_u8Trancieve+0x20e>
	else if (__tmp2 > 65535)
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	4f e7       	ldi	r20, 0x7F	; 127
    19e6:	57 e4       	ldi	r21, 0x47	; 71
    19e8:	69 85       	ldd	r22, Y+9	; 0x09
    19ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    19ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    19f0:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	0c f0       	brlt	.+2      	; 0x19fa <SPI_u8Trancieve+0xc4>
    19f8:	7b c0       	rjmp	.+246    	; 0x1af0 <SPI_u8Trancieve+0x1ba>
	{
		_delay_ms(__us / 1000.0);
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a e7       	ldi	r20, 0x7A	; 122
    1a00:	54 e4       	ldi	r21, 0x44	; 68
    1a02:	69 81       	ldd	r22, Y+1	; 0x01
    1a04:	7a 81       	ldd	r23, Y+2	; 0x02
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__divsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8e 87       	std	Y+14, r24	; 0x0e
    1a14:	9f 87       	std	Y+15, r25	; 0x0f
    1a16:	a8 8b       	std	Y+16, r26	; 0x10
    1a18:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4a ef       	ldi	r20, 0xFA	; 250
    1a20:	54 e4       	ldi	r21, 0x44	; 68
    1a22:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a24:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a26:	88 89       	ldd	r24, Y+16	; 0x10
    1a28:	99 89       	ldd	r25, Y+17	; 0x11
    1a2a:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	8a 8b       	std	Y+18, r24	; 0x12
    1a34:	9b 8b       	std	Y+19, r25	; 0x13
    1a36:	ac 8b       	std	Y+20, r26	; 0x14
    1a38:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	6a 89       	ldd	r22, Y+18	; 0x12
    1a44:	7b 89       	ldd	r23, Y+19	; 0x13
    1a46:	8c 89       	ldd	r24, Y+20	; 0x14
    1a48:	9d 89       	ldd	r25, Y+21	; 0x15
    1a4a:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <SPI_u8Trancieve+0x126>
		__ticks = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9f 8b       	std	Y+23, r25	; 0x17
    1a58:	8e 8b       	std	Y+22, r24	; 0x16
    1a5a:	3f c0       	rjmp	.+126    	; 0x1ada <SPI_u8Trancieve+0x1a4>
	else if (__tmp > 65535)
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	6a 89       	ldd	r22, Y+18	; 0x12
    1a66:	7b 89       	ldd	r23, Y+19	; 0x13
    1a68:	8c 89       	ldd	r24, Y+20	; 0x14
    1a6a:	9d 89       	ldd	r25, Y+21	; 0x15
    1a6c:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	4c f5       	brge	.+82     	; 0x1ac6 <SPI_u8Trancieve+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e2       	ldi	r20, 0x20	; 32
    1a7a:	51 e4       	ldi	r21, 0x41	; 65
    1a7c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a7e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a80:	88 89       	ldd	r24, Y+16	; 0x10
    1a82:	99 89       	ldd	r25, Y+17	; 0x11
    1a84:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9f 8b       	std	Y+23, r25	; 0x17
    1a9a:	8e 8b       	std	Y+22, r24	; 0x16
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <SPI_u8Trancieve+0x186>
    1a9e:	88 ec       	ldi	r24, 0xC8	; 200
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	99 8f       	std	Y+25, r25	; 0x19
    1aa4:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa6:	88 8d       	ldd	r24, Y+24	; 0x18
    1aa8:	99 8d       	ldd	r25, Y+25	; 0x19
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <SPI_u8Trancieve+0x174>
    1aae:	99 8f       	std	Y+25, r25	; 0x19
    1ab0:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ab4:	9f 89       	ldd	r25, Y+23	; 0x17
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	9f 8b       	std	Y+23, r25	; 0x17
    1aba:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abc:	8e 89       	ldd	r24, Y+22	; 0x16
    1abe:	9f 89       	ldd	r25, Y+23	; 0x17
    1ac0:	89 2b       	or	r24, r25
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <SPI_u8Trancieve+0x168>
    1ac4:	3f c0       	rjmp	.+126    	; 0x1b44 <SPI_u8Trancieve+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac6:	6a 89       	ldd	r22, Y+18	; 0x12
    1ac8:	7b 89       	ldd	r23, Y+19	; 0x13
    1aca:	8c 89       	ldd	r24, Y+20	; 0x14
    1acc:	9d 89       	ldd	r25, Y+21	; 0x15
    1ace:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9f 8b       	std	Y+23, r25	; 0x17
    1ad8:	8e 8b       	std	Y+22, r24	; 0x16
    1ada:	8e 89       	ldd	r24, Y+22	; 0x16
    1adc:	9f 89       	ldd	r25, Y+23	; 0x17
    1ade:	9b 8f       	std	Y+27, r25	; 0x1b
    1ae0:	8a 8f       	std	Y+26, r24	; 0x1a
    1ae2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ae4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <SPI_u8Trancieve+0x1b0>
    1aea:	9b 8f       	std	Y+27, r25	; 0x1b
    1aec:	8a 8f       	std	Y+26, r24	; 0x1a
    1aee:	2a c0       	rjmp	.+84     	; 0x1b44 <SPI_u8Trancieve+0x20e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	53 e4       	ldi	r21, 0x43	; 67
    1af8:	6d 81       	ldd	r22, Y+5	; 0x05
    1afa:	7e 81       	ldd	r23, Y+6	; 0x06
    1afc:	8f 81       	ldd	r24, Y+7	; 0x07
    1afe:	98 85       	ldd	r25, Y+8	; 0x08
    1b00:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	ac f4       	brge	.+42     	; 0x1b32 <SPI_u8Trancieve+0x1fc>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1b08:	69 85       	ldd	r22, Y+9	; 0x09
    1b0a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b10:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9d 8f       	std	Y+29, r25	; 0x1d
    1b1a:	8c 8f       	std	Y+28, r24	; 0x1c
    1b1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b20:	9f 8f       	std	Y+31, r25	; 0x1f
    1b22:	8e 8f       	std	Y+30, r24	; 0x1e
    1b24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b26:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <SPI_u8Trancieve+0x1f2>
    1b2c:	9f 8f       	std	Y+31, r25	; 0x1f
    1b2e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <SPI_u8Trancieve+0x21a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b32:	6d 81       	ldd	r22, Y+5	; 0x05
    1b34:	7e 81       	ldd	r23, Y+6	; 0x06
    1b36:	8f 81       	ldd	r24, Y+7	; 0x07
    1b38:	98 85       	ldd	r25, Y+8	; 0x08
    1b3a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8d 87       	std	Y+13, r24	; 0x0d
    1b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b46:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b48:	88 a1       	ldd	r24, Y+32	; 0x20
    1b4a:	8a 95       	dec	r24
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <SPI_u8Trancieve+0x214>
    1b4e:	88 a3       	std	Y+32, r24	; 0x20
		;
	_delay_us(2000);
	return SPDR;
    1b50:	8f e2       	ldi	r24, 0x2F	; 47
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	fc 01       	movw	r30, r24
    1b56:	80 81       	ld	r24, Z
}
    1b58:	a1 96       	adiw	r28, 0x21	; 33
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <SPI_enuInterruptEnable>:

void SPI_enuInterruptEnable(void) {
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR, SPCR_SPIE);
    1b72:	8d e2       	ldi	r24, 0x2D	; 45
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	2d e2       	ldi	r18, 0x2D	; 45
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	20 81       	ld	r18, Z
    1b7e:	20 68       	ori	r18, 0x80	; 128
    1b80:	fc 01       	movw	r30, r24
    1b82:	20 83       	st	Z, r18
}
    1b84:	00 00       	nop
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	08 95       	ret

00001b8c <DIO_enuSetPinValue>:
#include "../../../INCLUDE/MCAL/DIO/Dio_prv.h"
#include "../../../SERVICES/BIT_UTILIS.h"
#include "../../../SERVICES/STD_TYPES.h"

DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId,
		u8 Copy_u8PinVal) {
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <DIO_enuSetPinValue+0x6>
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <DIO_enuSetPinValue+0x8>
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	8a 83       	std	Y+2, r24	; 0x02
    1b9a:	6b 83       	std	Y+3, r22	; 0x03
    1b9c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;
    1b9e:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PortId >= DIO_u8_PORTA)
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	84 30       	cpi	r24, 0x04	; 4
    1ba4:	08 f0       	brcs	.+2      	; 0x1ba8 <DIO_enuSetPinValue+0x1c>
    1ba6:	df c0       	rjmp	.+446    	; 0x1d66 <DIO_enuSetPinValue+0x1da>
			&& (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0)) {
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	88 30       	cpi	r24, 0x08	; 8
    1bac:	08 f0       	brcs	.+2      	; 0x1bb0 <DIO_enuSetPinValue+0x24>
    1bae:	db c0       	rjmp	.+438    	; 0x1d66 <DIO_enuSetPinValue+0x1da>
		if (Copy_u8PinVal == DIO_u8_HIGH) {
    1bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <DIO_enuSetPinValue+0x2c>
    1bb6:	67 c0       	rjmp	.+206    	; 0x1c86 <DIO_enuSetPinValue+0xfa>
			switch (Copy_u8PortId) {
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	11 f1       	breq	.+68     	; 0x1c08 <DIO_enuSetPinValue+0x7c>
    1bc4:	82 30       	cpi	r24, 0x02	; 2
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	1c f4       	brge	.+6      	; 0x1bd0 <DIO_enuSetPinValue+0x44>
    1bca:	89 2b       	or	r24, r25
    1bcc:	41 f0       	breq	.+16     	; 0x1bde <DIO_enuSetPinValue+0x52>
				break;
			case DIO_u8_PORTD:
				SET_BIT(PORTD_REGISTER, Copy_u8PinId);
				break;
			default: /* Wrong Port ID */
				break;
    1bce:	ca c0       	rjmp	.+404    	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;

	if ((Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PortId >= DIO_u8_PORTA)
			&& (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0)) {
		if (Copy_u8PinVal == DIO_u8_HIGH) {
			switch (Copy_u8PortId) {
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	71 f1       	breq	.+92     	; 0x1c32 <DIO_enuSetPinValue+0xa6>
    1bd6:	03 97       	sbiw	r24, 0x03	; 3
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <DIO_enuSetPinValue+0x50>
    1bda:	40 c0       	rjmp	.+128    	; 0x1c5c <DIO_enuSetPinValue+0xd0>
				break;
			case DIO_u8_PORTD:
				SET_BIT(PORTD_REGISTER, Copy_u8PinId);
				break;
			default: /* Wrong Port ID */
				break;
    1bdc:	c3 c0       	rjmp	.+390    	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
	if ((Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PortId >= DIO_u8_PORTA)
			&& (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0)) {
		if (Copy_u8PinVal == DIO_u8_HIGH) {
			switch (Copy_u8PortId) {
			case DIO_u8_PORTA:
				SET_BIT(PORTA_REGISTER, Copy_u8PinId);
    1bde:	8b e3       	ldi	r24, 0x3B	; 59
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	2b e3       	ldi	r18, 0x3B	; 59
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	f9 01       	movw	r30, r18
    1be8:	20 81       	ld	r18, Z
    1bea:	62 2f       	mov	r22, r18
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	42 2f       	mov	r20, r18
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	21 e0       	ldi	r18, 0x01	; 1
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_enuSetPinValue+0x70>
    1bf8:	22 0f       	add	r18, r18
    1bfa:	33 1f       	adc	r19, r19
    1bfc:	4a 95       	dec	r20
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_enuSetPinValue+0x6c>
    1c00:	26 2b       	or	r18, r22
    1c02:	fc 01       	movw	r30, r24
    1c04:	20 83       	st	Z, r18
				break;
    1c06:	ae c0       	rjmp	.+348    	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
			case DIO_u8_PORTB:
				SET_BIT(PORTB_REGISTER, Copy_u8PinId);
    1c08:	88 e3       	ldi	r24, 0x38	; 56
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	28 e3       	ldi	r18, 0x38	; 56
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	f9 01       	movw	r30, r18
    1c12:	20 81       	ld	r18, Z
    1c14:	62 2f       	mov	r22, r18
    1c16:	2b 81       	ldd	r18, Y+3	; 0x03
    1c18:	42 2f       	mov	r20, r18
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	21 e0       	ldi	r18, 0x01	; 1
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <DIO_enuSetPinValue+0x9a>
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	4a 95       	dec	r20
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <DIO_enuSetPinValue+0x96>
    1c2a:	26 2b       	or	r18, r22
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	20 83       	st	Z, r18
				break;
    1c30:	99 c0       	rjmp	.+306    	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
			case DIO_u8_PORTC:
				SET_BIT(PORTC_REGISTER, Copy_u8PinId);
    1c32:	85 e3       	ldi	r24, 0x35	; 53
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	25 e3       	ldi	r18, 0x35	; 53
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	20 81       	ld	r18, Z
    1c3e:	62 2f       	mov	r22, r18
    1c40:	2b 81       	ldd	r18, Y+3	; 0x03
    1c42:	42 2f       	mov	r20, r18
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	21 e0       	ldi	r18, 0x01	; 1
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <DIO_enuSetPinValue+0xc4>
    1c4c:	22 0f       	add	r18, r18
    1c4e:	33 1f       	adc	r19, r19
    1c50:	4a 95       	dec	r20
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <DIO_enuSetPinValue+0xc0>
    1c54:	26 2b       	or	r18, r22
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
				break;
    1c5a:	84 c0       	rjmp	.+264    	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
			case DIO_u8_PORTD:
				SET_BIT(PORTD_REGISTER, Copy_u8PinId);
    1c5c:	82 e3       	ldi	r24, 0x32	; 50
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	22 e3       	ldi	r18, 0x32	; 50
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	f9 01       	movw	r30, r18
    1c66:	20 81       	ld	r18, Z
    1c68:	62 2f       	mov	r22, r18
    1c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6c:	42 2f       	mov	r20, r18
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	21 e0       	ldi	r18, 0x01	; 1
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <DIO_enuSetPinValue+0xee>
    1c76:	22 0f       	add	r18, r18
    1c78:	33 1f       	adc	r19, r19
    1c7a:	4a 95       	dec	r20
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <DIO_enuSetPinValue+0xea>
    1c7e:	26 2b       	or	r18, r22
    1c80:	fc 01       	movw	r30, r24
    1c82:	20 83       	st	Z, r18
				break;
    1c84:	6f c0       	rjmp	.+222    	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
			default: /* Wrong Port ID */
				break;
			}
		} else if (Copy_u8PinVal == DIO_u8_LOW) {
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	88 23       	and	r24, r24
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <DIO_enuSetPinValue+0x102>
    1c8c:	6f c0       	rjmp	.+222    	; 0x1d6c <DIO_enuSetPinValue+0x1e0>
			switch (Copy_u8PortId) {
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	91 05       	cpc	r25, r1
    1c98:	19 f1       	breq	.+70     	; 0x1ce0 <DIO_enuSetPinValue+0x154>
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	1c f4       	brge	.+6      	; 0x1ca6 <DIO_enuSetPinValue+0x11a>
    1ca0:	89 2b       	or	r24, r25
    1ca2:	41 f0       	breq	.+16     	; 0x1cb4 <DIO_enuSetPinValue+0x128>
				break;
			case DIO_u8_PORTD:
				CLR_BIT(PORTD_REGISTER, Copy_u8PinId);
				break;
			default: /* Wrong Port ID */
				break;
    1ca4:	5f c0       	rjmp	.+190    	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
				break;
			default: /* Wrong Port ID */
				break;
			}
		} else if (Copy_u8PinVal == DIO_u8_LOW) {
			switch (Copy_u8PortId) {
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	91 05       	cpc	r25, r1
    1caa:	81 f1       	breq	.+96     	; 0x1d0c <DIO_enuSetPinValue+0x180>
    1cac:	03 97       	sbiw	r24, 0x03	; 3
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <DIO_enuSetPinValue+0x126>
    1cb0:	43 c0       	rjmp	.+134    	; 0x1d38 <DIO_enuSetPinValue+0x1ac>
				break;
			case DIO_u8_PORTD:
				CLR_BIT(PORTD_REGISTER, Copy_u8PinId);
				break;
			default: /* Wrong Port ID */
				break;
    1cb2:	58 c0       	rjmp	.+176    	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
				break;
			}
		} else if (Copy_u8PinVal == DIO_u8_LOW) {
			switch (Copy_u8PortId) {
			case DIO_u8_PORTA:
				CLR_BIT(PORTA_REGISTER, Copy_u8PinId);
    1cb4:	8b e3       	ldi	r24, 0x3B	; 59
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	2b e3       	ldi	r18, 0x3B	; 59
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	f9 01       	movw	r30, r18
    1cbe:	20 81       	ld	r18, Z
    1cc0:	62 2f       	mov	r22, r18
    1cc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc4:	42 2f       	mov	r20, r18
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	21 e0       	ldi	r18, 0x01	; 1
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_enuSetPinValue+0x146>
    1cce:	22 0f       	add	r18, r18
    1cd0:	33 1f       	adc	r19, r19
    1cd2:	4a 95       	dec	r20
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_enuSetPinValue+0x142>
    1cd6:	20 95       	com	r18
    1cd8:	26 23       	and	r18, r22
    1cda:	fc 01       	movw	r30, r24
    1cdc:	20 83       	st	Z, r18
				break;
    1cde:	42 c0       	rjmp	.+132    	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
			case DIO_u8_PORTB:
				CLR_BIT(PORTB_REGISTER, Copy_u8PinId);
    1ce0:	88 e3       	ldi	r24, 0x38	; 56
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	28 e3       	ldi	r18, 0x38	; 56
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	f9 01       	movw	r30, r18
    1cea:	20 81       	ld	r18, Z
    1cec:	62 2f       	mov	r22, r18
    1cee:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf0:	42 2f       	mov	r20, r18
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_enuSetPinValue+0x172>
    1cfa:	22 0f       	add	r18, r18
    1cfc:	33 1f       	adc	r19, r19
    1cfe:	4a 95       	dec	r20
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <DIO_enuSetPinValue+0x16e>
    1d02:	20 95       	com	r18
    1d04:	26 23       	and	r18, r22
    1d06:	fc 01       	movw	r30, r24
    1d08:	20 83       	st	Z, r18
				break;
    1d0a:	2c c0       	rjmp	.+88     	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
			case DIO_u8_PORTC:
				CLR_BIT(PORTC_REGISTER, Copy_u8PinId);
    1d0c:	85 e3       	ldi	r24, 0x35	; 53
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	25 e3       	ldi	r18, 0x35	; 53
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	f9 01       	movw	r30, r18
    1d16:	20 81       	ld	r18, Z
    1d18:	62 2f       	mov	r22, r18
    1d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1c:	42 2f       	mov	r20, r18
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	21 e0       	ldi	r18, 0x01	; 1
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_enuSetPinValue+0x19e>
    1d26:	22 0f       	add	r18, r18
    1d28:	33 1f       	adc	r19, r19
    1d2a:	4a 95       	dec	r20
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_enuSetPinValue+0x19a>
    1d2e:	20 95       	com	r18
    1d30:	26 23       	and	r18, r22
    1d32:	fc 01       	movw	r30, r24
    1d34:	20 83       	st	Z, r18
				break;
    1d36:	16 c0       	rjmp	.+44     	; 0x1d64 <DIO_enuSetPinValue+0x1d8>
			case DIO_u8_PORTD:
				CLR_BIT(PORTD_REGISTER, Copy_u8PinId);
    1d38:	82 e3       	ldi	r24, 0x32	; 50
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	22 e3       	ldi	r18, 0x32	; 50
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	f9 01       	movw	r30, r18
    1d42:	20 81       	ld	r18, Z
    1d44:	62 2f       	mov	r22, r18
    1d46:	2b 81       	ldd	r18, Y+3	; 0x03
    1d48:	42 2f       	mov	r20, r18
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	21 e0       	ldi	r18, 0x01	; 1
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <DIO_enuSetPinValue+0x1ca>
    1d52:	22 0f       	add	r18, r18
    1d54:	33 1f       	adc	r19, r19
    1d56:	4a 95       	dec	r20
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <DIO_enuSetPinValue+0x1c6>
    1d5a:	20 95       	com	r18
    1d5c:	26 23       	and	r18, r22
    1d5e:	fc 01       	movw	r30, r24
    1d60:	20 83       	st	Z, r18
				break;
    1d62:	00 00       	nop

	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;

	if ((Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PortId >= DIO_u8_PORTA)
			&& (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0)) {
		if (Copy_u8PinVal == DIO_u8_HIGH) {
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <DIO_enuSetPinValue+0x1e0>
			}
		}
	}

	else {
		LOC_enuErrorStatus = DIO_invalidInput;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <DIO_enuSetPinValue+0x1e2>

	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;

	if ((Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PortId >= DIO_u8_PORTA)
			&& (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0)) {
		if (Copy_u8PinVal == DIO_u8_HIGH) {
    1d6c:	00 00       	nop
	}

	else {
		LOC_enuErrorStatus = DIO_invalidInput;
	}
	return LOC_enuErrorStatus;
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	08 95       	ret

00001d7e <DIO_u8GetPinValue>:

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId) {
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <DIO_u8GetPinValue+0x6>
    1d84:	1f 92       	push	r1
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	8a 83       	std	Y+2, r24	; 0x02
    1d8c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Copy_u8Result;
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	08 f0       	brcs	.+2      	; 0x1d96 <DIO_u8GetPinValue+0x18>
    1d94:	5a c0       	rjmp	.+180    	; 0x1e4a <DIO_u8GetPinValue+0xcc>
		if (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0) {
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	88 30       	cpi	r24, 0x08	; 8
    1d9a:	08 f0       	brcs	.+2      	; 0x1d9e <DIO_u8GetPinValue+0x20>
    1d9c:	56 c0       	rjmp	.+172    	; 0x1e4a <DIO_u8GetPinValue+0xcc>

			switch (Copy_u8PortId) {
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	e9 f0       	breq	.+58     	; 0x1de4 <DIO_u8GetPinValue+0x66>
    1daa:	82 30       	cpi	r24, 0x02	; 2
    1dac:	91 05       	cpc	r25, r1
    1dae:	1c f4       	brge	.+6      	; 0x1db6 <DIO_u8GetPinValue+0x38>
    1db0:	89 2b       	or	r24, r25
    1db2:	39 f0       	breq	.+14     	; 0x1dc2 <DIO_u8GetPinValue+0x44>
				break;
			case DIO_u8_PORTD:
				Copy_u8Result = GET_BIT(PIND_REGISTER, Copy_u8PinId);
				break;
			default: /* Wrong Port ID */
				break;
    1db4:	4a c0       	rjmp	.+148    	; 0x1e4a <DIO_u8GetPinValue+0xcc>
u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId) {
	u8 Copy_u8Result;
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
		if (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0) {

			switch (Copy_u8PortId) {
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	91 05       	cpc	r25, r1
    1dba:	29 f1       	breq	.+74     	; 0x1e06 <DIO_u8GetPinValue+0x88>
    1dbc:	03 97       	sbiw	r24, 0x03	; 3
    1dbe:	a1 f1       	breq	.+104    	; 0x1e28 <DIO_u8GetPinValue+0xaa>
				break;
			case DIO_u8_PORTD:
				Copy_u8Result = GET_BIT(PIND_REGISTER, Copy_u8PinId);
				break;
			default: /* Wrong Port ID */
				break;
    1dc0:	44 c0       	rjmp	.+136    	; 0x1e4a <DIO_u8GetPinValue+0xcc>
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
		if (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0) {

			switch (Copy_u8PortId) {
			case DIO_u8_PORTA:
				Copy_u8Result = GET_BIT(PINA_REGISTER, Copy_u8PinId);
    1dc2:	89 e3       	ldi	r24, 0x39	; 57
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	80 81       	ld	r24, Z
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	22 2f       	mov	r18, r18
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <DIO_u8GetPinValue+0x5c>
    1dd6:	95 95       	asr	r25
    1dd8:	87 95       	ror	r24
    1dda:	2a 95       	dec	r18
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <DIO_u8GetPinValue+0x58>
    1dde:	81 70       	andi	r24, 0x01	; 1
    1de0:	89 83       	std	Y+1, r24	; 0x01
				break;
    1de2:	33 c0       	rjmp	.+102    	; 0x1e4a <DIO_u8GetPinValue+0xcc>
			case DIO_u8_PORTB:
				Copy_u8Result = GET_BIT(PINB_REGISTER, Copy_u8PinId);
    1de4:	86 e3       	ldi	r24, 0x36	; 54
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	fc 01       	movw	r30, r24
    1dea:	80 81       	ld	r24, Z
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	2b 81       	ldd	r18, Y+3	; 0x03
    1df2:	22 2f       	mov	r18, r18
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <DIO_u8GetPinValue+0x7e>
    1df8:	95 95       	asr	r25
    1dfa:	87 95       	ror	r24
    1dfc:	2a 95       	dec	r18
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <DIO_u8GetPinValue+0x7a>
    1e00:	81 70       	andi	r24, 0x01	; 1
    1e02:	89 83       	std	Y+1, r24	; 0x01
				break;
    1e04:	22 c0       	rjmp	.+68     	; 0x1e4a <DIO_u8GetPinValue+0xcc>
			case DIO_u8_PORTC:
				Copy_u8Result = GET_BIT(PINC_REGISTER, Copy_u8PinId);
    1e06:	83 e3       	ldi	r24, 0x33	; 51
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	2b 81       	ldd	r18, Y+3	; 0x03
    1e14:	22 2f       	mov	r18, r18
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_u8GetPinValue+0xa0>
    1e1a:	95 95       	asr	r25
    1e1c:	87 95       	ror	r24
    1e1e:	2a 95       	dec	r18
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_u8GetPinValue+0x9c>
    1e22:	81 70       	andi	r24, 0x01	; 1
    1e24:	89 83       	std	Y+1, r24	; 0x01
				break;
    1e26:	11 c0       	rjmp	.+34     	; 0x1e4a <DIO_u8GetPinValue+0xcc>
			case DIO_u8_PORTD:
				Copy_u8Result = GET_BIT(PIND_REGISTER, Copy_u8PinId);
    1e28:	80 e3       	ldi	r24, 0x30	; 48
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	2b 81       	ldd	r18, Y+3	; 0x03
    1e36:	22 2f       	mov	r18, r18
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <DIO_u8GetPinValue+0xc2>
    1e3c:	95 95       	asr	r25
    1e3e:	87 95       	ror	r24
    1e40:	2a 95       	dec	r18
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <DIO_u8GetPinValue+0xbe>
    1e44:	81 70       	andi	r24, 0x01	; 1
    1e46:	89 83       	std	Y+1, r24	; 0x01
				break;
    1e48:	00 00       	nop
			}
		}

	}

	return Copy_u8Result;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	08 95       	ret

00001e58 <DIO_enuSetPinDirection>:
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

DIO_tenuErrorStatus DIO_enuSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,
		u8 Copy_u8PinDir) {
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <DIO_enuSetPinDirection+0x6>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <DIO_enuSetPinDirection+0x8>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	8a 83       	std	Y+2, r24	; 0x02
    1e66:	6b 83       	std	Y+3, r22	; 0x03
    1e68:	4c 83       	std	Y+4, r20	; 0x04

	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;
    1e6a:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	84 30       	cpi	r24, 0x04	; 4
    1e70:	08 f0       	brcs	.+2      	; 0x1e74 <DIO_enuSetPinDirection+0x1c>
    1e72:	e1 c0       	rjmp	.+450    	; 0x2036 <DIO_enuSetPinDirection+0x1de>
		if ((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0)) {
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	88 30       	cpi	r24, 0x08	; 8
    1e78:	08 f0       	brcs	.+2      	; 0x1e7c <DIO_enuSetPinDirection+0x24>
    1e7a:	da c0       	rjmp	.+436    	; 0x2030 <DIO_enuSetPinDirection+0x1d8>
			if (Copy_u8PinDir == DIO_u8_OUTPUT) {
    1e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <DIO_enuSetPinDirection+0x2c>
    1e82:	67 c0       	rjmp	.+206    	; 0x1f52 <DIO_enuSetPinDirection+0xfa>
				switch (Copy_u8PortId) {
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	11 f1       	breq	.+68     	; 0x1ed4 <DIO_enuSetPinDirection+0x7c>
    1e90:	82 30       	cpi	r24, 0x02	; 2
    1e92:	91 05       	cpc	r25, r1
    1e94:	1c f4       	brge	.+6      	; 0x1e9c <DIO_enuSetPinDirection+0x44>
    1e96:	89 2b       	or	r24, r25
    1e98:	41 f0       	breq	.+16     	; 0x1eaa <DIO_enuSetPinDirection+0x52>
					break;
				case DIO_u8_PORTD:
					SET_BIT(DDRD_REGISTER, Copy_u8PinId);
					break;
				default: /* Wrong Port ID */
					break;
    1e9a:	cf c0       	rjmp	.+414    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;

	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
		if ((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0)) {
			if (Copy_u8PinDir == DIO_u8_OUTPUT) {
				switch (Copy_u8PortId) {
    1e9c:	82 30       	cpi	r24, 0x02	; 2
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	71 f1       	breq	.+92     	; 0x1efe <DIO_enuSetPinDirection+0xa6>
    1ea2:	03 97       	sbiw	r24, 0x03	; 3
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <DIO_enuSetPinDirection+0x50>
    1ea6:	40 c0       	rjmp	.+128    	; 0x1f28 <DIO_enuSetPinDirection+0xd0>
					break;
				case DIO_u8_PORTD:
					SET_BIT(DDRD_REGISTER, Copy_u8PinId);
					break;
				default: /* Wrong Port ID */
					break;
    1ea8:	c8 c0       	rjmp	.+400    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
		if ((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0)) {
			if (Copy_u8PinDir == DIO_u8_OUTPUT) {
				switch (Copy_u8PortId) {
				case DIO_u8_PORTA:
					SET_BIT(DDRA_REGISTER, Copy_u8PinId);
    1eaa:	8a e3       	ldi	r24, 0x3A	; 58
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	2a e3       	ldi	r18, 0x3A	; 58
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	f9 01       	movw	r30, r18
    1eb4:	20 81       	ld	r18, Z
    1eb6:	62 2f       	mov	r22, r18
    1eb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eba:	42 2f       	mov	r20, r18
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	21 e0       	ldi	r18, 0x01	; 1
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <DIO_enuSetPinDirection+0x70>
    1ec4:	22 0f       	add	r18, r18
    1ec6:	33 1f       	adc	r19, r19
    1ec8:	4a 95       	dec	r20
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <DIO_enuSetPinDirection+0x6c>
    1ecc:	26 2b       	or	r18, r22
    1ece:	fc 01       	movw	r30, r24
    1ed0:	20 83       	st	Z, r18
					break;
    1ed2:	b3 c0       	rjmp	.+358    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
				case DIO_u8_PORTB:
					SET_BIT(DDRB_REGISTER, Copy_u8PinId);
    1ed4:	87 e3       	ldi	r24, 0x37	; 55
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	27 e3       	ldi	r18, 0x37	; 55
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	f9 01       	movw	r30, r18
    1ede:	20 81       	ld	r18, Z
    1ee0:	62 2f       	mov	r22, r18
    1ee2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee4:	42 2f       	mov	r20, r18
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	21 e0       	ldi	r18, 0x01	; 1
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_enuSetPinDirection+0x9a>
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
    1ef2:	4a 95       	dec	r20
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <DIO_enuSetPinDirection+0x96>
    1ef6:	26 2b       	or	r18, r22
    1ef8:	fc 01       	movw	r30, r24
    1efa:	20 83       	st	Z, r18
					break;
    1efc:	9e c0       	rjmp	.+316    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
				case DIO_u8_PORTC:
					SET_BIT(DDRC_REGISTER, Copy_u8PinId);
    1efe:	84 e3       	ldi	r24, 0x34	; 52
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	24 e3       	ldi	r18, 0x34	; 52
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	f9 01       	movw	r30, r18
    1f08:	20 81       	ld	r18, Z
    1f0a:	62 2f       	mov	r22, r18
    1f0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0e:	42 2f       	mov	r20, r18
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	21 e0       	ldi	r18, 0x01	; 1
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <DIO_enuSetPinDirection+0xc4>
    1f18:	22 0f       	add	r18, r18
    1f1a:	33 1f       	adc	r19, r19
    1f1c:	4a 95       	dec	r20
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <DIO_enuSetPinDirection+0xc0>
    1f20:	26 2b       	or	r18, r22
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 83       	st	Z, r18
					break;
    1f26:	89 c0       	rjmp	.+274    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
				case DIO_u8_PORTD:
					SET_BIT(DDRD_REGISTER, Copy_u8PinId);
    1f28:	81 e3       	ldi	r24, 0x31	; 49
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	21 e3       	ldi	r18, 0x31	; 49
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	f9 01       	movw	r30, r18
    1f32:	20 81       	ld	r18, Z
    1f34:	62 2f       	mov	r22, r18
    1f36:	2b 81       	ldd	r18, Y+3	; 0x03
    1f38:	42 2f       	mov	r20, r18
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	21 e0       	ldi	r18, 0x01	; 1
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <DIO_enuSetPinDirection+0xee>
    1f42:	22 0f       	add	r18, r18
    1f44:	33 1f       	adc	r19, r19
    1f46:	4a 95       	dec	r20
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <DIO_enuSetPinDirection+0xea>
    1f4a:	26 2b       	or	r18, r22
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	20 83       	st	Z, r18
					break;
    1f50:	74 c0       	rjmp	.+232    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
				default: /* Wrong Port ID */
					break;
				}
			} else if (Copy_u8PinDir == DIO_u8_INPUT) {
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	88 23       	and	r24, r24
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <DIO_enuSetPinDirection+0x102>
    1f58:	70 c0       	rjmp	.+224    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
				switch (Copy_u8PortId) {
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	88 2f       	mov	r24, r24
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	91 05       	cpc	r25, r1
    1f64:	19 f1       	breq	.+70     	; 0x1fac <DIO_enuSetPinDirection+0x154>
    1f66:	82 30       	cpi	r24, 0x02	; 2
    1f68:	91 05       	cpc	r25, r1
    1f6a:	1c f4       	brge	.+6      	; 0x1f72 <DIO_enuSetPinDirection+0x11a>
    1f6c:	89 2b       	or	r24, r25
    1f6e:	41 f0       	breq	.+16     	; 0x1f80 <DIO_enuSetPinDirection+0x128>
					break;
				case DIO_u8_PORTD:
					CLR_BIT(DDRD_REGISTER, Copy_u8PinId);
					break;
				default: /* Wrong Port ID */
					break;
    1f70:	64 c0       	rjmp	.+200    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
					break;
				default: /* Wrong Port ID */
					break;
				}
			} else if (Copy_u8PinDir == DIO_u8_INPUT) {
				switch (Copy_u8PortId) {
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	91 05       	cpc	r25, r1
    1f76:	81 f1       	breq	.+96     	; 0x1fd8 <DIO_enuSetPinDirection+0x180>
    1f78:	03 97       	sbiw	r24, 0x03	; 3
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <DIO_enuSetPinDirection+0x126>
    1f7c:	43 c0       	rjmp	.+134    	; 0x2004 <DIO_enuSetPinDirection+0x1ac>
					break;
				case DIO_u8_PORTD:
					CLR_BIT(DDRD_REGISTER, Copy_u8PinId);
					break;
				default: /* Wrong Port ID */
					break;
    1f7e:	5d c0       	rjmp	.+186    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
					break;
				}
			} else if (Copy_u8PinDir == DIO_u8_INPUT) {
				switch (Copy_u8PortId) {
				case DIO_u8_PORTA:
					CLR_BIT(DDRA_REGISTER, Copy_u8PinId);
    1f80:	8a e3       	ldi	r24, 0x3A	; 58
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	2a e3       	ldi	r18, 0x3A	; 58
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	f9 01       	movw	r30, r18
    1f8a:	20 81       	ld	r18, Z
    1f8c:	62 2f       	mov	r22, r18
    1f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f90:	42 2f       	mov	r20, r18
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	21 e0       	ldi	r18, 0x01	; 1
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <DIO_enuSetPinDirection+0x146>
    1f9a:	22 0f       	add	r18, r18
    1f9c:	33 1f       	adc	r19, r19
    1f9e:	4a 95       	dec	r20
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <DIO_enuSetPinDirection+0x142>
    1fa2:	20 95       	com	r18
    1fa4:	26 23       	and	r18, r22
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	20 83       	st	Z, r18
					break;
    1faa:	47 c0       	rjmp	.+142    	; 0x203a <DIO_enuSetPinDirection+0x1e2>
				case DIO_u8_PORTB:
					CLR_BIT(DDRB_REGISTER, Copy_u8PinId);
    1fac:	87 e3       	ldi	r24, 0x37	; 55
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	27 e3       	ldi	r18, 0x37	; 55
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	f9 01       	movw	r30, r18
    1fb6:	20 81       	ld	r18, Z
    1fb8:	62 2f       	mov	r22, r18
    1fba:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbc:	42 2f       	mov	r20, r18
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <DIO_enuSetPinDirection+0x172>
    1fc6:	22 0f       	add	r18, r18
    1fc8:	33 1f       	adc	r19, r19
    1fca:	4a 95       	dec	r20
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <DIO_enuSetPinDirection+0x16e>
    1fce:	20 95       	com	r18
    1fd0:	26 23       	and	r18, r22
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	20 83       	st	Z, r18
					break;
    1fd6:	31 c0       	rjmp	.+98     	; 0x203a <DIO_enuSetPinDirection+0x1e2>
				case DIO_u8_PORTC:
					CLR_BIT(DDRC_REGISTER, Copy_u8PinId);
    1fd8:	84 e3       	ldi	r24, 0x34	; 52
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	24 e3       	ldi	r18, 0x34	; 52
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	f9 01       	movw	r30, r18
    1fe2:	20 81       	ld	r18, Z
    1fe4:	62 2f       	mov	r22, r18
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	42 2f       	mov	r20, r18
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	21 e0       	ldi	r18, 0x01	; 1
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <DIO_enuSetPinDirection+0x19e>
    1ff2:	22 0f       	add	r18, r18
    1ff4:	33 1f       	adc	r19, r19
    1ff6:	4a 95       	dec	r20
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <DIO_enuSetPinDirection+0x19a>
    1ffa:	20 95       	com	r18
    1ffc:	26 23       	and	r18, r22
    1ffe:	fc 01       	movw	r30, r24
    2000:	20 83       	st	Z, r18
					break;
    2002:	1b c0       	rjmp	.+54     	; 0x203a <DIO_enuSetPinDirection+0x1e2>
				case DIO_u8_PORTD:
					CLR_BIT(DDRD_REGISTER, Copy_u8PinId);
    2004:	81 e3       	ldi	r24, 0x31	; 49
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	21 e3       	ldi	r18, 0x31	; 49
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	f9 01       	movw	r30, r18
    200e:	20 81       	ld	r18, Z
    2010:	62 2f       	mov	r22, r18
    2012:	2b 81       	ldd	r18, Y+3	; 0x03
    2014:	42 2f       	mov	r20, r18
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	21 e0       	ldi	r18, 0x01	; 1
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <DIO_enuSetPinDirection+0x1ca>
    201e:	22 0f       	add	r18, r18
    2020:	33 1f       	adc	r19, r19
    2022:	4a 95       	dec	r20
    2024:	e2 f7       	brpl	.-8      	; 0x201e <DIO_enuSetPinDirection+0x1c6>
    2026:	20 95       	com	r18
    2028:	26 23       	and	r18, r22
    202a:	fc 01       	movw	r30, r24
    202c:	20 83       	st	Z, r18
					break;
    202e:	05 c0       	rjmp	.+10     	; 0x203a <DIO_enuSetPinDirection+0x1e2>
				default: /* Wrong Port ID */
					break;
				}
			}
		} else {
			LOC_enuErrorStatus = DIO_invalidInput;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_enuSetPinDirection+0x1e2>
		}
	} else {
		LOC_enuErrorStatus = DIO_invalidInput;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_enuErrorStatus;
    203a:	89 81       	ldd	r24, Y+1	; 0x01
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	08 95       	ret

0000204a <DIO_enuSetPortDirection>:

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

DIO_tenuErrorStatus DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PinDir) {
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	00 d0       	rcall	.+0      	; 0x2050 <DIO_enuSetPortDirection+0x6>
    2050:	1f 92       	push	r1
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	8a 83       	std	Y+2, r24	; 0x02
    2058:	6b 83       	std	Y+3, r22	; 0x03

	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;
    205a:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	84 30       	cpi	r24, 0x04	; 4
    2060:	50 f5       	brcc	.+84     	; 0x20b6 <DIO_enuSetPortDirection+0x6c>
		switch (Copy_u8PortId) {
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	91 05       	cpc	r25, r1
    206c:	91 f0       	breq	.+36     	; 0x2092 <DIO_enuSetPortDirection+0x48>
    206e:	82 30       	cpi	r24, 0x02	; 2
    2070:	91 05       	cpc	r25, r1
    2072:	1c f4       	brge	.+6      	; 0x207a <DIO_enuSetPortDirection+0x30>
    2074:	89 2b       	or	r24, r25
    2076:	39 f0       	breq	.+14     	; 0x2086 <DIO_enuSetPortDirection+0x3c>
			break;
		case DIO_u8_PORTD:
			ASSIGN_REG(DDRD_REGISTER, Copy_u8PinDir);
			break;
		default: /* Wrong Port ID */
			break;
    2078:	22 c0       	rjmp	.+68     	; 0x20be <DIO_enuSetPortDirection+0x74>
DIO_tenuErrorStatus DIO_enuSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PinDir) {

	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;

	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
		switch (Copy_u8PortId) {
    207a:	82 30       	cpi	r24, 0x02	; 2
    207c:	91 05       	cpc	r25, r1
    207e:	79 f0       	breq	.+30     	; 0x209e <DIO_enuSetPortDirection+0x54>
    2080:	03 97       	sbiw	r24, 0x03	; 3
    2082:	99 f0       	breq	.+38     	; 0x20aa <DIO_enuSetPortDirection+0x60>
			break;
		case DIO_u8_PORTD:
			ASSIGN_REG(DDRD_REGISTER, Copy_u8PinDir);
			break;
		default: /* Wrong Port ID */
			break;
    2084:	1c c0       	rjmp	.+56     	; 0x20be <DIO_enuSetPortDirection+0x74>
	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;

	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
		switch (Copy_u8PortId) {
		case DIO_u8_PORTA:
			ASSIGN_REG(DDRA_REGISTER, Copy_u8PinDir);
    2086:	8a e3       	ldi	r24, 0x3A	; 58
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	2b 81       	ldd	r18, Y+3	; 0x03
    208c:	fc 01       	movw	r30, r24
    208e:	20 83       	st	Z, r18
			break;
    2090:	16 c0       	rjmp	.+44     	; 0x20be <DIO_enuSetPortDirection+0x74>
		case DIO_u8_PORTB:
			ASSIGN_REG(DDRB_REGISTER, Copy_u8PinDir);
    2092:	87 e3       	ldi	r24, 0x37	; 55
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	2b 81       	ldd	r18, Y+3	; 0x03
    2098:	fc 01       	movw	r30, r24
    209a:	20 83       	st	Z, r18
			break;
    209c:	10 c0       	rjmp	.+32     	; 0x20be <DIO_enuSetPortDirection+0x74>
		case DIO_u8_PORTC:
			ASSIGN_REG(DDRC_REGISTER, Copy_u8PinDir);
    209e:	84 e3       	ldi	r24, 0x34	; 52
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	2b 81       	ldd	r18, Y+3	; 0x03
    20a4:	fc 01       	movw	r30, r24
    20a6:	20 83       	st	Z, r18
			break;
    20a8:	0a c0       	rjmp	.+20     	; 0x20be <DIO_enuSetPortDirection+0x74>
		case DIO_u8_PORTD:
			ASSIGN_REG(DDRD_REGISTER, Copy_u8PinDir);
    20aa:	81 e3       	ldi	r24, 0x31	; 49
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	2b 81       	ldd	r18, Y+3	; 0x03
    20b0:	fc 01       	movw	r30, r24
    20b2:	20 83       	st	Z, r18
			break;
    20b4:	04 c0       	rjmp	.+8      	; 0x20be <DIO_enuSetPortDirection+0x74>
			break;
		}
	}

	else {
		return LOC_enuErrorStatus = DIO_invalidInput;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <DIO_enuSetPortDirection+0x76>
	}

	return LOC_enuErrorStatus;
    20be:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	08 95       	ret

000020cc <DIO_enuSetPortValue>:
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

DIO_tenuErrorStatus DIO_enuSetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortVal) //Output Direction Only
{
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <DIO_enuSetPortValue+0x6>
    20d2:	1f 92       	push	r1
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	8a 83       	std	Y+2, r24	; 0x02
    20da:	6b 83       	std	Y+3, r22	; 0x03
	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;
    20dc:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	84 30       	cpi	r24, 0x04	; 4
    20e2:	50 f5       	brcc	.+84     	; 0x2138 <DIO_enuSetPortValue+0x6c>
		switch (Copy_u8PortId) {
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	91 05       	cpc	r25, r1
    20ee:	91 f0       	breq	.+36     	; 0x2114 <DIO_enuSetPortValue+0x48>
    20f0:	82 30       	cpi	r24, 0x02	; 2
    20f2:	91 05       	cpc	r25, r1
    20f4:	1c f4       	brge	.+6      	; 0x20fc <DIO_enuSetPortValue+0x30>
    20f6:	89 2b       	or	r24, r25
    20f8:	39 f0       	breq	.+14     	; 0x2108 <DIO_enuSetPortValue+0x3c>
			break;
		case DIO_u8_PORTD:
			ASSIGN_REG(PORTD_REGISTER, Copy_u8PortVal);
			break;
		default: /* Wrong Port ID */
			break;
    20fa:	20 c0       	rjmp	.+64     	; 0x213c <DIO_enuSetPortValue+0x70>
DIO_tenuErrorStatus DIO_enuSetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortVal) //Output Direction Only
{
	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;

	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
		switch (Copy_u8PortId) {
    20fc:	82 30       	cpi	r24, 0x02	; 2
    20fe:	91 05       	cpc	r25, r1
    2100:	79 f0       	breq	.+30     	; 0x2120 <DIO_enuSetPortValue+0x54>
    2102:	03 97       	sbiw	r24, 0x03	; 3
    2104:	99 f0       	breq	.+38     	; 0x212c <DIO_enuSetPortValue+0x60>
			break;
		case DIO_u8_PORTD:
			ASSIGN_REG(PORTD_REGISTER, Copy_u8PortVal);
			break;
		default: /* Wrong Port ID */
			break;
    2106:	1a c0       	rjmp	.+52     	; 0x213c <DIO_enuSetPortValue+0x70>
	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;

	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA)) {
		switch (Copy_u8PortId) {
		case DIO_u8_PORTA:
			ASSIGN_REG(PORTA_REGISTER, Copy_u8PortVal);
    2108:	8b e3       	ldi	r24, 0x3B	; 59
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	fc 01       	movw	r30, r24
    2110:	20 83       	st	Z, r18
			break;
    2112:	14 c0       	rjmp	.+40     	; 0x213c <DIO_enuSetPortValue+0x70>
		case DIO_u8_PORTB:
			ASSIGN_REG(PORTB_REGISTER, Copy_u8PortVal);
    2114:	88 e3       	ldi	r24, 0x38	; 56
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	2b 81       	ldd	r18, Y+3	; 0x03
    211a:	fc 01       	movw	r30, r24
    211c:	20 83       	st	Z, r18
			break;
    211e:	0e c0       	rjmp	.+28     	; 0x213c <DIO_enuSetPortValue+0x70>
		case DIO_u8_PORTC:
			ASSIGN_REG(PORTC_REGISTER, Copy_u8PortVal);
    2120:	85 e3       	ldi	r24, 0x35	; 53
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	2b 81       	ldd	r18, Y+3	; 0x03
    2126:	fc 01       	movw	r30, r24
    2128:	20 83       	st	Z, r18
			break;
    212a:	08 c0       	rjmp	.+16     	; 0x213c <DIO_enuSetPortValue+0x70>
		case DIO_u8_PORTD:
			ASSIGN_REG(PORTD_REGISTER, Copy_u8PortVal);
    212c:	82 e3       	ldi	r24, 0x32	; 50
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	2b 81       	ldd	r18, Y+3	; 0x03
    2132:	fc 01       	movw	r30, r24
    2134:	20 83       	st	Z, r18
			break;
    2136:	02 c0       	rjmp	.+4      	; 0x213c <DIO_enuSetPortValue+0x70>
		default: /* Wrong Port ID */
			break;
		}
	} else {
		LOC_enuErrorStatus = DIO_invalidInput;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_enuErrorStatus;
    213c:	89 81       	ldd	r24, Y+1	; 0x01
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <DIO_enuTogglePinValue>:

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

DIO_tenuErrorStatus DIO_enuTogglePinValue(u8 Copy_u8PortId, u8 Copy_u8PinId) {
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	00 d0       	rcall	.+0      	; 0x2150 <DIO_enuTogglePinValue+0x6>
    2150:	1f 92       	push	r1
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	8a 83       	std	Y+2, r24	; 0x02
    2158:	6b 83       	std	Y+3, r22	; 0x03

	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;
    215a:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PortId >= DIO_u8_PORTA)
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	84 30       	cpi	r24, 0x04	; 4
    2160:	08 f0       	brcs	.+2      	; 0x2164 <DIO_enuTogglePinValue+0x1a>
    2162:	6c c0       	rjmp	.+216    	; 0x223c <DIO_enuTogglePinValue+0xf2>
			&& (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0)) {
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	88 30       	cpi	r24, 0x08	; 8
    2168:	08 f0       	brcs	.+2      	; 0x216c <DIO_enuTogglePinValue+0x22>
    216a:	68 c0       	rjmp	.+208    	; 0x223c <DIO_enuTogglePinValue+0xf2>
		switch (Copy_u8PortId) {
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	91 05       	cpc	r25, r1
    2176:	11 f1       	breq	.+68     	; 0x21bc <DIO_enuTogglePinValue+0x72>
    2178:	82 30       	cpi	r24, 0x02	; 2
    217a:	91 05       	cpc	r25, r1
    217c:	1c f4       	brge	.+6      	; 0x2184 <DIO_enuTogglePinValue+0x3a>
    217e:	89 2b       	or	r24, r25
    2180:	41 f0       	breq	.+16     	; 0x2192 <DIO_enuTogglePinValue+0x48>
			break;
		case DIO_u8_PORTD:
			TGL_BIT(PORTD_REGISTER, Copy_u8PinId);
			break;
		default: /* Wrong Port ID */
			break;
    2182:	5b c0       	rjmp	.+182    	; 0x223a <DIO_enuTogglePinValue+0xf0>

	DIO_tenuErrorStatus LOC_enuErrorStatus = DIO_enuOk;

	if ((Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PortId >= DIO_u8_PORTA)
			&& (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0)) {
		switch (Copy_u8PortId) {
    2184:	82 30       	cpi	r24, 0x02	; 2
    2186:	91 05       	cpc	r25, r1
    2188:	71 f1       	breq	.+92     	; 0x21e6 <DIO_enuTogglePinValue+0x9c>
    218a:	03 97       	sbiw	r24, 0x03	; 3
    218c:	09 f4       	brne	.+2      	; 0x2190 <DIO_enuTogglePinValue+0x46>
    218e:	40 c0       	rjmp	.+128    	; 0x2210 <DIO_enuTogglePinValue+0xc6>
			break;
		case DIO_u8_PORTD:
			TGL_BIT(PORTD_REGISTER, Copy_u8PinId);
			break;
		default: /* Wrong Port ID */
			break;
    2190:	54 c0       	rjmp	.+168    	; 0x223a <DIO_enuTogglePinValue+0xf0>

	if ((Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PortId >= DIO_u8_PORTA)
			&& (Copy_u8PinId <= DIO_u8_PIN7 && Copy_u8PinId >= DIO_u8_PIN0)) {
		switch (Copy_u8PortId) {
		case DIO_u8_PORTA:
			TGL_BIT(PORTA_REGISTER, Copy_u8PinId);
    2192:	8b e3       	ldi	r24, 0x3B	; 59
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	2b e3       	ldi	r18, 0x3B	; 59
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	f9 01       	movw	r30, r18
    219c:	20 81       	ld	r18, Z
    219e:	62 2f       	mov	r22, r18
    21a0:	2b 81       	ldd	r18, Y+3	; 0x03
    21a2:	42 2f       	mov	r20, r18
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <DIO_enuTogglePinValue+0x66>
    21ac:	22 0f       	add	r18, r18
    21ae:	33 1f       	adc	r19, r19
    21b0:	4a 95       	dec	r20
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <DIO_enuTogglePinValue+0x62>
    21b4:	26 27       	eor	r18, r22
    21b6:	fc 01       	movw	r30, r24
    21b8:	20 83       	st	Z, r18
			break;
    21ba:	3f c0       	rjmp	.+126    	; 0x223a <DIO_enuTogglePinValue+0xf0>
		case DIO_u8_PORTB:
			TGL_BIT(PORTB_REGISTER, Copy_u8PinId);
    21bc:	88 e3       	ldi	r24, 0x38	; 56
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	28 e3       	ldi	r18, 0x38	; 56
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	f9 01       	movw	r30, r18
    21c6:	20 81       	ld	r18, Z
    21c8:	62 2f       	mov	r22, r18
    21ca:	2b 81       	ldd	r18, Y+3	; 0x03
    21cc:	42 2f       	mov	r20, r18
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	21 e0       	ldi	r18, 0x01	; 1
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <DIO_enuTogglePinValue+0x90>
    21d6:	22 0f       	add	r18, r18
    21d8:	33 1f       	adc	r19, r19
    21da:	4a 95       	dec	r20
    21dc:	e2 f7       	brpl	.-8      	; 0x21d6 <DIO_enuTogglePinValue+0x8c>
    21de:	26 27       	eor	r18, r22
    21e0:	fc 01       	movw	r30, r24
    21e2:	20 83       	st	Z, r18
			break;
    21e4:	2a c0       	rjmp	.+84     	; 0x223a <DIO_enuTogglePinValue+0xf0>
		case DIO_u8_PORTC:
			TGL_BIT(PORTC_REGISTER, Copy_u8PinId);
    21e6:	85 e3       	ldi	r24, 0x35	; 53
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	25 e3       	ldi	r18, 0x35	; 53
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	f9 01       	movw	r30, r18
    21f0:	20 81       	ld	r18, Z
    21f2:	62 2f       	mov	r22, r18
    21f4:	2b 81       	ldd	r18, Y+3	; 0x03
    21f6:	42 2f       	mov	r20, r18
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	21 e0       	ldi	r18, 0x01	; 1
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <DIO_enuTogglePinValue+0xba>
    2200:	22 0f       	add	r18, r18
    2202:	33 1f       	adc	r19, r19
    2204:	4a 95       	dec	r20
    2206:	e2 f7       	brpl	.-8      	; 0x2200 <DIO_enuTogglePinValue+0xb6>
    2208:	26 27       	eor	r18, r22
    220a:	fc 01       	movw	r30, r24
    220c:	20 83       	st	Z, r18
			break;
    220e:	15 c0       	rjmp	.+42     	; 0x223a <DIO_enuTogglePinValue+0xf0>
		case DIO_u8_PORTD:
			TGL_BIT(PORTD_REGISTER, Copy_u8PinId);
    2210:	82 e3       	ldi	r24, 0x32	; 50
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	22 e3       	ldi	r18, 0x32	; 50
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	f9 01       	movw	r30, r18
    221a:	20 81       	ld	r18, Z
    221c:	62 2f       	mov	r22, r18
    221e:	2b 81       	ldd	r18, Y+3	; 0x03
    2220:	42 2f       	mov	r20, r18
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	21 e0       	ldi	r18, 0x01	; 1
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	02 c0       	rjmp	.+4      	; 0x222e <DIO_enuTogglePinValue+0xe4>
    222a:	22 0f       	add	r18, r18
    222c:	33 1f       	adc	r19, r19
    222e:	4a 95       	dec	r20
    2230:	e2 f7       	brpl	.-8      	; 0x222a <DIO_enuTogglePinValue+0xe0>
    2232:	26 27       	eor	r18, r22
    2234:	fc 01       	movw	r30, r24
    2236:	20 83       	st	Z, r18
			break;
    2238:	00 00       	nop
		default: /* Wrong Port ID */
			break;
		}
	}
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <DIO_enuTogglePinValue+0xf6>

	else {
		LOC_enuErrorStatus = DIO_invalidInput;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_enuErrorStatus;
    2240:	89 81       	ldd	r24, Y+1	; 0x01
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	08 95       	ret

0000224e <ADC_Read>:
#include "../../../INCLUDE/MCAL/ADC/ADC_prv.h"
#include "../../../INCLUDE/MCAL/ADC/ADC_cfg.h"
#include "../../../SERVICES/BIT_UTILIS.h"
#include "../../../SERVICES/STD_TYPES.h"

u16 ADC_Read(void) {
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	00 d0       	rcall	.+0      	; 0x2254 <ADC_Read+0x6>
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62

	u16 LOC_Result = 0;
    2258:	1a 82       	std	Y+2, r1	; 0x02
    225a:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(ADCSRA, ADSC);
    225c:	86 e2       	ldi	r24, 0x26	; 38
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	26 e2       	ldi	r18, 0x26	; 38
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	f9 01       	movw	r30, r18
    2266:	20 81       	ld	r18, Z
    2268:	20 64       	ori	r18, 0x40	; 64
    226a:	fc 01       	movw	r30, r24
    226c:	20 83       	st	Z, r18
	while (GET_BIT(ADCSRA, ADIF) == 0)
    226e:	00 00       	nop
    2270:	86 e2       	ldi	r24, 0x26	; 38
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	fc 01       	movw	r30, r24
    2276:	80 81       	ld	r24, Z
    2278:	82 95       	swap	r24
    227a:	8f 70       	andi	r24, 0x0F	; 15
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	81 70       	andi	r24, 0x01	; 1
    2282:	99 27       	eor	r25, r25
    2284:	89 2b       	or	r24, r25
    2286:	a1 f3       	breq	.-24     	; 0x2270 <ADC_Read+0x22>
		;
#if ADC_Adjustment == ADC_Left_Adjustment
	LOC_Result = ADCH;
	#elif ADC_Adjustment == ADC_Right_Adjustment
	LOC_Result = ADCL | (ADCH << 8);
    2288:	84 e2       	ldi	r24, 0x24	; 36
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	fc 01       	movw	r30, r24
    228e:	80 81       	ld	r24, Z
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	85 e2       	ldi	r24, 0x25	; 37
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	fc 01       	movw	r30, r24
    229a:	80 81       	ld	r24, Z
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	98 2f       	mov	r25, r24
    22a2:	88 27       	eor	r24, r24
    22a4:	82 2b       	or	r24, r18
    22a6:	93 2b       	or	r25, r19
    22a8:	9a 83       	std	Y+2, r25	; 0x02
    22aa:	89 83       	std	Y+1, r24	; 0x01
#endif
	return LOC_Result;
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	08 95       	ret

000022ba <ADC_voidInit>:

void ADC_voidInit(void) {
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADEN);
    22c2:	86 e2       	ldi	r24, 0x26	; 38
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	26 e2       	ldi	r18, 0x26	; 38
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	f9 01       	movw	r30, r18
    22cc:	20 81       	ld	r18, Z
    22ce:	20 68       	ori	r18, 0x80	; 128
    22d0:	fc 01       	movw	r30, r24
    22d2:	20 83       	st	Z, r18
	SET_BIT(ADCSRA, ADIE);
    22d4:	86 e2       	ldi	r24, 0x26	; 38
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	26 e2       	ldi	r18, 0x26	; 38
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	f9 01       	movw	r30, r18
    22de:	20 81       	ld	r18, Z
    22e0:	28 60       	ori	r18, 0x08	; 8
    22e2:	fc 01       	movw	r30, r24
    22e4:	20 83       	st	Z, r18

#if ADC_Analog_Channel_and_Gain_Selection == ADC_Channel_0
	ASSIGN_REG(ADMUX, ADC_Channel_0);
    22e6:	87 e2       	ldi	r24, 0x27	; 39
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	fc 01       	movw	r30, r24
    22ec:	10 82       	st	Z, r1
#elif ADC_Analog_Channel_and_Gain_Selection == ADC_Channel_7_Channel_1_1x_Gain
	ASSIGN_REG(ADMUX, ADC_Channel_7_Channel_1_1x_Gain);
#endif

#if ADC_Voltage_Reference == ADC_Voltage_Reference_External_Capacitor
	CLR_BIT(ADMUX, REFS1);
    22ee:	87 e2       	ldi	r24, 0x27	; 39
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	27 e2       	ldi	r18, 0x27	; 39
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	f9 01       	movw	r30, r18
    22f8:	20 81       	ld	r18, Z
    22fa:	2f 77       	andi	r18, 0x7F	; 127
    22fc:	fc 01       	movw	r30, r24
    22fe:	20 83       	st	Z, r18
	SET_BIT(ADMUX, REFS0);
    2300:	87 e2       	ldi	r24, 0x27	; 39
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	27 e2       	ldi	r18, 0x27	; 39
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	f9 01       	movw	r30, r18
    230a:	20 81       	ld	r18, Z
    230c:	20 64       	ori	r18, 0x40	; 64
    230e:	fc 01       	movw	r30, r24
    2310:	20 83       	st	Z, r18
	SET_BIT(ADMUX, REFS0);

#endif

#if ADC_AUTO_TRIGGER == ADC_Single_Conversion
	CLR_BIT(ADCSRA, ADATE);
    2312:	86 e2       	ldi	r24, 0x26	; 38
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	26 e2       	ldi	r18, 0x26	; 38
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	f9 01       	movw	r30, r18
    231c:	20 81       	ld	r18, Z
    231e:	2f 7d       	andi	r18, 0xDF	; 223
    2320:	fc 01       	movw	r30, r24
    2322:	20 83       	st	Z, r18
	SET_BIT(SFIOR,ADTS0);
#endif
#endif

#if ADC_Prescaler_Factor >= ADC_Prescaler_Factor_2 && ADC_Prescaler_Factor <= ADC_Prescaler_Factor_128
	ADCSRA |= ADC_Prescaler_Factor;
    2324:	86 e2       	ldi	r24, 0x26	; 38
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	26 e2       	ldi	r18, 0x26	; 38
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	f9 01       	movw	r30, r18
    232e:	20 81       	ld	r18, Z
    2330:	27 60       	ori	r18, 0x07	; 7
    2332:	fc 01       	movw	r30, r24
    2334:	20 83       	st	Z, r18
#else
	#warning"wrong Prescaler"
#endif

}
    2336:	00 00       	nop
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	08 95       	ret

0000233e <ADC_voidDisable>:

void ADC_voidDisable(void) {
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADEN);
    2346:	86 e2       	ldi	r24, 0x26	; 38
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	26 e2       	ldi	r18, 0x26	; 38
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	f9 01       	movw	r30, r18
    2350:	20 81       	ld	r18, Z
    2352:	2f 77       	andi	r18, 0x7F	; 127
    2354:	fc 01       	movw	r30, r24
    2356:	20 83       	st	Z, r18
}
    2358:	00 00       	nop
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	08 95       	ret

00002360 <Sev_SegINIT>:
0b01111111, /* 8 */
0b01101111, /* 9 */
0b01111001 /* E */
};

Sev_Seg_tenuErrorStatus Sev_SegINIT(Sev_Seg_tSevSeg sev) {
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	00 d0       	rcall	.+0      	; 0x2366 <Sev_SegINIT+0x6>
    2366:	1f 92       	push	r1
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	9b 83       	std	Y+3, r25	; 0x03
    236e:	8a 83       	std	Y+2, r24	; 0x02
	Sev_Seg_tenuErrorStatus LOC_enuErrorStatus = Sev_Seg_enuOk;
    2370:	19 82       	std	Y+1, r1	; 0x01

	if ((sev.port >= DIO_u8_PORTA && sev.port <= DIO_u8_PORTD)) {
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	84 30       	cpi	r24, 0x04	; 4
    2376:	28 f4       	brcc	.+10     	; 0x2382 <Sev_SegINIT+0x22>
		DIO_enuSetPortDirection(sev.port, DIO_u8_PORT_OUTPUT);
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	6f ef       	ldi	r22, 0xFF	; 255
    237c:	0e 94 25 10 	call	0x204a	; 0x204a <DIO_enuSetPortDirection>
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <Sev_SegINIT+0x26>
	} else
		LOC_enuErrorStatus = Sev_Seg_invalidInput;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	89 83       	std	Y+1, r24	; 0x01

	return LOC_enuErrorStatus;
    2386:	89 81       	ldd	r24, Y+1	; 0x01
}
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <Sev_Seg_enuShowNum>:

Sev_Seg_tenuErrorStatus Sev_Seg_enuShowNum(u8 Copy_u8numToShow,
		Sev_Seg_tSevSeg sev) {
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	00 d0       	rcall	.+0      	; 0x239a <Sev_Seg_enuShowNum+0x6>
    239a:	00 d0       	rcall	.+0      	; 0x239c <Sev_Seg_enuShowNum+0x8>
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	8a 83       	std	Y+2, r24	; 0x02
    23a2:	7c 83       	std	Y+4, r23	; 0x04
    23a4:	6b 83       	std	Y+3, r22	; 0x03
	Sev_Seg_tenuErrorStatus LOC_enuErrorStatus = Sev_Seg_enuOk;
    23a6:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_u8numToShow < 10 && Copy_u8numToShow >= 0)
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	8a 30       	cpi	r24, 0x0A	; 10
    23ac:	60 f5       	brcc	.+88     	; 0x2406 <Sev_Seg_enuShowNum+0x72>
			&& (sev.port >= DIO_u8_PORTA && sev.port <= DIO_u8_PORTD)) {
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	84 30       	cpi	r24, 0x04	; 4
    23b2:	48 f5       	brcc	.+82     	; 0x2406 <Sev_Seg_enuShowNum+0x72>
		switch (sev.com) {
    23b4:	8c 81       	ldd	r24, Y+4	; 0x04
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	19 f0       	breq	.+6      	; 0x23c4 <Sev_Seg_enuShowNum+0x30>
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	69 f0       	breq	.+26     	; 0x23dc <Sev_Seg_enuShowNum+0x48>
    23c2:	1d c0       	rjmp	.+58     	; 0x23fe <Sev_Seg_enuShowNum+0x6a>
		case Sev_commonGND:
			DIO_enuSetPortValue(sev.port,
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	88 2f       	mov	r24, r24
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	80 5a       	subi	r24, 0xA0	; 160
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	fc 01       	movw	r30, r24
    23d0:	90 81       	ld	r25, Z
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	69 2f       	mov	r22, r25
    23d6:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
					Sev_Seg_Arr_DecToSeg[Copy_u8numToShow]);
			break;
    23da:	14 c0       	rjmp	.+40     	; 0x2404 <Sev_Seg_enuShowNum+0x70>

		case Sev_commonVCC:
			DIO_enuSetPortValue(sev.port,
					!Sev_Seg_Arr_DecToSeg[Copy_u8numToShow]);
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	80 5a       	subi	r24, 0xA0	; 160
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	fc 01       	movw	r30, r24
    23e8:	90 81       	ld	r25, Z
			DIO_enuSetPortValue(sev.port,
					Sev_Seg_Arr_DecToSeg[Copy_u8numToShow]);
			break;

		case Sev_commonVCC:
			DIO_enuSetPortValue(sev.port,
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	99 23       	and	r25, r25
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <Sev_Seg_enuShowNum+0x5e>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	98 2f       	mov	r25, r24
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	69 2f       	mov	r22, r25
    23f8:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
					!Sev_Seg_Arr_DecToSeg[Copy_u8numToShow]);
			break;
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <Sev_Seg_enuShowNum+0x70>

		default:
			LOC_enuErrorStatus = Sev_Seg_invalidInput;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	89 83       	std	Y+1, r24	; 0x01
		}
	} else {
    2402:	09 c0       	rjmp	.+18     	; 0x2416 <Sev_Seg_enuShowNum+0x82>
    2404:	08 c0       	rjmp	.+16     	; 0x2416 <Sev_Seg_enuShowNum+0x82>
		DIO_enuSetPortValue(sev.port,
    2406:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	69 2f       	mov	r22, r25
    240e:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
				Sev_Seg_Arr_DecToSeg[Sev_Seg_ErrorStatus]);
		LOC_enuErrorStatus = Sev_Seg_invalidInput;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_enuErrorStatus;
    2416:	89 81       	ldd	r24, Y+1	; 0x01
}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	08 95       	ret

00002426 <Sev_Seg_enuCountUpToNum>:

Sev_Seg_tenuErrorStatus Sev_Seg_enuCountUpToNum(u8 Copy_u8numToShow,
		u16 Copy_u16Delay, Sev_Seg_tSevSeg sev) {
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	a3 97       	sbiw	r28, 0x23	; 35
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	8f 8f       	std	Y+31, r24	; 0x1f
    243c:	79 a3       	std	Y+33, r23	; 0x21
    243e:	68 a3       	std	Y+32, r22	; 0x20
    2440:	5b a3       	std	Y+35, r21	; 0x23
    2442:	4a a3       	std	Y+34, r20	; 0x22
	Sev_Seg_tenuErrorStatus LOC_enuErrorStatus = Sev_Seg_enuOk;
    2444:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8numToShow <= 9 && Copy_u8numToShow >= 0)
    2446:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2448:	8a 30       	cpi	r24, 0x0A	; 10
    244a:	08 f0       	brcs	.+2      	; 0x244e <Sev_Seg_enuCountUpToNum+0x28>
    244c:	34 c1       	rjmp	.+616    	; 0x26b6 <Sev_Seg_enuCountUpToNum+0x290>
			&& (sev.port >= DIO_u8_PORTA && sev.port <= DIO_u8_PORTD)) {
    244e:	8a a1       	ldd	r24, Y+34	; 0x22
    2450:	84 30       	cpi	r24, 0x04	; 4
    2452:	08 f0       	brcs	.+2      	; 0x2456 <Sev_Seg_enuCountUpToNum+0x30>
    2454:	30 c1       	rjmp	.+608    	; 0x26b6 <Sev_Seg_enuCountUpToNum+0x290>
		switch (sev.com) {
    2456:	8b a1       	ldd	r24, Y+35	; 0x23
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	21 f0       	breq	.+8      	; 0x2468 <Sev_Seg_enuCountUpToNum+0x42>
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	09 f4       	brne	.+2      	; 0x2466 <Sev_Seg_enuCountUpToNum+0x40>
    2464:	90 c0       	rjmp	.+288    	; 0x2586 <Sev_Seg_enuCountUpToNum+0x160>
    2466:	23 c1       	rjmp	.+582    	; 0x26ae <Sev_Seg_enuCountUpToNum+0x288>
		u8 u8Counter = 0;
	case Sev_commonGND:
		u8Counter = 0;
    2468:	1a 82       	std	Y+2, r1	; 0x02
		while (u8Counter <= Copy_u8numToShow) {
    246a:	87 c0       	rjmp	.+270    	; 0x257a <Sev_Seg_enuCountUpToNum+0x154>
			DIO_enuSetPortValue(sev.port, Sev_Seg_Arr_DecToSeg[u8Counter]);
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	80 5a       	subi	r24, 0xA0	; 160
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	fc 01       	movw	r30, r24
    2478:	90 81       	ld	r25, Z
    247a:	8a a1       	ldd	r24, Y+34	; 0x22
    247c:	69 2f       	mov	r22, r25
    247e:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
			_delay_ms(Copy_u16Delay);
    2482:	88 a1       	ldd	r24, Y+32	; 0x20
    2484:	99 a1       	ldd	r25, Y+33	; 0x21
    2486:	cc 01       	movw	r24, r24
    2488:	a0 e0       	ldi	r26, 0x00	; 0
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__floatunsisf>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8f 83       	std	Y+7, r24	; 0x07
    249a:	98 87       	std	Y+8, r25	; 0x08
    249c:	a9 87       	std	Y+9, r26	; 0x09
    249e:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4a ef       	ldi	r20, 0xFA	; 250
    24a6:	54 e4       	ldi	r21, 0x44	; 68
    24a8:	6f 81       	ldd	r22, Y+7	; 0x07
    24aa:	78 85       	ldd	r23, Y+8	; 0x08
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8b 87       	std	Y+11, r24	; 0x0b
    24ba:	9c 87       	std	Y+12, r25	; 0x0c
    24bc:	ad 87       	std	Y+13, r26	; 0x0d
    24be:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e8       	ldi	r20, 0x80	; 128
    24c6:	5f e3       	ldi	r21, 0x3F	; 63
    24c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    24cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d0:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <Sev_Seg_enuCountUpToNum+0xbc>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	98 8b       	std	Y+16, r25	; 0x10
    24de:	8f 87       	std	Y+15, r24	; 0x0f
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <Sev_Seg_enuCountUpToNum+0x13a>
	else if (__tmp > 65535)
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	3f ef       	ldi	r19, 0xFF	; 255
    24e6:	4f e7       	ldi	r20, 0x7F	; 127
    24e8:	57 e4       	ldi	r21, 0x47	; 71
    24ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f2:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <Sev_Seg_enuCountUpToNum+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e2       	ldi	r20, 0x20	; 32
    2500:	51 e4       	ldi	r21, 0x41	; 65
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	98 8b       	std	Y+16, r25	; 0x10
    2520:	8f 87       	std	Y+15, r24	; 0x0f
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <Sev_Seg_enuCountUpToNum+0x11c>
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9a 8b       	std	Y+18, r25	; 0x12
    252a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    252c:	89 89       	ldd	r24, Y+17	; 0x11
    252e:	9a 89       	ldd	r25, Y+18	; 0x12
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <Sev_Seg_enuCountUpToNum+0x10a>
    2534:	9a 8b       	std	Y+18, r25	; 0x12
    2536:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	8f 85       	ldd	r24, Y+15	; 0x0f
    253a:	98 89       	ldd	r25, Y+16	; 0x10
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	98 8b       	std	Y+16, r25	; 0x10
    2540:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	8f 85       	ldd	r24, Y+15	; 0x0f
    2544:	98 89       	ldd	r25, Y+16	; 0x10
    2546:	89 2b       	or	r24, r25
    2548:	69 f7       	brne	.-38     	; 0x2524 <Sev_Seg_enuCountUpToNum+0xfe>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <Sev_Seg_enuCountUpToNum+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6b 85       	ldd	r22, Y+11	; 0x0b
    254e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2550:	8d 85       	ldd	r24, Y+13	; 0x0d
    2552:	9e 85       	ldd	r25, Y+14	; 0x0e
    2554:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	98 8b       	std	Y+16, r25	; 0x10
    255e:	8f 87       	std	Y+15, r24	; 0x0f
    2560:	8f 85       	ldd	r24, Y+15	; 0x0f
    2562:	98 89       	ldd	r25, Y+16	; 0x10
    2564:	9c 8b       	std	Y+20, r25	; 0x14
    2566:	8b 8b       	std	Y+19, r24	; 0x13
    2568:	8b 89       	ldd	r24, Y+19	; 0x13
    256a:	9c 89       	ldd	r25, Y+20	; 0x14
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <Sev_Seg_enuCountUpToNum+0x146>
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
			u8Counter++;
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	8f 5f       	subi	r24, 0xFF	; 255
    2578:	8a 83       	std	Y+2, r24	; 0x02
			&& (sev.port >= DIO_u8_PORTA && sev.port <= DIO_u8_PORTD)) {
		switch (sev.com) {
		u8 u8Counter = 0;
	case Sev_commonGND:
		u8Counter = 0;
		while (u8Counter <= Copy_u8numToShow) {
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    257e:	89 17       	cp	r24, r25
    2580:	08 f0       	brcs	.+2      	; 0x2584 <Sev_Seg_enuCountUpToNum+0x15e>
    2582:	74 cf       	rjmp	.-280    	; 0x246c <Sev_Seg_enuCountUpToNum+0x46>
			DIO_enuSetPortValue(sev.port, Sev_Seg_Arr_DecToSeg[u8Counter]);
			_delay_ms(Copy_u16Delay);
			u8Counter++;
		}
		break;
    2584:	97 c0       	rjmp	.+302    	; 0x26b4 <Sev_Seg_enuCountUpToNum+0x28e>

	case Sev_commonVCC:
		u8Counter = 0;
    2586:	1a 82       	std	Y+2, r1	; 0x02
		while (u8Counter <= Copy_u8numToShow) {
    2588:	8c c0       	rjmp	.+280    	; 0x26a2 <Sev_Seg_enuCountUpToNum+0x27c>
			DIO_enuSetPortValue(sev.port, !Sev_Seg_Arr_DecToSeg[u8Counter]);
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	80 5a       	subi	r24, 0xA0	; 160
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	fc 01       	movw	r30, r24
    2596:	90 81       	ld	r25, Z
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	99 23       	and	r25, r25
    259c:	09 f0       	breq	.+2      	; 0x25a0 <Sev_Seg_enuCountUpToNum+0x17a>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	98 2f       	mov	r25, r24
    25a2:	8a a1       	ldd	r24, Y+34	; 0x22
    25a4:	69 2f       	mov	r22, r25
    25a6:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
			_delay_ms(Copy_u16Delay);
    25aa:	88 a1       	ldd	r24, Y+32	; 0x20
    25ac:	99 a1       	ldd	r25, Y+33	; 0x21
    25ae:	cc 01       	movw	r24, r24
    25b0:	a0 e0       	ldi	r26, 0x00	; 0
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__floatunsisf>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	8b 83       	std	Y+3, r24	; 0x03
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	ad 83       	std	Y+5, r26	; 0x05
    25c6:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4a ef       	ldi	r20, 0xFA	; 250
    25ce:	54 e4       	ldi	r21, 0x44	; 68
    25d0:	6b 81       	ldd	r22, Y+3	; 0x03
    25d2:	7c 81       	ldd	r23, Y+4	; 0x04
    25d4:	8d 81       	ldd	r24, Y+5	; 0x05
    25d6:	9e 81       	ldd	r25, Y+6	; 0x06
    25d8:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	8d 8b       	std	Y+21, r24	; 0x15
    25e2:	9e 8b       	std	Y+22, r25	; 0x16
    25e4:	af 8b       	std	Y+23, r26	; 0x17
    25e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e8       	ldi	r20, 0x80	; 128
    25ee:	5f e3       	ldi	r21, 0x3F	; 63
    25f0:	6d 89       	ldd	r22, Y+21	; 0x15
    25f2:	7e 89       	ldd	r23, Y+22	; 0x16
    25f4:	8f 89       	ldd	r24, Y+23	; 0x17
    25f6:	98 8d       	ldd	r25, Y+24	; 0x18
    25f8:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    25fc:	88 23       	and	r24, r24
    25fe:	2c f4       	brge	.+10     	; 0x260a <Sev_Seg_enuCountUpToNum+0x1e4>
		__ticks = 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9a 8f       	std	Y+26, r25	; 0x1a
    2606:	89 8f       	std	Y+25, r24	; 0x19
    2608:	3f c0       	rjmp	.+126    	; 0x2688 <Sev_Seg_enuCountUpToNum+0x262>
	else if (__tmp > 65535)
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	57 e4       	ldi	r21, 0x47	; 71
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    261e:	18 16       	cp	r1, r24
    2620:	4c f5       	brge	.+82     	; 0x2674 <Sev_Seg_enuCountUpToNum+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e2       	ldi	r20, 0x20	; 32
    2628:	51 e4       	ldi	r21, 0x41	; 65
    262a:	6b 81       	ldd	r22, Y+3	; 0x03
    262c:	7c 81       	ldd	r23, Y+4	; 0x04
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9a 8f       	std	Y+26, r25	; 0x1a
    2648:	89 8f       	std	Y+25, r24	; 0x19
    264a:	0f c0       	rjmp	.+30     	; 0x266a <Sev_Seg_enuCountUpToNum+0x244>
    264c:	88 ec       	ldi	r24, 0xC8	; 200
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9c 8f       	std	Y+28, r25	; 0x1c
    2652:	8b 8f       	std	Y+27, r24	; 0x1b
    2654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <Sev_Seg_enuCountUpToNum+0x232>
    265c:	9c 8f       	std	Y+28, r25	; 0x1c
    265e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2660:	89 8d       	ldd	r24, Y+25	; 0x19
    2662:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	9a 8f       	std	Y+26, r25	; 0x1a
    2668:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266a:	89 8d       	ldd	r24, Y+25	; 0x19
    266c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    266e:	89 2b       	or	r24, r25
    2670:	69 f7       	brne	.-38     	; 0x264c <Sev_Seg_enuCountUpToNum+0x226>
    2672:	14 c0       	rjmp	.+40     	; 0x269c <Sev_Seg_enuCountUpToNum+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2674:	6d 89       	ldd	r22, Y+21	; 0x15
    2676:	7e 89       	ldd	r23, Y+22	; 0x16
    2678:	8f 89       	ldd	r24, Y+23	; 0x17
    267a:	98 8d       	ldd	r25, Y+24	; 0x18
    267c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9a 8f       	std	Y+26, r25	; 0x1a
    2686:	89 8f       	std	Y+25, r24	; 0x19
    2688:	89 8d       	ldd	r24, Y+25	; 0x19
    268a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    268c:	9e 8f       	std	Y+30, r25	; 0x1e
    268e:	8d 8f       	std	Y+29, r24	; 0x1d
    2690:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2692:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <Sev_Seg_enuCountUpToNum+0x26e>
    2698:	9e 8f       	std	Y+30, r25	; 0x1e
    269a:	8d 8f       	std	Y+29, r24	; 0x1d
			u8Counter++;
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	8f 5f       	subi	r24, 0xFF	; 255
    26a0:	8a 83       	std	Y+2, r24	; 0x02
		}
		break;

	case Sev_commonVCC:
		u8Counter = 0;
		while (u8Counter <= Copy_u8numToShow) {
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a6:	89 17       	cp	r24, r25
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <Sev_Seg_enuCountUpToNum+0x286>
    26aa:	6f cf       	rjmp	.-290    	; 0x258a <Sev_Seg_enuCountUpToNum+0x164>
			DIO_enuSetPortValue(sev.port, !Sev_Seg_Arr_DecToSeg[u8Counter]);
			_delay_ms(Copy_u16Delay);
			u8Counter++;
		}
		break;
    26ac:	03 c0       	rjmp	.+6      	; 0x26b4 <Sev_Seg_enuCountUpToNum+0x28e>

	default:
		LOC_enuErrorStatus = Sev_Seg_invalidInput;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	89 83       	std	Y+1, r24	; 0x01
		}
	} else {
    26b2:	09 c0       	rjmp	.+18     	; 0x26c6 <Sev_Seg_enuCountUpToNum+0x2a0>
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <Sev_Seg_enuCountUpToNum+0x2a0>
		DIO_enuSetPortValue(sev.port,
    26b6:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    26ba:	8a a1       	ldd	r24, Y+34	; 0x22
    26bc:	69 2f       	mov	r22, r25
    26be:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
				Sev_Seg_Arr_DecToSeg[Sev_Seg_ErrorStatus]); //Shows 'E' on the Sev-seg
		LOC_enuErrorStatus = Sev_Seg_invalidInput;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_enuErrorStatus;
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    26c8:	a3 96       	adiw	r28, 0x23	; 35
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	08 95       	ret

000026da <Sev_Seg_enuCountDownToZero>:

Sev_Seg_tenuErrorStatus Sev_Seg_enuCountDownToZero(u8 Copy_u8numToShow,
		u16 Copy_u16Delay, Sev_Seg_tSevSeg sev) {
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	a3 97       	sbiw	r28, 0x23	; 35
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	8f 8f       	std	Y+31, r24	; 0x1f
    26f0:	79 a3       	std	Y+33, r23	; 0x21
    26f2:	68 a3       	std	Y+32, r22	; 0x20
    26f4:	5b a3       	std	Y+35, r21	; 0x23
    26f6:	4a a3       	std	Y+34, r20	; 0x22
	Sev_Seg_tenuErrorStatus LOC_enuErrorStatus = Sev_Seg_enuOk;
    26f8:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8numToShow <= 9 && Copy_u8numToShow >= 0)
    26fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26fc:	8a 30       	cpi	r24, 0x0A	; 10
    26fe:	08 f0       	brcs	.+2      	; 0x2702 <Sev_Seg_enuCountDownToZero+0x28>
    2700:	36 c1       	rjmp	.+620    	; 0x296e <Sev_Seg_enuCountDownToZero+0x294>
			&& (sev.port >= DIO_u8_PORTA && sev.port <= DIO_u8_PORTD)) {
    2702:	8a a1       	ldd	r24, Y+34	; 0x22
    2704:	84 30       	cpi	r24, 0x04	; 4
    2706:	08 f0       	brcs	.+2      	; 0x270a <Sev_Seg_enuCountDownToZero+0x30>
    2708:	32 c1       	rjmp	.+612    	; 0x296e <Sev_Seg_enuCountDownToZero+0x294>
		switch (sev.com) {
    270a:	8b a1       	ldd	r24, Y+35	; 0x23
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	21 f0       	breq	.+8      	; 0x271c <Sev_Seg_enuCountDownToZero+0x42>
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	09 f4       	brne	.+2      	; 0x271a <Sev_Seg_enuCountDownToZero+0x40>
    2718:	91 c0       	rjmp	.+290    	; 0x283c <Sev_Seg_enuCountDownToZero+0x162>
    271a:	25 c1       	rjmp	.+586    	; 0x2966 <Sev_Seg_enuCountDownToZero+0x28c>
		s8 s8Counter;
	case Sev_commonGND:
		s8Counter = Copy_u8numToShow;
    271c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    271e:	8a 83       	std	Y+2, r24	; 0x02
		while (s8Counter >= 0) {
    2720:	88 c0       	rjmp	.+272    	; 0x2832 <Sev_Seg_enuCountDownToZero+0x158>
			DIO_enuSetPortValue(sev.port, Sev_Seg_Arr_DecToSeg[s8Counter]);
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	08 2e       	mov	r0, r24
    2726:	00 0c       	add	r0, r0
    2728:	99 0b       	sbc	r25, r25
    272a:	80 5a       	subi	r24, 0xA0	; 160
    272c:	9f 4f       	sbci	r25, 0xFF	; 255
    272e:	fc 01       	movw	r30, r24
    2730:	90 81       	ld	r25, Z
    2732:	8a a1       	ldd	r24, Y+34	; 0x22
    2734:	69 2f       	mov	r22, r25
    2736:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
			_delay_ms(Copy_u16Delay);
    273a:	88 a1       	ldd	r24, Y+32	; 0x20
    273c:	99 a1       	ldd	r25, Y+33	; 0x21
    273e:	cc 01       	movw	r24, r24
    2740:	a0 e0       	ldi	r26, 0x00	; 0
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__floatunsisf>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	8f 83       	std	Y+7, r24	; 0x07
    2752:	98 87       	std	Y+8, r25	; 0x08
    2754:	a9 87       	std	Y+9, r26	; 0x09
    2756:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a ef       	ldi	r20, 0xFA	; 250
    275e:	54 e4       	ldi	r21, 0x44	; 68
    2760:	6f 81       	ldd	r22, Y+7	; 0x07
    2762:	78 85       	ldd	r23, Y+8	; 0x08
    2764:	89 85       	ldd	r24, Y+9	; 0x09
    2766:	9a 85       	ldd	r25, Y+10	; 0x0a
    2768:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8b 87       	std	Y+11, r24	; 0x0b
    2772:	9c 87       	std	Y+12, r25	; 0x0c
    2774:	ad 87       	std	Y+13, r26	; 0x0d
    2776:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	6b 85       	ldd	r22, Y+11	; 0x0b
    2782:	7c 85       	ldd	r23, Y+12	; 0x0c
    2784:	8d 85       	ldd	r24, Y+13	; 0x0d
    2786:	9e 85       	ldd	r25, Y+14	; 0x0e
    2788:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <Sev_Seg_enuCountDownToZero+0xc0>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	98 8b       	std	Y+16, r25	; 0x10
    2796:	8f 87       	std	Y+15, r24	; 0x0f
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <Sev_Seg_enuCountDownToZero+0x13e>
	else if (__tmp > 65535)
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27aa:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <Sev_Seg_enuCountDownToZero+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	51 e4       	ldi	r21, 0x41	; 65
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	98 8b       	std	Y+16, r25	; 0x10
    27d8:	8f 87       	std	Y+15, r24	; 0x0f
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <Sev_Seg_enuCountDownToZero+0x120>
    27dc:	88 ec       	ldi	r24, 0xC8	; 200
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9a 8b       	std	Y+18, r25	; 0x12
    27e2:	89 8b       	std	Y+17, r24	; 0x11
    27e4:	89 89       	ldd	r24, Y+17	; 0x11
    27e6:	9a 89       	ldd	r25, Y+18	; 0x12
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <Sev_Seg_enuCountDownToZero+0x10e>
    27ec:	9a 8b       	std	Y+18, r25	; 0x12
    27ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f2:	98 89       	ldd	r25, Y+16	; 0x10
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	98 8b       	std	Y+16, r25	; 0x10
    27f8:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    27fc:	98 89       	ldd	r25, Y+16	; 0x10
    27fe:	89 2b       	or	r24, r25
    2800:	69 f7       	brne	.-38     	; 0x27dc <Sev_Seg_enuCountDownToZero+0x102>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <Sev_Seg_enuCountDownToZero+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6b 85       	ldd	r22, Y+11	; 0x0b
    2806:	7c 85       	ldd	r23, Y+12	; 0x0c
    2808:	8d 85       	ldd	r24, Y+13	; 0x0d
    280a:	9e 85       	ldd	r25, Y+14	; 0x0e
    280c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	98 8b       	std	Y+16, r25	; 0x10
    2816:	8f 87       	std	Y+15, r24	; 0x0f
    2818:	8f 85       	ldd	r24, Y+15	; 0x0f
    281a:	98 89       	ldd	r25, Y+16	; 0x10
    281c:	9c 8b       	std	Y+20, r25	; 0x14
    281e:	8b 8b       	std	Y+19, r24	; 0x13
    2820:	8b 89       	ldd	r24, Y+19	; 0x13
    2822:	9c 89       	ldd	r25, Y+20	; 0x14
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <Sev_Seg_enuCountDownToZero+0x14a>
    2828:	9c 8b       	std	Y+20, r25	; 0x14
    282a:	8b 8b       	std	Y+19, r24	; 0x13
			s8Counter--;
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	81 50       	subi	r24, 0x01	; 1
    2830:	8a 83       	std	Y+2, r24	; 0x02
			&& (sev.port >= DIO_u8_PORTA && sev.port <= DIO_u8_PORTD)) {
		switch (sev.com) {
		s8 s8Counter;
	case Sev_commonGND:
		s8Counter = Copy_u8numToShow;
		while (s8Counter >= 0) {
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	88 23       	and	r24, r24
    2836:	0c f0       	brlt	.+2      	; 0x283a <Sev_Seg_enuCountDownToZero+0x160>
    2838:	74 cf       	rjmp	.-280    	; 0x2722 <Sev_Seg_enuCountDownToZero+0x48>
			DIO_enuSetPortValue(sev.port, Sev_Seg_Arr_DecToSeg[s8Counter]);
			_delay_ms(Copy_u16Delay);
			s8Counter--;
		}
		break;
    283a:	98 c0       	rjmp	.+304    	; 0x296c <Sev_Seg_enuCountDownToZero+0x292>

	case Sev_commonVCC:
		s8Counter = Copy_u8numToShow;
    283c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    283e:	8a 83       	std	Y+2, r24	; 0x02
		while (s8Counter >= 0) {
    2840:	8d c0       	rjmp	.+282    	; 0x295c <Sev_Seg_enuCountDownToZero+0x282>
			DIO_enuSetPortValue(sev.port, !Sev_Seg_Arr_DecToSeg[s8Counter]);
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	08 2e       	mov	r0, r24
    2846:	00 0c       	add	r0, r0
    2848:	99 0b       	sbc	r25, r25
    284a:	80 5a       	subi	r24, 0xA0	; 160
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	fc 01       	movw	r30, r24
    2850:	90 81       	ld	r25, Z
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	99 23       	and	r25, r25
    2856:	09 f0       	breq	.+2      	; 0x285a <Sev_Seg_enuCountDownToZero+0x180>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	98 2f       	mov	r25, r24
    285c:	8a a1       	ldd	r24, Y+34	; 0x22
    285e:	69 2f       	mov	r22, r25
    2860:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
			_delay_ms(Copy_u16Delay);
    2864:	88 a1       	ldd	r24, Y+32	; 0x20
    2866:	99 a1       	ldd	r25, Y+33	; 0x21
    2868:	cc 01       	movw	r24, r24
    286a:	a0 e0       	ldi	r26, 0x00	; 0
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__floatunsisf>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8b 83       	std	Y+3, r24	; 0x03
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	ad 83       	std	Y+5, r26	; 0x05
    2880:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a ef       	ldi	r20, 0xFA	; 250
    2888:	54 e4       	ldi	r21, 0x44	; 68
    288a:	6b 81       	ldd	r22, Y+3	; 0x03
    288c:	7c 81       	ldd	r23, Y+4	; 0x04
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	8d 8b       	std	Y+21, r24	; 0x15
    289c:	9e 8b       	std	Y+22, r25	; 0x16
    289e:	af 8b       	std	Y+23, r26	; 0x17
    28a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	6d 89       	ldd	r22, Y+21	; 0x15
    28ac:	7e 89       	ldd	r23, Y+22	; 0x16
    28ae:	8f 89       	ldd	r24, Y+23	; 0x17
    28b0:	98 8d       	ldd	r25, Y+24	; 0x18
    28b2:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    28b6:	88 23       	and	r24, r24
    28b8:	2c f4       	brge	.+10     	; 0x28c4 <Sev_Seg_enuCountDownToZero+0x1ea>
		__ticks = 1;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	9a 8f       	std	Y+26, r25	; 0x1a
    28c0:	89 8f       	std	Y+25, r24	; 0x19
    28c2:	3f c0       	rjmp	.+126    	; 0x2942 <Sev_Seg_enuCountDownToZero+0x268>
	else if (__tmp > 65535)
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	6d 89       	ldd	r22, Y+21	; 0x15
    28ce:	7e 89       	ldd	r23, Y+22	; 0x16
    28d0:	8f 89       	ldd	r24, Y+23	; 0x17
    28d2:	98 8d       	ldd	r25, Y+24	; 0x18
    28d4:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    28d8:	18 16       	cp	r1, r24
    28da:	4c f5       	brge	.+82     	; 0x292e <Sev_Seg_enuCountDownToZero+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e2       	ldi	r20, 0x20	; 32
    28e2:	51 e4       	ldi	r21, 0x41	; 65
    28e4:	6b 81       	ldd	r22, Y+3	; 0x03
    28e6:	7c 81       	ldd	r23, Y+4	; 0x04
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	bc 01       	movw	r22, r24
    28f6:	cd 01       	movw	r24, r26
    28f8:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9a 8f       	std	Y+26, r25	; 0x1a
    2902:	89 8f       	std	Y+25, r24	; 0x19
    2904:	0f c0       	rjmp	.+30     	; 0x2924 <Sev_Seg_enuCountDownToZero+0x24a>
    2906:	88 ec       	ldi	r24, 0xC8	; 200
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9c 8f       	std	Y+28, r25	; 0x1c
    290c:	8b 8f       	std	Y+27, r24	; 0x1b
    290e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2910:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <Sev_Seg_enuCountDownToZero+0x238>
    2916:	9c 8f       	std	Y+28, r25	; 0x1c
    2918:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291a:	89 8d       	ldd	r24, Y+25	; 0x19
    291c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	9a 8f       	std	Y+26, r25	; 0x1a
    2922:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2924:	89 8d       	ldd	r24, Y+25	; 0x19
    2926:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2928:	89 2b       	or	r24, r25
    292a:	69 f7       	brne	.-38     	; 0x2906 <Sev_Seg_enuCountDownToZero+0x22c>
    292c:	14 c0       	rjmp	.+40     	; 0x2956 <Sev_Seg_enuCountDownToZero+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292e:	6d 89       	ldd	r22, Y+21	; 0x15
    2930:	7e 89       	ldd	r23, Y+22	; 0x16
    2932:	8f 89       	ldd	r24, Y+23	; 0x17
    2934:	98 8d       	ldd	r25, Y+24	; 0x18
    2936:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9a 8f       	std	Y+26, r25	; 0x1a
    2940:	89 8f       	std	Y+25, r24	; 0x19
    2942:	89 8d       	ldd	r24, Y+25	; 0x19
    2944:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2946:	9e 8f       	std	Y+30, r25	; 0x1e
    2948:	8d 8f       	std	Y+29, r24	; 0x1d
    294a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    294c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	f1 f7       	brne	.-4      	; 0x294e <Sev_Seg_enuCountDownToZero+0x274>
    2952:	9e 8f       	std	Y+30, r25	; 0x1e
    2954:	8d 8f       	std	Y+29, r24	; 0x1d
			s8Counter--;
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	81 50       	subi	r24, 0x01	; 1
    295a:	8a 83       	std	Y+2, r24	; 0x02
		}
		break;

	case Sev_commonVCC:
		s8Counter = Copy_u8numToShow;
		while (s8Counter >= 0) {
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	88 23       	and	r24, r24
    2960:	0c f0       	brlt	.+2      	; 0x2964 <Sev_Seg_enuCountDownToZero+0x28a>
    2962:	6f cf       	rjmp	.-290    	; 0x2842 <Sev_Seg_enuCountDownToZero+0x168>
			DIO_enuSetPortValue(sev.port, !Sev_Seg_Arr_DecToSeg[s8Counter]);
			_delay_ms(Copy_u16Delay);
			s8Counter--;
		}
		break;
    2964:	03 c0       	rjmp	.+6      	; 0x296c <Sev_Seg_enuCountDownToZero+0x292>

	default:
		LOC_enuErrorStatus = Sev_Seg_invalidInput;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	89 83       	std	Y+1, r24	; 0x01
		}
	}
    296a:	09 c0       	rjmp	.+18     	; 0x297e <Sev_Seg_enuCountDownToZero+0x2a4>
    296c:	08 c0       	rjmp	.+16     	; 0x297e <Sev_Seg_enuCountDownToZero+0x2a4>

	else {
		DIO_enuSetPortValue(sev.port,
    296e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    2972:	8a a1       	ldd	r24, Y+34	; 0x22
    2974:	69 2f       	mov	r22, r25
    2976:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
				Sev_Seg_Arr_DecToSeg[Sev_Seg_ErrorStatus]); //Shows 'E' on the Sev-seg
		LOC_enuErrorStatus = Sev_Seg_invalidInput;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_enuErrorStatus;
    297e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2980:	a3 96       	adiw	r28, 0x23	; 35
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	08 95       	ret

00002992 <LED_init>:
#include "../../../INCLUDE/HAL/LED/Led.h"
#include "../../../INCLUDE/HAL/LED/Led_cfg.h"
#include "../../../INCLUDE/MCAL/DIO/Dio.h"
#include "avr/delay.h"

LED_tenuErrorStatus LED_init(LED_tLed copy_tLed) {
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	00 d0       	rcall	.+0      	; 0x2998 <LED_init+0x6>
    2998:	00 d0       	rcall	.+0      	; 0x299a <LED_init+0x8>
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	6a 83       	std	Y+2, r22	; 0x02
    29a0:	7b 83       	std	Y+3, r23	; 0x03
    29a2:	8c 83       	std	Y+4, r24	; 0x04

	LED_tenuErrorStatus LOC_enuErrorStatus = LED_enuOk;
    29a4:	19 82       	std	Y+1, r1	; 0x01

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
    29a6:	8c 81       	ldd	r24, Y+4	; 0x04

LED_tenuErrorStatus LED_init(LED_tLed copy_tLed) {

	LED_tenuErrorStatus LOC_enuErrorStatus = LED_enuOk;

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
    29a8:	84 30       	cpi	r24, 0x04	; 4
    29aa:	80 f4       	brcc	.+32     	; 0x29cc <LED_init+0x3a>
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03

	LED_tenuErrorStatus LOC_enuErrorStatus = LED_enuOk;

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
    29ae:	88 30       	cpi	r24, 0x08	; 8
    29b0:	68 f4       	brcc	.+26     	; 0x29cc <LED_init+0x3a>
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)
			&& (copy_tLed.LED_state == LED_ACTIVE_HIGH
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	19 f0       	breq	.+6      	; 0x29be <LED_init+0x2c>
					|| copy_tLed.LED_state == LED_ACTIVE_LOW)) {
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	88 23       	and	r24, r24
    29bc:	39 f4       	brne	.+14     	; 0x29cc <LED_init+0x3a>
		DIO_enuSetPinDirection(copy_tLed.LED_port, copy_tLed.LED_pin,
    29be:	9b 81       	ldd	r25, Y+3	; 0x03
    29c0:	8c 81       	ldd	r24, Y+4	; 0x04
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	69 2f       	mov	r22, r25
    29c6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <LED_init+0x3e>
		DIO_u8_OUTPUT);
	} else {
		LOC_enuErrorStatus = LED_invalidInput;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_enuErrorStatus;
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret

000029e0 <LED_enuLedOn>:

LED_tenuErrorStatus LED_enuLedOn(LED_tLed copy_tLed) {
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <LED_enuLedOn+0x6>
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <LED_enuLedOn+0x8>
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	6a 83       	std	Y+2, r22	; 0x02
    29ee:	7b 83       	std	Y+3, r23	; 0x03
    29f0:	8c 83       	std	Y+4, r24	; 0x04

	LED_tenuErrorStatus LOC_enuErrorStatus = LED_enuOk;
    29f2:	19 82       	std	Y+1, r1	; 0x01

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
    29f4:	8c 81       	ldd	r24, Y+4	; 0x04

LED_tenuErrorStatus LED_enuLedOn(LED_tLed copy_tLed) {

	LED_tenuErrorStatus LOC_enuErrorStatus = LED_enuOk;

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
    29f6:	84 30       	cpi	r24, 0x04	; 4
    29f8:	30 f5       	brcc	.+76     	; 0x2a46 <LED_enuLedOn+0x66>
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03

	LED_tenuErrorStatus LOC_enuErrorStatus = LED_enuOk;

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
    29fc:	88 30       	cpi	r24, 0x08	; 8
    29fe:	18 f5       	brcc	.+70     	; 0x2a46 <LED_enuLedOn+0x66>
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	69 f4       	brne	.+26     	; 0x2a20 <LED_enuLedOn+0x40>
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_HIGH);
    2a06:	8b 81       	ldd	r24, Y+3	; 0x03
	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	88 2f       	mov	r24, r24
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	41 e0       	ldi	r20, 0x01	; 1
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	b9 01       	movw	r22, r18
    2a18:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
    2a1c:	89 83       	std	Y+1, r24	; 0x01

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
    2a1e:	15 c0       	rjmp	.+42     	; 0x2a4a <LED_enuLedOn+0x6a>
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_HIGH);
			//copy_tLed.LED_pinValue = 1;
		} else if (copy_tLed.LED_state == LED_ACTIVE_LOW) {
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	88 23       	and	r24, r24
    2a24:	69 f4       	brne	.+26     	; 0x2a40 <LED_enuLedOn+0x60>
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_LOW);
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_HIGH);
			//copy_tLed.LED_pinValue = 1;
		} else if (copy_tLed.LED_state == LED_ACTIVE_LOW) {
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
    2a28:	28 2f       	mov	r18, r24
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2e:	88 2f       	mov	r24, r24
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	b9 01       	movw	r22, r18
    2a38:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
    2a3c:	89 83       	std	Y+1, r24	; 0x01

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
    2a3e:	05 c0       	rjmp	.+10     	; 0x2a4a <LED_enuLedOn+0x6a>
		} else if (copy_tLed.LED_state == LED_ACTIVE_LOW) {
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_LOW);
			//copy_tLed.LED_pinValue = 0;
		} else
			LOC_enuErrorStatus = LED_invalidInput;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	89 83       	std	Y+1, r24	; 0x01

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <LED_enuLedOn+0x6a>
		} else
			LOC_enuErrorStatus = LED_invalidInput;
	}

	else
		LOC_enuErrorStatus = LED_invalidInput;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	89 83       	std	Y+1, r24	; 0x01

	return LOC_enuErrorStatus;
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	08 95       	ret

00002a5a <LED_enuLedOff>:

LED_tenuErrorStatus LED_enuLedOff(LED_tLed copy_tLed) {
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <LED_enuLedOff+0x6>
    2a60:	00 d0       	rcall	.+0      	; 0x2a62 <LED_enuLedOff+0x8>
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	6a 83       	std	Y+2, r22	; 0x02
    2a68:	7b 83       	std	Y+3, r23	; 0x03
    2a6a:	8c 83       	std	Y+4, r24	; 0x04

	LED_tenuErrorStatus LOC_enuErrorStatus = LED_enuOk;
    2a6c:	19 82       	std	Y+1, r1	; 0x01

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
    2a6e:	8c 81       	ldd	r24, Y+4	; 0x04

LED_tenuErrorStatus LED_enuLedOff(LED_tLed copy_tLed) {

	LED_tenuErrorStatus LOC_enuErrorStatus = LED_enuOk;

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
    2a70:	84 30       	cpi	r24, 0x04	; 4
    2a72:	30 f5       	brcc	.+76     	; 0x2ac0 <LED_enuLedOff+0x66>
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03

	LED_tenuErrorStatus LOC_enuErrorStatus = LED_enuOk;

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
    2a76:	88 30       	cpi	r24, 0x08	; 8
    2a78:	18 f5       	brcc	.+70     	; 0x2ac0 <LED_enuLedOff+0x66>
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	69 f4       	brne	.+26     	; 0x2a9a <LED_enuLedOff+0x40>
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_LOW);
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	8c 81       	ldd	r24, Y+4	; 0x04
    2a88:	88 2f       	mov	r24, r24
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	b9 01       	movw	r22, r18
    2a92:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
    2a96:	89 83       	std	Y+1, r24	; 0x01

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
    2a98:	15 c0       	rjmp	.+42     	; 0x2ac4 <LED_enuLedOff+0x6a>
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_LOW);
			//copy_tLed.LED_pinValue = 0;
		} else if (copy_tLed.LED_state == LED_ACTIVE_LOW) {
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	88 23       	and	r24, r24
    2a9e:	69 f4       	brne	.+26     	; 0x2aba <LED_enuLedOff+0x60>
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_HIGH);
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_LOW);
			//copy_tLed.LED_pinValue = 0;
		} else if (copy_tLed.LED_state == LED_ACTIVE_LOW) {
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa8:	88 2f       	mov	r24, r24
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	b9 01       	movw	r22, r18
    2ab2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
    2ab6:	89 83       	std	Y+1, r24	; 0x01

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
    2ab8:	05 c0       	rjmp	.+10     	; 0x2ac4 <LED_enuLedOff+0x6a>
		} else if (copy_tLed.LED_state == LED_ACTIVE_LOW) {
			LOC_enuErrorStatus = DIO_enuSetPinValue(copy_tLed.LED_port,
					copy_tLed.LED_pin, DIO_u8_HIGH);
			//copy_tLed.LED_pinValue = 1;
		} else
			LOC_enuErrorStatus = LED_invalidInput;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	89 83       	std	Y+1, r24	; 0x01

	if ((copy_tLed.LED_port >= DIO_u8_PORTA
			&& copy_tLed.LED_port <= DIO_u8_PORTD)
			&& (copy_tLed.LED_pin >= DIO_u8_PIN0
					&& copy_tLed.LED_pin <= DIO_u8_PIN7)) {
		if (copy_tLed.LED_state == LED_ACTIVE_HIGH) {
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <LED_enuLedOff+0x6a>
					copy_tLed.LED_pin, DIO_u8_HIGH);
			//copy_tLed.LED_pinValue = 1;
		} else
			LOC_enuErrorStatus = LED_invalidInput;
	} else {
		LOC_enuErrorStatus = LED_invalidInput;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_enuErrorStatus;
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <LCD_vidInit>:
#include "../../../INCLUDE/HAL/LCD/LCD.h"
#include "../../../INCLUDE/HAL/LCD/LCD_cfg.h"
#undef F_CPU
#define F_CPU 8000000

LCD_tenuErrorStatus LCD_vidInit(LCD_tLCD copy_tLCD) {
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	cc 54       	subi	r28, 0x4C	; 76
    2ae2:	d1 09       	sbc	r29, r1
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	9e 01       	movw	r18, r28
    2af0:	28 5b       	subi	r18, 0xB8	; 184
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	f9 01       	movw	r30, r18
    2af6:	40 83       	st	Z, r20
    2af8:	f9 01       	movw	r30, r18
    2afa:	51 83       	std	Z+1, r21	; 0x01
    2afc:	f9 01       	movw	r30, r18
    2afe:	62 83       	std	Z+2, r22	; 0x02
    2b00:	f9 01       	movw	r30, r18
    2b02:	73 83       	std	Z+3, r23	; 0x03
    2b04:	f9 01       	movw	r30, r18
    2b06:	84 83       	std	Z+4, r24	; 0x04
	u8 LOC_u8ErrorStatus = LCD_enuOk;
    2b08:	19 82       	std	Y+1, r1	; 0x01

	if (copy_tLCD.DataPort >= DIO_u8_PORTA && copy_tLCD.DataPort <= DIO_u8_PORTD) {
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	88 5b       	subi	r24, 0xB8	; 184
    2b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b10:	fc 01       	movw	r30, r24
    2b12:	80 81       	ld	r24, Z
    2b14:	84 30       	cpi	r24, 0x04	; 4
    2b16:	48 f4       	brcc	.+18     	; 0x2b2a <LCD_vidInit+0x56>
		DIO_enuSetPortDirection(copy_tLCD.DataPort, DIO_u8_PORT_OUTPUT);
    2b18:	ce 01       	movw	r24, r28
    2b1a:	88 5b       	subi	r24, 0xB8	; 184
    2b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1e:	fc 01       	movw	r30, r24
    2b20:	80 81       	ld	r24, Z
    2b22:	6f ef       	ldi	r22, 0xFF	; 255
    2b24:	0e 94 25 10 	call	0x204a	; 0x204a <DIO_enuSetPortDirection>
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <LCD_vidInit+0x5a>
	} else
		LOC_u8ErrorStatus = LCD_invalidInput;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_tLCD.CfgPort >= DIO_u8_PORTA && copy_tLCD.CfgPort <= DIO_u8_PORTD) {
    2b2e:	ce 01       	movw	r24, r28
    2b30:	88 5b       	subi	r24, 0xB8	; 184
    2b32:	9f 4f       	sbci	r25, 0xFF	; 255
    2b34:	fc 01       	movw	r30, r24
    2b36:	81 81       	ldd	r24, Z+1	; 0x01
    2b38:	84 30       	cpi	r24, 0x04	; 4
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <LCD_vidInit+0x6a>
    2b3c:	bb c0       	rjmp	.+374    	; 0x2cb4 <LCD_vidInit+0x1e0>

		if (copy_tLCD.RSPin >= DIO_u8_PIN0 && copy_tLCD.RSPin <= DIO_u8_PIN7)
    2b3e:	ce 01       	movw	r24, r28
    2b40:	88 5b       	subi	r24, 0xB8	; 184
    2b42:	9f 4f       	sbci	r25, 0xFF	; 255
    2b44:	fc 01       	movw	r30, r24
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	88 30       	cpi	r24, 0x08	; 8
    2b4a:	78 f4       	brcc	.+30     	; 0x2b6a <LCD_vidInit+0x96>
			DIO_enuSetPinDirection(copy_tLCD.CfgPort, copy_tLCD.RSPin,
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	88 5b       	subi	r24, 0xB8	; 184
    2b50:	9f 4f       	sbci	r25, 0xFF	; 255
    2b52:	fc 01       	movw	r30, r24
    2b54:	22 81       	ldd	r18, Z+2	; 0x02
    2b56:	ce 01       	movw	r24, r28
    2b58:	88 5b       	subi	r24, 0xB8	; 184
    2b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	81 81       	ldd	r24, Z+1	; 0x01
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	62 2f       	mov	r22, r18
    2b64:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <LCD_vidInit+0x9a>
			DIO_u8_OUTPUT);
		else
			LOC_u8ErrorStatus = LCD_invalidInput;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	89 83       	std	Y+1, r24	; 0x01

		if (copy_tLCD.RWPin >= DIO_u8_PIN0 && copy_tLCD.RWPin <= DIO_u8_PIN7)
    2b6e:	ce 01       	movw	r24, r28
    2b70:	88 5b       	subi	r24, 0xB8	; 184
    2b72:	9f 4f       	sbci	r25, 0xFF	; 255
    2b74:	fc 01       	movw	r30, r24
    2b76:	83 81       	ldd	r24, Z+3	; 0x03
    2b78:	88 30       	cpi	r24, 0x08	; 8
    2b7a:	78 f4       	brcc	.+30     	; 0x2b9a <LCD_vidInit+0xc6>
			DIO_enuSetPinDirection(copy_tLCD.CfgPort, copy_tLCD.RWPin,
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	88 5b       	subi	r24, 0xB8	; 184
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	fc 01       	movw	r30, r24
    2b84:	23 81       	ldd	r18, Z+3	; 0x03
    2b86:	ce 01       	movw	r24, r28
    2b88:	88 5b       	subi	r24, 0xB8	; 184
    2b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	81 81       	ldd	r24, Z+1	; 0x01
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	62 2f       	mov	r22, r18
    2b94:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <LCD_vidInit+0xca>
			DIO_u8_OUTPUT);
		else
			LOC_u8ErrorStatus = LCD_invalidInput;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	89 83       	std	Y+1, r24	; 0x01

		if (copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	88 5b       	subi	r24, 0xB8	; 184
    2ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	84 81       	ldd	r24, Z+4	; 0x04
    2ba8:	88 30       	cpi	r24, 0x08	; 8
    2baa:	78 f4       	brcc	.+30     	; 0x2bca <LCD_vidInit+0xf6>
			DIO_enuSetPinDirection(copy_tLCD.CfgPort, copy_tLCD.ENPin,
    2bac:	ce 01       	movw	r24, r28
    2bae:	88 5b       	subi	r24, 0xB8	; 184
    2bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	24 81       	ldd	r18, Z+4	; 0x04
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	88 5b       	subi	r24, 0xB8	; 184
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	81 81       	ldd	r24, Z+1	; 0x01
    2bc0:	41 e0       	ldi	r20, 0x01	; 1
    2bc2:	62 2f       	mov	r22, r18
    2bc4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <LCD_vidInit+0xfa>
			DIO_u8_OUTPUT);
		else
			LOC_u8ErrorStatus = LCD_invalidInput;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	a0 e2       	ldi	r26, 0x20	; 32
    2bd4:	b2 e4       	ldi	r27, 0x42	; 66
    2bd6:	8a 8b       	std	Y+18, r24	; 0x12
    2bd8:	9b 8b       	std	Y+19, r25	; 0x13
    2bda:	ac 8b       	std	Y+20, r26	; 0x14
    2bdc:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a ef       	ldi	r20, 0xFA	; 250
    2be4:	54 e4       	ldi	r21, 0x44	; 68
    2be6:	6a 89       	ldd	r22, Y+18	; 0x12
    2be8:	7b 89       	ldd	r23, Y+19	; 0x13
    2bea:	8c 89       	ldd	r24, Y+20	; 0x14
    2bec:	9d 89       	ldd	r25, Y+21	; 0x15
    2bee:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	8e 8b       	std	Y+22, r24	; 0x16
    2bf8:	9f 8b       	std	Y+23, r25	; 0x17
    2bfa:	a8 8f       	std	Y+24, r26	; 0x18
    2bfc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e8       	ldi	r20, 0x80	; 128
    2c04:	5f e3       	ldi	r21, 0x3F	; 63
    2c06:	6e 89       	ldd	r22, Y+22	; 0x16
    2c08:	7f 89       	ldd	r23, Y+23	; 0x17
    2c0a:	88 8d       	ldd	r24, Y+24	; 0x18
    2c0c:	99 8d       	ldd	r25, Y+25	; 0x19
    2c0e:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    2c12:	88 23       	and	r24, r24
    2c14:	2c f4       	brge	.+10     	; 0x2c20 <LCD_vidInit+0x14c>
		__ticks = 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	9b 8f       	std	Y+27, r25	; 0x1b
    2c1c:	8a 8f       	std	Y+26, r24	; 0x1a
    2c1e:	3f c0       	rjmp	.+126    	; 0x2c9e <LCD_vidInit+0x1ca>
	else if (__tmp > 65535)
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	3f ef       	ldi	r19, 0xFF	; 255
    2c24:	4f e7       	ldi	r20, 0x7F	; 127
    2c26:	57 e4       	ldi	r21, 0x47	; 71
    2c28:	6e 89       	ldd	r22, Y+22	; 0x16
    2c2a:	7f 89       	ldd	r23, Y+23	; 0x17
    2c2c:	88 8d       	ldd	r24, Y+24	; 0x18
    2c2e:	99 8d       	ldd	r25, Y+25	; 0x19
    2c30:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2c34:	18 16       	cp	r1, r24
    2c36:	4c f5       	brge	.+82     	; 0x2c8a <LCD_vidInit+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e2       	ldi	r20, 0x20	; 32
    2c3e:	51 e4       	ldi	r21, 0x41	; 65
    2c40:	6a 89       	ldd	r22, Y+18	; 0x12
    2c42:	7b 89       	ldd	r23, Y+19	; 0x13
    2c44:	8c 89       	ldd	r24, Y+20	; 0x14
    2c46:	9d 89       	ldd	r25, Y+21	; 0x15
    2c48:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	bc 01       	movw	r22, r24
    2c52:	cd 01       	movw	r24, r26
    2c54:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9b 8f       	std	Y+27, r25	; 0x1b
    2c5e:	8a 8f       	std	Y+26, r24	; 0x1a
    2c60:	0f c0       	rjmp	.+30     	; 0x2c80 <LCD_vidInit+0x1ac>
    2c62:	88 ec       	ldi	r24, 0xC8	; 200
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9d 8f       	std	Y+29, r25	; 0x1d
    2c68:	8c 8f       	std	Y+28, r24	; 0x1c
    2c6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c6c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <LCD_vidInit+0x19a>
    2c72:	9d 8f       	std	Y+29, r25	; 0x1d
    2c74:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c78:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	9b 8f       	std	Y+27, r25	; 0x1b
    2c7e:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c80:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c82:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c84:	89 2b       	or	r24, r25
    2c86:	69 f7       	brne	.-38     	; 0x2c62 <LCD_vidInit+0x18e>
    2c88:	17 c0       	rjmp	.+46     	; 0x2cb8 <LCD_vidInit+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8a:	6e 89       	ldd	r22, Y+22	; 0x16
    2c8c:	7f 89       	ldd	r23, Y+23	; 0x17
    2c8e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c90:	99 8d       	ldd	r25, Y+25	; 0x19
    2c92:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	9b 8f       	std	Y+27, r25	; 0x1b
    2c9c:	8a 8f       	std	Y+26, r24	; 0x1a
    2c9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ca0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ca2:	9f 8f       	std	Y+31, r25	; 0x1f
    2ca4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ca6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ca8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <LCD_vidInit+0x1d6>
    2cae:	9f 8f       	std	Y+31, r25	; 0x1f
    2cb0:	8e 8f       	std	Y+30, r24	; 0x1e
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <LCD_vidInit+0x1e4>
		_delay_ms(40);
	} else
		LOC_u8ErrorStatus = LCD_invalidInput;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidSendCommand(LCD_FunctionSetTwoLineMinPower, copy_tLCD); //function set
    2cb8:	ce 01       	movw	r24, r28
    2cba:	88 5b       	subi	r24, 0xB8	; 184
    2cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	20 81       	ld	r18, Z
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	31 81       	ldd	r19, Z+1	; 0x01
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	42 81       	ldd	r20, Z+2	; 0x02
    2cca:	fc 01       	movw	r30, r24
    2ccc:	53 81       	ldd	r21, Z+3	; 0x03
    2cce:	fc 01       	movw	r30, r24
    2cd0:	64 81       	ldd	r22, Z+4	; 0x04
    2cd2:	88 e3       	ldi	r24, 0x38	; 56
    2cd4:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_vidSendCommand>
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	a0 e0       	ldi	r26, 0x00	; 0
    2cde:	b0 e4       	ldi	r27, 0x40	; 64
    2ce0:	8e 83       	std	Y+6, r24	; 0x06
    2ce2:	9f 83       	std	Y+7, r25	; 0x07
    2ce4:	a8 87       	std	Y+8, r26	; 0x08
    2ce6:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ce8:	8e 01       	movw	r16, r28
    2cea:	02 5c       	subi	r16, 0xC2	; 194
    2cec:	1f 4f       	sbci	r17, 0xFF	; 255
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	4a ef       	ldi	r20, 0xFA	; 250
    2cf4:	54 e4       	ldi	r21, 0x44	; 68
    2cf6:	6e 81       	ldd	r22, Y+6	; 0x06
    2cf8:	7f 81       	ldd	r23, Y+7	; 0x07
    2cfa:	88 85       	ldd	r24, Y+8	; 0x08
    2cfc:	99 85       	ldd	r25, Y+9	; 0x09
    2cfe:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	f8 01       	movw	r30, r16
    2d08:	80 83       	st	Z, r24
    2d0a:	91 83       	std	Z+1, r25	; 0x01
    2d0c:	a2 83       	std	Z+2, r26	; 0x02
    2d0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d10:	ce 01       	movw	r24, r28
    2d12:	ce 96       	adiw	r24, 0x3e	; 62
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    2d2a:	88 23       	and	r24, r24
    2d2c:	4c f4       	brge	.+18     	; 0x2d40 <LCD_vidInit+0x26c>
		__ticks = 1;
    2d2e:	ce 01       	movw	r24, r28
    2d30:	8e 5b       	subi	r24, 0xBE	; 190
    2d32:	9f 4f       	sbci	r25, 0xFF	; 255
    2d34:	21 e0       	ldi	r18, 0x01	; 1
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	fc 01       	movw	r30, r24
    2d3a:	31 83       	std	Z+1, r19	; 0x01
    2d3c:	20 83       	st	Z, r18
    2d3e:	67 c0       	rjmp	.+206    	; 0x2e0e <LCD_vidInit+0x33a>
	else if (__tmp > 65535)
    2d40:	ce 01       	movw	r24, r28
    2d42:	ce 96       	adiw	r24, 0x3e	; 62
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	0c f0       	brlt	.+2      	; 0x2d60 <LCD_vidInit+0x28c>
    2d5e:	46 c0       	rjmp	.+140    	; 0x2dec <LCD_vidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e2       	ldi	r20, 0x20	; 32
    2d66:	51 e4       	ldi	r21, 0x41	; 65
    2d68:	6e 81       	ldd	r22, Y+6	; 0x06
    2d6a:	7f 81       	ldd	r23, Y+7	; 0x07
    2d6c:	88 85       	ldd	r24, Y+8	; 0x08
    2d6e:	99 85       	ldd	r25, Y+9	; 0x09
    2d70:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	8e 01       	movw	r16, r28
    2d7a:	0e 5b       	subi	r16, 0xBE	; 190
    2d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	f8 01       	movw	r30, r16
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
    2d90:	24 c0       	rjmp	.+72     	; 0x2dda <LCD_vidInit+0x306>
    2d92:	ce 01       	movw	r24, r28
    2d94:	8c 5b       	subi	r24, 0xBC	; 188
    2d96:	9f 4f       	sbci	r25, 0xFF	; 255
    2d98:	28 ec       	ldi	r18, 0xC8	; 200
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	31 83       	std	Z+1, r19	; 0x01
    2da0:	20 83       	st	Z, r18
    2da2:	ce 01       	movw	r24, r28
    2da4:	8c 5b       	subi	r24, 0xBC	; 188
    2da6:	9f 4f       	sbci	r25, 0xFF	; 255
    2da8:	fc 01       	movw	r30, r24
    2daa:	80 81       	ld	r24, Z
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <LCD_vidInit+0x2da>
    2db2:	9e 01       	movw	r18, r28
    2db4:	2c 5b       	subi	r18, 0xBC	; 188
    2db6:	3f 4f       	sbci	r19, 0xFF	; 255
    2db8:	f9 01       	movw	r30, r18
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	8e 5b       	subi	r24, 0xBE	; 190
    2dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc4:	9e 01       	movw	r18, r28
    2dc6:	2e 5b       	subi	r18, 0xBE	; 190
    2dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dca:	f9 01       	movw	r30, r18
    2dcc:	20 81       	ld	r18, Z
    2dce:	31 81       	ldd	r19, Z+1	; 0x01
    2dd0:	21 50       	subi	r18, 0x01	; 1
    2dd2:	31 09       	sbc	r19, r1
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	31 83       	std	Z+1, r19	; 0x01
    2dd8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	ce 01       	movw	r24, r28
    2ddc:	8e 5b       	subi	r24, 0xBE	; 190
    2dde:	9f 4f       	sbci	r25, 0xFF	; 255
    2de0:	fc 01       	movw	r30, r24
    2de2:	80 81       	ld	r24, Z
    2de4:	91 81       	ldd	r25, Z+1	; 0x01
    2de6:	89 2b       	or	r24, r25
    2de8:	a1 f6       	brne	.-88     	; 0x2d92 <LCD_vidInit+0x2be>
    2dea:	2b c0       	rjmp	.+86     	; 0x2e42 <LCD_vidInit+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	8e 01       	movw	r16, r28
    2dee:	0e 5b       	subi	r16, 0xBE	; 190
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	ce 01       	movw	r24, r28
    2df4:	ce 96       	adiw	r24, 0x3e	; 62
    2df6:	fc 01       	movw	r30, r24
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	f8 01       	movw	r30, r16
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
    2e0e:	ce 01       	movw	r24, r28
    2e10:	8a 5b       	subi	r24, 0xBA	; 186
    2e12:	9f 4f       	sbci	r25, 0xFF	; 255
    2e14:	9e 01       	movw	r18, r28
    2e16:	2e 5b       	subi	r18, 0xBE	; 190
    2e18:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	20 81       	ld	r18, Z
    2e1e:	31 81       	ldd	r19, Z+1	; 0x01
    2e20:	fc 01       	movw	r30, r24
    2e22:	31 83       	std	Z+1, r19	; 0x01
    2e24:	20 83       	st	Z, r18
    2e26:	ce 01       	movw	r24, r28
    2e28:	8a 5b       	subi	r24, 0xBA	; 186
    2e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	80 81       	ld	r24, Z
    2e30:	91 81       	ldd	r25, Z+1	; 0x01
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <LCD_vidInit+0x35e>
    2e36:	9e 01       	movw	r18, r28
    2e38:	2a 5b       	subi	r18, 0xBA	; 186
    2e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3c:	f9 01       	movw	r30, r18
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_vidSendCommand(LCD_DisplayOn, copy_tLCD); //display on/off control
    2e42:	ce 01       	movw	r24, r28
    2e44:	88 5b       	subi	r24, 0xB8	; 184
    2e46:	9f 4f       	sbci	r25, 0xFF	; 255
    2e48:	fc 01       	movw	r30, r24
    2e4a:	20 81       	ld	r18, Z
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	31 81       	ldd	r19, Z+1	; 0x01
    2e50:	fc 01       	movw	r30, r24
    2e52:	42 81       	ldd	r20, Z+2	; 0x02
    2e54:	fc 01       	movw	r30, r24
    2e56:	53 81       	ldd	r21, Z+3	; 0x03
    2e58:	fc 01       	movw	r30, r24
    2e5a:	64 81       	ldd	r22, Z+4	; 0x04
    2e5c:	8f e0       	ldi	r24, 0x0F	; 15
    2e5e:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_vidSendCommand>
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	a0 e0       	ldi	r26, 0x00	; 0
    2e68:	b0 e4       	ldi	r27, 0x40	; 64
    2e6a:	8a 87       	std	Y+10, r24	; 0x0a
    2e6c:	9b 87       	std	Y+11, r25	; 0x0b
    2e6e:	ac 87       	std	Y+12, r26	; 0x0c
    2e70:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a ef       	ldi	r20, 0xFA	; 250
    2e78:	54 e4       	ldi	r21, 0x44	; 68
    2e7a:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e7c:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e80:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e82:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	8c ab       	std	Y+52, r24	; 0x34
    2e8c:	9d ab       	std	Y+53, r25	; 0x35
    2e8e:	ae ab       	std	Y+54, r26	; 0x36
    2e90:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	6c a9       	ldd	r22, Y+52	; 0x34
    2e9c:	7d a9       	ldd	r23, Y+53	; 0x35
    2e9e:	8e a9       	ldd	r24, Y+54	; 0x36
    2ea0:	9f a9       	ldd	r25, Y+55	; 0x37
    2ea2:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    2ea6:	88 23       	and	r24, r24
    2ea8:	2c f4       	brge	.+10     	; 0x2eb4 <LCD_vidInit+0x3e0>
		__ticks = 1;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	99 af       	std	Y+57, r25	; 0x39
    2eb0:	88 af       	std	Y+56, r24	; 0x38
    2eb2:	3f c0       	rjmp	.+126    	; 0x2f32 <LCD_vidInit+0x45e>
	else if (__tmp > 65535)
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	6c a9       	ldd	r22, Y+52	; 0x34
    2ebe:	7d a9       	ldd	r23, Y+53	; 0x35
    2ec0:	8e a9       	ldd	r24, Y+54	; 0x36
    2ec2:	9f a9       	ldd	r25, Y+55	; 0x37
    2ec4:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2ec8:	18 16       	cp	r1, r24
    2eca:	4c f5       	brge	.+82     	; 0x2f1e <LCD_vidInit+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	6a 85       	ldd	r22, Y+10	; 0x0a
    2ed6:	7b 85       	ldd	r23, Y+11	; 0x0b
    2ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eda:	9d 85       	ldd	r25, Y+13	; 0x0d
    2edc:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	cd 01       	movw	r24, r26
    2ee8:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	99 af       	std	Y+57, r25	; 0x39
    2ef2:	88 af       	std	Y+56, r24	; 0x38
    2ef4:	0f c0       	rjmp	.+30     	; 0x2f14 <LCD_vidInit+0x440>
    2ef6:	88 ec       	ldi	r24, 0xC8	; 200
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	9b af       	std	Y+59, r25	; 0x3b
    2efc:	8a af       	std	Y+58, r24	; 0x3a
    2efe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f00:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <LCD_vidInit+0x42e>
    2f06:	9b af       	std	Y+59, r25	; 0x3b
    2f08:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0a:	88 ad       	ldd	r24, Y+56	; 0x38
    2f0c:	99 ad       	ldd	r25, Y+57	; 0x39
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	99 af       	std	Y+57, r25	; 0x39
    2f12:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f14:	88 ad       	ldd	r24, Y+56	; 0x38
    2f16:	99 ad       	ldd	r25, Y+57	; 0x39
    2f18:	89 2b       	or	r24, r25
    2f1a:	69 f7       	brne	.-38     	; 0x2ef6 <LCD_vidInit+0x422>
    2f1c:	14 c0       	rjmp	.+40     	; 0x2f46 <LCD_vidInit+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1e:	6c a9       	ldd	r22, Y+52	; 0x34
    2f20:	7d a9       	ldd	r23, Y+53	; 0x35
    2f22:	8e a9       	ldd	r24, Y+54	; 0x36
    2f24:	9f a9       	ldd	r25, Y+55	; 0x37
    2f26:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	99 af       	std	Y+57, r25	; 0x39
    2f30:	88 af       	std	Y+56, r24	; 0x38
    2f32:	88 ad       	ldd	r24, Y+56	; 0x38
    2f34:	99 ad       	ldd	r25, Y+57	; 0x39
    2f36:	9d af       	std	Y+61, r25	; 0x3d
    2f38:	8c af       	std	Y+60, r24	; 0x3c
    2f3a:	8c ad       	ldd	r24, Y+60	; 0x3c
    2f3c:	9d ad       	ldd	r25, Y+61	; 0x3d
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <LCD_vidInit+0x46a>
    2f42:	9d af       	std	Y+61, r25	; 0x3d
    2f44:	8c af       	std	Y+60, r24	; 0x3c
	_delay_ms(2);
	LCD_vidSendCommand(LCD_ClrDisplay, copy_tLCD); //clear display
    2f46:	ce 01       	movw	r24, r28
    2f48:	88 5b       	subi	r24, 0xB8	; 184
    2f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	20 81       	ld	r18, Z
    2f50:	fc 01       	movw	r30, r24
    2f52:	31 81       	ldd	r19, Z+1	; 0x01
    2f54:	fc 01       	movw	r30, r24
    2f56:	42 81       	ldd	r20, Z+2	; 0x02
    2f58:	fc 01       	movw	r30, r24
    2f5a:	53 81       	ldd	r21, Z+3	; 0x03
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	64 81       	ldd	r22, Z+4	; 0x04
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_vidSendCommand>
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	a0 e0       	ldi	r26, 0x00	; 0
    2f6c:	b0 e4       	ldi	r27, 0x40	; 64
    2f6e:	8e 87       	std	Y+14, r24	; 0x0e
    2f70:	9f 87       	std	Y+15, r25	; 0x0f
    2f72:	a8 8b       	std	Y+16, r26	; 0x10
    2f74:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4a ef       	ldi	r20, 0xFA	; 250
    2f7c:	54 e4       	ldi	r21, 0x44	; 68
    2f7e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2f80:	7f 85       	ldd	r23, Y+15	; 0x0f
    2f82:	88 89       	ldd	r24, Y+16	; 0x10
    2f84:	99 89       	ldd	r25, Y+17	; 0x11
    2f86:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	8a a7       	std	Y+42, r24	; 0x2a
    2f90:	9b a7       	std	Y+43, r25	; 0x2b
    2f92:	ac a7       	std	Y+44, r26	; 0x2c
    2f94:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	5f e3       	ldi	r21, 0x3F	; 63
    2f9e:	6a a5       	ldd	r22, Y+42	; 0x2a
    2fa0:	7b a5       	ldd	r23, Y+43	; 0x2b
    2fa2:	8c a5       	ldd	r24, Y+44	; 0x2c
    2fa4:	9d a5       	ldd	r25, Y+45	; 0x2d
    2fa6:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    2faa:	88 23       	and	r24, r24
    2fac:	2c f4       	brge	.+10     	; 0x2fb8 <LCD_vidInit+0x4e4>
		__ticks = 1;
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9f a7       	std	Y+47, r25	; 0x2f
    2fb4:	8e a7       	std	Y+46, r24	; 0x2e
    2fb6:	3f c0       	rjmp	.+126    	; 0x3036 <LCD_vidInit+0x562>
	else if (__tmp > 65535)
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	3f ef       	ldi	r19, 0xFF	; 255
    2fbc:	4f e7       	ldi	r20, 0x7F	; 127
    2fbe:	57 e4       	ldi	r21, 0x47	; 71
    2fc0:	6a a5       	ldd	r22, Y+42	; 0x2a
    2fc2:	7b a5       	ldd	r23, Y+43	; 0x2b
    2fc4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2fc6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2fc8:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2fcc:	18 16       	cp	r1, r24
    2fce:	4c f5       	brge	.+82     	; 0x3022 <LCD_vidInit+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e2       	ldi	r20, 0x20	; 32
    2fd6:	51 e4       	ldi	r21, 0x41	; 65
    2fd8:	6e 85       	ldd	r22, Y+14	; 0x0e
    2fda:	7f 85       	ldd	r23, Y+15	; 0x0f
    2fdc:	88 89       	ldd	r24, Y+16	; 0x10
    2fde:	99 89       	ldd	r25, Y+17	; 0x11
    2fe0:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	bc 01       	movw	r22, r24
    2fea:	cd 01       	movw	r24, r26
    2fec:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	9f a7       	std	Y+47, r25	; 0x2f
    2ff6:	8e a7       	std	Y+46, r24	; 0x2e
    2ff8:	0f c0       	rjmp	.+30     	; 0x3018 <LCD_vidInit+0x544>
    2ffa:	88 ec       	ldi	r24, 0xC8	; 200
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	99 ab       	std	Y+49, r25	; 0x31
    3000:	88 ab       	std	Y+48, r24	; 0x30
    3002:	88 a9       	ldd	r24, Y+48	; 0x30
    3004:	99 a9       	ldd	r25, Y+49	; 0x31
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <LCD_vidInit+0x532>
    300a:	99 ab       	std	Y+49, r25	; 0x31
    300c:	88 ab       	std	Y+48, r24	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300e:	8e a5       	ldd	r24, Y+46	; 0x2e
    3010:	9f a5       	ldd	r25, Y+47	; 0x2f
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	9f a7       	std	Y+47, r25	; 0x2f
    3016:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3018:	8e a5       	ldd	r24, Y+46	; 0x2e
    301a:	9f a5       	ldd	r25, Y+47	; 0x2f
    301c:	89 2b       	or	r24, r25
    301e:	69 f7       	brne	.-38     	; 0x2ffa <LCD_vidInit+0x526>
    3020:	14 c0       	rjmp	.+40     	; 0x304a <LCD_vidInit+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3022:	6a a5       	ldd	r22, Y+42	; 0x2a
    3024:	7b a5       	ldd	r23, Y+43	; 0x2b
    3026:	8c a5       	ldd	r24, Y+44	; 0x2c
    3028:	9d a5       	ldd	r25, Y+45	; 0x2d
    302a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	9f a7       	std	Y+47, r25	; 0x2f
    3034:	8e a7       	std	Y+46, r24	; 0x2e
    3036:	8e a5       	ldd	r24, Y+46	; 0x2e
    3038:	9f a5       	ldd	r25, Y+47	; 0x2f
    303a:	9b ab       	std	Y+51, r25	; 0x33
    303c:	8a ab       	std	Y+50, r24	; 0x32
    303e:	8a a9       	ldd	r24, Y+50	; 0x32
    3040:	9b a9       	ldd	r25, Y+51	; 0x33
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <LCD_vidInit+0x56e>
    3046:	9b ab       	std	Y+51, r25	; 0x33
    3048:	8a ab       	std	Y+50, r24	; 0x32
	_delay_ms(2);
	LCD_vidSendCommand(0b00000110, copy_tLCD); //entry mode set
    304a:	ce 01       	movw	r24, r28
    304c:	88 5b       	subi	r24, 0xB8	; 184
    304e:	9f 4f       	sbci	r25, 0xFF	; 255
    3050:	fc 01       	movw	r30, r24
    3052:	20 81       	ld	r18, Z
    3054:	fc 01       	movw	r30, r24
    3056:	31 81       	ldd	r19, Z+1	; 0x01
    3058:	fc 01       	movw	r30, r24
    305a:	42 81       	ldd	r20, Z+2	; 0x02
    305c:	fc 01       	movw	r30, r24
    305e:	53 81       	ldd	r21, Z+3	; 0x03
    3060:	fc 01       	movw	r30, r24
    3062:	64 81       	ldd	r22, Z+4	; 0x04
    3064:	86 e0       	ldi	r24, 0x06	; 6
    3066:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_vidSendCommand>
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	a0 e0       	ldi	r26, 0x00	; 0
    3070:	b0 e4       	ldi	r27, 0x40	; 64
    3072:	8a 83       	std	Y+2, r24	; 0x02
    3074:	9b 83       	std	Y+3, r25	; 0x03
    3076:	ac 83       	std	Y+4, r26	; 0x04
    3078:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	4a ef       	ldi	r20, 0xFA	; 250
    3080:	54 e4       	ldi	r21, 0x44	; 68
    3082:	6a 81       	ldd	r22, Y+2	; 0x02
    3084:	7b 81       	ldd	r23, Y+3	; 0x03
    3086:	8c 81       	ldd	r24, Y+4	; 0x04
    3088:	9d 81       	ldd	r25, Y+5	; 0x05
    308a:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	88 a3       	std	Y+32, r24	; 0x20
    3094:	99 a3       	std	Y+33, r25	; 0x21
    3096:	aa a3       	std	Y+34, r26	; 0x22
    3098:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	68 a1       	ldd	r22, Y+32	; 0x20
    30a4:	79 a1       	ldd	r23, Y+33	; 0x21
    30a6:	8a a1       	ldd	r24, Y+34	; 0x22
    30a8:	9b a1       	ldd	r25, Y+35	; 0x23
    30aa:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    30ae:	88 23       	and	r24, r24
    30b0:	2c f4       	brge	.+10     	; 0x30bc <LCD_vidInit+0x5e8>
		__ticks = 1;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	9d a3       	std	Y+37, r25	; 0x25
    30b8:	8c a3       	std	Y+36, r24	; 0x24
    30ba:	3f c0       	rjmp	.+126    	; 0x313a <LCD_vidInit+0x666>
	else if (__tmp > 65535)
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	3f ef       	ldi	r19, 0xFF	; 255
    30c0:	4f e7       	ldi	r20, 0x7F	; 127
    30c2:	57 e4       	ldi	r21, 0x47	; 71
    30c4:	68 a1       	ldd	r22, Y+32	; 0x20
    30c6:	79 a1       	ldd	r23, Y+33	; 0x21
    30c8:	8a a1       	ldd	r24, Y+34	; 0x22
    30ca:	9b a1       	ldd	r25, Y+35	; 0x23
    30cc:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    30d0:	18 16       	cp	r1, r24
    30d2:	4c f5       	brge	.+82     	; 0x3126 <LCD_vidInit+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e2       	ldi	r20, 0x20	; 32
    30da:	51 e4       	ldi	r21, 0x41	; 65
    30dc:	6a 81       	ldd	r22, Y+2	; 0x02
    30de:	7b 81       	ldd	r23, Y+3	; 0x03
    30e0:	8c 81       	ldd	r24, Y+4	; 0x04
    30e2:	9d 81       	ldd	r25, Y+5	; 0x05
    30e4:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	9d a3       	std	Y+37, r25	; 0x25
    30fa:	8c a3       	std	Y+36, r24	; 0x24
    30fc:	0f c0       	rjmp	.+30     	; 0x311c <LCD_vidInit+0x648>
    30fe:	88 ec       	ldi	r24, 0xC8	; 200
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9f a3       	std	Y+39, r25	; 0x27
    3104:	8e a3       	std	Y+38, r24	; 0x26
    3106:	8e a1       	ldd	r24, Y+38	; 0x26
    3108:	9f a1       	ldd	r25, Y+39	; 0x27
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <LCD_vidInit+0x636>
    310e:	9f a3       	std	Y+39, r25	; 0x27
    3110:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3112:	8c a1       	ldd	r24, Y+36	; 0x24
    3114:	9d a1       	ldd	r25, Y+37	; 0x25
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	9d a3       	std	Y+37, r25	; 0x25
    311a:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311c:	8c a1       	ldd	r24, Y+36	; 0x24
    311e:	9d a1       	ldd	r25, Y+37	; 0x25
    3120:	89 2b       	or	r24, r25
    3122:	69 f7       	brne	.-38     	; 0x30fe <LCD_vidInit+0x62a>
    3124:	14 c0       	rjmp	.+40     	; 0x314e <LCD_vidInit+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3126:	68 a1       	ldd	r22, Y+32	; 0x20
    3128:	79 a1       	ldd	r23, Y+33	; 0x21
    312a:	8a a1       	ldd	r24, Y+34	; 0x22
    312c:	9b a1       	ldd	r25, Y+35	; 0x23
    312e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	9d a3       	std	Y+37, r25	; 0x25
    3138:	8c a3       	std	Y+36, r24	; 0x24
    313a:	8c a1       	ldd	r24, Y+36	; 0x24
    313c:	9d a1       	ldd	r25, Y+37	; 0x25
    313e:	99 a7       	std	Y+41, r25	; 0x29
    3140:	88 a7       	std	Y+40, r24	; 0x28
    3142:	88 a5       	ldd	r24, Y+40	; 0x28
    3144:	99 a5       	ldd	r25, Y+41	; 0x29
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <LCD_vidInit+0x672>
    314a:	99 a7       	std	Y+41, r25	; 0x29
    314c:	88 a7       	std	Y+40, r24	; 0x28
	_delay_ms(2);

	LCD_vidPulseEnable(copy_tLCD.ENPin, copy_tLCD.CfgPort);
    314e:	ce 01       	movw	r24, r28
    3150:	88 5b       	subi	r24, 0xB8	; 184
    3152:	9f 4f       	sbci	r25, 0xFF	; 255
    3154:	fc 01       	movw	r30, r24
    3156:	21 81       	ldd	r18, Z+1	; 0x01
    3158:	ce 01       	movw	r24, r28
    315a:	88 5b       	subi	r24, 0xB8	; 184
    315c:	9f 4f       	sbci	r25, 0xFF	; 255
    315e:	fc 01       	movw	r30, r24
    3160:	84 81       	ldd	r24, Z+4	; 0x04
    3162:	62 2f       	mov	r22, r18
    3164:	0e 94 c4 1a 	call	0x3588	; 0x3588 <LCD_vidPulseEnable>

	return LOC_u8ErrorStatus;
    3168:	89 81       	ldd	r24, Y+1	; 0x01

}
    316a:	c4 5b       	subi	r28, 0xB4	; 180
    316c:	df 4f       	sbci	r29, 0xFF	; 255
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	1f 91       	pop	r17
    317e:	0f 91       	pop	r16
    3180:	08 95       	ret

00003182 <LCD_vidSendChar>:

LCD_tenuErrorStatus LCD_vidSendChar(u8 LCD_u8Char, LCD_tLCD copy_tLCD) {
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	27 97       	sbiw	r28, 0x07	; 7
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	8a 83       	std	Y+2, r24	; 0x02
    3198:	2b 83       	std	Y+3, r18	; 0x03
    319a:	3c 83       	std	Y+4, r19	; 0x04
    319c:	4d 83       	std	Y+5, r20	; 0x05
    319e:	5e 83       	std	Y+6, r21	; 0x06
    31a0:	6f 83       	std	Y+7, r22	; 0x07

	u8 LOC_u8ErrorStatus = LCD_enuOk;
    31a2:	19 82       	std	Y+1, r1	; 0x01

	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
    31a4:	8f 81       	ldd	r24, Y+7	; 0x07
    31a6:	88 30       	cpi	r24, 0x08	; 8
    31a8:	18 f5       	brcc	.+70     	; 0x31f0 <LCD_vidSendChar+0x6e>
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
    31aa:	8c 81       	ldd	r24, Y+4	; 0x04
LCD_tenuErrorStatus LCD_vidSendChar(u8 LCD_u8Char, LCD_tLCD copy_tLCD) {

	u8 LOC_u8ErrorStatus = LCD_enuOk;

	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
    31ac:	84 30       	cpi	r24, 0x04	; 4
    31ae:	00 f5       	brcc	.+64     	; 0x31f0 <LCD_vidSendChar+0x6e>
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
		DIO_enuSetPinValue(copy_tLCD.CfgPort, copy_tLCD.RSPin, LCD_RS_SendData); // RS = 1
    31b0:	8d 81       	ldd	r24, Y+5	; 0x05
    31b2:	28 2f       	mov	r18, r24
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	8c 81       	ldd	r24, Y+4	; 0x04
    31b8:	88 2f       	mov	r24, r24
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	41 e0       	ldi	r20, 0x01	; 1
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	b9 01       	movw	r22, r18
    31c2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
		DIO_enuSetPinValue(copy_tLCD.CfgPort, copy_tLCD.RWPin, LCD_RW_Write); // RW = 0
    31c6:	8e 81       	ldd	r24, Y+6	; 0x06
    31c8:	28 2f       	mov	r18, r24
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	8c 81       	ldd	r24, Y+4	; 0x04
    31ce:	88 2f       	mov	r24, r24
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	40 e0       	ldi	r20, 0x00	; 0
    31d4:	50 e0       	ldi	r21, 0x00	; 0
    31d6:	b9 01       	movw	r22, r18
    31d8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
		DIO_enuSetPortValue(copy_tLCD.DataPort, LCD_u8Char);
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	6a 81       	ldd	r22, Y+2	; 0x02
    31e0:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
		LCD_vidPulseEnable(copy_tLCD.ENPin, copy_tLCD.CfgPort);
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	8f 81       	ldd	r24, Y+7	; 0x07
    31e8:	69 2f       	mov	r22, r25
    31ea:	0e 94 c4 1a 	call	0x3588	; 0x3588 <LCD_vidPulseEnable>

	u8 LOC_u8ErrorStatus = LCD_enuOk;

	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <LCD_vidSendChar+0x72>
		DIO_enuSetPinValue(copy_tLCD.CfgPort, copy_tLCD.RSPin, LCD_RS_SendData); // RS = 1
		DIO_enuSetPinValue(copy_tLCD.CfgPort, copy_tLCD.RWPin, LCD_RW_Write); // RW = 0
		DIO_enuSetPortValue(copy_tLCD.DataPort, LCD_u8Char);
		LCD_vidPulseEnable(copy_tLCD.ENPin, copy_tLCD.CfgPort);
	} else
		LOC_u8ErrorStatus = LCD_invalidInput;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	89 83       	std	Y+1, r24	; 0x01

	return LOC_u8ErrorStatus;
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    31f6:	27 96       	adiw	r28, 0x07	; 7
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	08 95       	ret

00003208 <LCD_vidSendString>:

LCD_tenuErrorStatus LCD_vidSendString(u8 *LCD_u8CharArr, LCD_tLCD copy_tLCD) {
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    3210:	28 97       	sbiw	r28, 0x08	; 8
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	cd bf       	out	0x3d, r28	; 61
    321c:	9b 83       	std	Y+3, r25	; 0x03
    321e:	8a 83       	std	Y+2, r24	; 0x02
    3220:	2c 83       	std	Y+4, r18	; 0x04
    3222:	3d 83       	std	Y+5, r19	; 0x05
    3224:	4e 83       	std	Y+6, r20	; 0x06
    3226:	5f 83       	std	Y+7, r21	; 0x07
    3228:	68 87       	std	Y+8, r22	; 0x08
	u8 LOC_u8ErrorStatus = LCD_enuOk;
    322a:	19 82       	std	Y+1, r1	; 0x01

	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
    322c:	88 85       	ldd	r24, Y+8	; 0x08
    322e:	88 30       	cpi	r24, 0x08	; 8
    3230:	d8 f4       	brcc	.+54     	; 0x3268 <LCD_vidSendString+0x60>
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
    3232:	8d 81       	ldd	r24, Y+5	; 0x05

LCD_tenuErrorStatus LCD_vidSendString(u8 *LCD_u8CharArr, LCD_tLCD copy_tLCD) {
	u8 LOC_u8ErrorStatus = LCD_enuOk;

	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
    3234:	84 30       	cpi	r24, 0x04	; 4
    3236:	c0 f4       	brcc	.+48     	; 0x3268 <LCD_vidSendString+0x60>
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
		while (*LCD_u8CharArr != '\0') {
    3238:	10 c0       	rjmp	.+32     	; 0x325a <LCD_vidSendString+0x52>
			LCD_vidSendChar(*LCD_u8CharArr, copy_tLCD);
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	9b 81       	ldd	r25, Y+3	; 0x03
    323e:	fc 01       	movw	r30, r24
    3240:	80 81       	ld	r24, Z
    3242:	2c 81       	ldd	r18, Y+4	; 0x04
    3244:	3d 81       	ldd	r19, Y+5	; 0x05
    3246:	4e 81       	ldd	r20, Y+6	; 0x06
    3248:	5f 81       	ldd	r21, Y+7	; 0x07
    324a:	68 85       	ldd	r22, Y+8	; 0x08
    324c:	0e 94 c1 18 	call	0x3182	; 0x3182 <LCD_vidSendChar>
			LCD_u8CharArr++;
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	9b 81       	ldd	r25, Y+3	; 0x03
    3254:	01 96       	adiw	r24, 0x01	; 1
    3256:	9b 83       	std	Y+3, r25	; 0x03
    3258:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ErrorStatus = LCD_enuOk;

	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
		while (*LCD_u8CharArr != '\0') {
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	9b 81       	ldd	r25, Y+3	; 0x03
    325e:	fc 01       	movw	r30, r24
    3260:	80 81       	ld	r24, Z
    3262:	88 23       	and	r24, r24
    3264:	51 f7       	brne	.-44     	; 0x323a <LCD_vidSendString+0x32>
}

LCD_tenuErrorStatus LCD_vidSendString(u8 *LCD_u8CharArr, LCD_tLCD copy_tLCD) {
	u8 LOC_u8ErrorStatus = LCD_enuOk;

	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
    3266:	02 c0       	rjmp	.+4      	; 0x326c <LCD_vidSendString+0x64>
		while (*LCD_u8CharArr != '\0') {
			LCD_vidSendChar(*LCD_u8CharArr, copy_tLCD);
			LCD_u8CharArr++;
		}
	} else
		LOC_u8ErrorStatus = LCD_invalidInput;
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	89 83       	std	Y+1, r24	; 0x01
	return LOC_u8ErrorStatus;
    326c:	89 81       	ldd	r24, Y+1	; 0x01
}
    326e:	28 96       	adiw	r28, 0x08	; 8
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	f8 94       	cli
    3274:	de bf       	out	0x3e, r29	; 62
    3276:	0f be       	out	0x3f, r0	; 63
    3278:	cd bf       	out	0x3d, r28	; 61
    327a:	df 91       	pop	r29
    327c:	cf 91       	pop	r28
    327e:	08 95       	ret

00003280 <LCD_vidSendCommand>:

LCD_tenuErrorStatus LCD_vidSendCommand(u8 LCD_u8Command, LCD_tLCD copy_tLCD) {
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	27 97       	sbiw	r28, 0x07	; 7
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	8a 83       	std	Y+2, r24	; 0x02
    3296:	2b 83       	std	Y+3, r18	; 0x03
    3298:	3c 83       	std	Y+4, r19	; 0x04
    329a:	4d 83       	std	Y+5, r20	; 0x05
    329c:	5e 83       	std	Y+6, r21	; 0x06
    329e:	6f 83       	std	Y+7, r22	; 0x07

	u8 LOC_u8ErrorStatus = LCD_enuOk;
    32a0:	19 82       	std	Y+1, r1	; 0x01
	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
    32a2:	8f 81       	ldd	r24, Y+7	; 0x07
    32a4:	88 30       	cpi	r24, 0x08	; 8
    32a6:	18 f5       	brcc	.+70     	; 0x32ee <LCD_vidSendCommand+0x6e>
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
    32a8:	8c 81       	ldd	r24, Y+4	; 0x04

LCD_tenuErrorStatus LCD_vidSendCommand(u8 LCD_u8Command, LCD_tLCD copy_tLCD) {

	u8 LOC_u8ErrorStatus = LCD_enuOk;
	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
    32aa:	84 30       	cpi	r24, 0x04	; 4
    32ac:	00 f5       	brcc	.+64     	; 0x32ee <LCD_vidSendCommand+0x6e>
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
		DIO_enuSetPinValue(copy_tLCD.CfgPort, copy_tLCD.RSPin,
    32ae:	8d 81       	ldd	r24, Y+5	; 0x05
    32b0:	28 2f       	mov	r18, r24
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	8c 81       	ldd	r24, Y+4	; 0x04
    32b6:	88 2f       	mov	r24, r24
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	50 e0       	ldi	r21, 0x00	; 0
    32be:	b9 01       	movw	r22, r18
    32c0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
		LCD_RS_Configure); // RS = 0
		DIO_enuSetPinValue(copy_tLCD.CfgPort, copy_tLCD.RWPin, LCD_RW_Write); // RW = 0
    32c4:	8e 81       	ldd	r24, Y+6	; 0x06
    32c6:	28 2f       	mov	r18, r24
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	8c 81       	ldd	r24, Y+4	; 0x04
    32cc:	88 2f       	mov	r24, r24
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	b9 01       	movw	r22, r18
    32d6:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
		DIO_enuSetPortValue(copy_tLCD.DataPort, LCD_u8Command);     // send data
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	6a 81       	ldd	r22, Y+2	; 0x02
    32de:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>
		LCD_vidPulseEnable(copy_tLCD.ENPin, copy_tLCD.CfgPort);
    32e2:	9c 81       	ldd	r25, Y+4	; 0x04
    32e4:	8f 81       	ldd	r24, Y+7	; 0x07
    32e6:	69 2f       	mov	r22, r25
    32e8:	0e 94 c4 1a 	call	0x3588	; 0x3588 <LCD_vidPulseEnable>
LCD_tenuErrorStatus LCD_vidSendCommand(u8 LCD_u8Command, LCD_tLCD copy_tLCD) {

	u8 LOC_u8ErrorStatus = LCD_enuOk;
	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <LCD_vidSendCommand+0x72>
		LCD_RS_Configure); // RS = 0
		DIO_enuSetPinValue(copy_tLCD.CfgPort, copy_tLCD.RWPin, LCD_RW_Write); // RW = 0
		DIO_enuSetPortValue(copy_tLCD.DataPort, LCD_u8Command);     // send data
		LCD_vidPulseEnable(copy_tLCD.ENPin, copy_tLCD.CfgPort);
	} else
		LOC_u8ErrorStatus = LCD_invalidInput;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	89 83       	std	Y+1, r24	; 0x01
	return LOC_u8ErrorStatus;
    32f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    32f4:	27 96       	adiw	r28, 0x07	; 7
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <LCD_vidSendDigit>:

LCD_tenuErrorStatus LCD_vidSendDigit(u8 digit, LCD_tLCD copy_tLCD) {
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	27 97       	sbiw	r28, 0x07	; 7
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	8a 83       	std	Y+2, r24	; 0x02
    331c:	2b 83       	std	Y+3, r18	; 0x03
    331e:	3c 83       	std	Y+4, r19	; 0x04
    3320:	4d 83       	std	Y+5, r20	; 0x05
    3322:	5e 83       	std	Y+6, r21	; 0x06
    3324:	6f 83       	std	Y+7, r22	; 0x07
	u8 LOC_u8ErrorStatus = LCD_enuOk;
    3326:	19 82       	std	Y+1, r1	; 0x01
	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
    3328:	8f 81       	ldd	r24, Y+7	; 0x07
    332a:	88 30       	cpi	r24, 0x08	; 8
    332c:	68 f4       	brcc	.+26     	; 0x3348 <LCD_vidSendDigit+0x42>
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
    332e:	8c 81       	ldd	r24, Y+4	; 0x04
}

LCD_tenuErrorStatus LCD_vidSendDigit(u8 digit, LCD_tLCD copy_tLCD) {
	u8 LOC_u8ErrorStatus = LCD_enuOk;
	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
    3330:	84 30       	cpi	r24, 0x04	; 4
    3332:	50 f4       	brcc	.+20     	; 0x3348 <LCD_vidSendDigit+0x42>
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
		LCD_vidSendChar((char) digit + 48, copy_tLCD);
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	80 5d       	subi	r24, 0xD0	; 208
    3338:	2b 81       	ldd	r18, Y+3	; 0x03
    333a:	3c 81       	ldd	r19, Y+4	; 0x04
    333c:	4d 81       	ldd	r20, Y+5	; 0x05
    333e:	5e 81       	ldd	r21, Y+6	; 0x06
    3340:	6f 81       	ldd	r22, Y+7	; 0x07
    3342:	0e 94 c1 18 	call	0x3182	; 0x3182 <LCD_vidSendChar>
    3346:	02 c0       	rjmp	.+4      	; 0x334c <LCD_vidSendDigit+0x46>
	} else
		LOC_u8ErrorStatus = LCD_invalidInput;
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	89 83       	std	Y+1, r24	; 0x01
	return LOC_u8ErrorStatus;
    334c:	89 81       	ldd	r24, Y+1	; 0x01

}
    334e:	27 96       	adiw	r28, 0x07	; 7
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	f8 94       	cli
    3354:	de bf       	out	0x3e, r29	; 62
    3356:	0f be       	out	0x3f, r0	; 63
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <LCD_vidMoveCursor>:

LCD_tenuErrorStatus LCD_vidMoveCursor(u8 LCD_u8Line, u8 LCD_u8Index,
		LCD_tLCD copy_tLCD) {
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	cf 93       	push	r28
    3366:	df 93       	push	r29
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	28 97       	sbiw	r28, 0x08	; 8
    336e:	0f b6       	in	r0, 0x3f	; 63
    3370:	f8 94       	cli
    3372:	de bf       	out	0x3e, r29	; 62
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	cd bf       	out	0x3d, r28	; 61
    3378:	8a 83       	std	Y+2, r24	; 0x02
    337a:	6b 83       	std	Y+3, r22	; 0x03
    337c:	0c 83       	std	Y+4, r16	; 0x04
    337e:	1d 83       	std	Y+5, r17	; 0x05
    3380:	2e 83       	std	Y+6, r18	; 0x06
    3382:	3f 83       	std	Y+7, r19	; 0x07
    3384:	48 87       	std	Y+8, r20	; 0x08
	u8 LOC_u8ErrorStatus = LCD_enuOk;
    3386:	19 82       	std	Y+1, r1	; 0x01

	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
    3388:	88 85       	ldd	r24, Y+8	; 0x08
    338a:	88 30       	cpi	r24, 0x08	; 8
    338c:	18 f5       	brcc	.+70     	; 0x33d4 <LCD_vidMoveCursor+0x74>
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
    338e:	8d 81       	ldd	r24, Y+5	; 0x05
LCD_tenuErrorStatus LCD_vidMoveCursor(u8 LCD_u8Line, u8 LCD_u8Index,
		LCD_tLCD copy_tLCD) {
	u8 LOC_u8ErrorStatus = LCD_enuOk;

	if ((copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
			&& (copy_tLCD.CfgPort >= DIO_u8_PORTA
    3390:	84 30       	cpi	r24, 0x04	; 4
    3392:	00 f5       	brcc	.+64     	; 0x33d4 <LCD_vidMoveCursor+0x74>
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
		switch (LCD_u8Line) {
    3394:	8a 81       	ldd	r24, Y+2	; 0x02
    3396:	88 2f       	mov	r24, r24
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	19 f0       	breq	.+6      	; 0x33a4 <LCD_vidMoveCursor+0x44>
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	59 f0       	breq	.+22     	; 0x33b8 <LCD_vidMoveCursor+0x58>
    33a2:	14 c0       	rjmp	.+40     	; 0x33cc <LCD_vidMoveCursor+0x6c>
		case 0:
			LCD_vidSendCommand(LCD_DDRAM_DEFAULT_ADDRESS + LCD_u8Index,
    33a4:	8b 81       	ldd	r24, Y+3	; 0x03
    33a6:	80 58       	subi	r24, 0x80	; 128
    33a8:	2c 81       	ldd	r18, Y+4	; 0x04
    33aa:	3d 81       	ldd	r19, Y+5	; 0x05
    33ac:	4e 81       	ldd	r20, Y+6	; 0x06
    33ae:	5f 81       	ldd	r21, Y+7	; 0x07
    33b0:	68 85       	ldd	r22, Y+8	; 0x08
    33b2:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_vidSendCommand>
					copy_tLCD);
			break;
    33b6:	0d c0       	rjmp	.+26     	; 0x33d2 <LCD_vidMoveCursor+0x72>
		case 1:
			LCD_vidSendCommand(LCD_DDRAM_DEFAULT_ADDRESS + 0x40 + LCD_u8Index,
    33b8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ba:	80 54       	subi	r24, 0x40	; 64
    33bc:	2c 81       	ldd	r18, Y+4	; 0x04
    33be:	3d 81       	ldd	r19, Y+5	; 0x05
    33c0:	4e 81       	ldd	r20, Y+6	; 0x06
    33c2:	5f 81       	ldd	r21, Y+7	; 0x07
    33c4:	68 85       	ldd	r22, Y+8	; 0x08
    33c6:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_vidSendCommand>
					copy_tLCD);
			break;
    33ca:	03 c0       	rjmp	.+6      	; 0x33d2 <LCD_vidMoveCursor+0x72>
		default:
			LOC_u8ErrorStatus = LCD_invalidInput;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	89 83       	std	Y+1, r24	; 0x01
			break; //do nothing
    33d0:	00 00       	nop
		}
	} else
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <LCD_vidMoveCursor+0x78>
		LOC_u8ErrorStatus = LCD_invalidInput;
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	89 83       	std	Y+1, r24	; 0x01

	return LOC_u8ErrorStatus;
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    33da:	28 96       	adiw	r28, 0x08	; 8
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	1f 91       	pop	r17
    33ec:	0f 91       	pop	r16
    33ee:	08 95       	ret

000033f0 <LCD_vidSendNumber>:

LCD_tenuErrorStatus LCD_vidSendNumber(u16 Copy_u16Number, LCD_tLCD copy_tLCD) {
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	2c 97       	sbiw	r28, 0x0c	; 12
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	9f 83       	std	Y+7, r25	; 0x07
    3406:	8e 83       	std	Y+6, r24	; 0x06
    3408:	28 87       	std	Y+8, r18	; 0x08
    340a:	39 87       	std	Y+9, r19	; 0x09
    340c:	4a 87       	std	Y+10, r20	; 0x0a
    340e:	5b 87       	std	Y+11, r21	; 0x0b
    3410:	6c 87       	std	Y+12, r22	; 0x0c
	u8 LOC_u8ErrorStatus = LCD_enuOk;
    3412:	1c 82       	std	Y+4, r1	; 0x04

	//if pin is invalid OR port is invalid, just return;
	if (!(copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
    3414:	8c 85       	ldd	r24, Y+12	; 0x0c
    3416:	88 30       	cpi	r24, 0x08	; 8
    3418:	18 f4       	brcc	.+6      	; 0x3420 <LCD_vidSendNumber+0x30>
			|| !(copy_tLCD.CfgPort >= DIO_u8_PORTA
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
    341a:	89 85       	ldd	r24, Y+9	; 0x09
LCD_tenuErrorStatus LCD_vidSendNumber(u16 Copy_u16Number, LCD_tLCD copy_tLCD) {
	u8 LOC_u8ErrorStatus = LCD_enuOk;

	//if pin is invalid OR port is invalid, just return;
	if (!(copy_tLCD.ENPin >= DIO_u8_PIN0 && copy_tLCD.ENPin <= DIO_u8_PIN7)
			|| !(copy_tLCD.CfgPort >= DIO_u8_PORTA
    341c:	84 30       	cpi	r24, 0x04	; 4
    341e:	20 f0       	brcs	.+8      	; 0x3428 <LCD_vidSendNumber+0x38>
					&& copy_tLCD.CfgPort <= DIO_u8_PORTD)) {
		LOC_u8ErrorStatus = LCD_invalidInput;
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	8c 83       	std	Y+4, r24	; 0x04
		return LOC_u8ErrorStatus; //There is no need to continue with the function past this point: waste of time, memory and potential malicious use
    3424:	8c 81       	ldd	r24, Y+4	; 0x04
    3426:	a7 c0       	rjmp	.+334    	; 0x3576 <LCD_vidSendNumber+0x186>
	} else {
		u16 LOC_u16Digit = 0;
    3428:	1a 82       	std	Y+2, r1	; 0x02
    342a:	19 82       	std	Y+1, r1	; 0x01
		u8 add_Zero = 0;
    342c:	1b 82       	std	Y+3, r1	; 0x03
		while (Copy_u16Number > 0) {
    342e:	5b c0       	rjmp	.+182    	; 0x34e6 <LCD_vidSendNumber+0xf6>
			if (Copy_u16Number % 10 == 0 && LOC_u16Digit == 0) {
    3430:	4e 81       	ldd	r20, Y+6	; 0x06
    3432:	5f 81       	ldd	r21, Y+7	; 0x07
    3434:	9a 01       	movw	r18, r20
    3436:	ad ec       	ldi	r26, 0xCD	; 205
    3438:	bc ec       	ldi	r27, 0xCC	; 204
    343a:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__umulhisi3>
    343e:	96 95       	lsr	r25
    3440:	87 95       	ror	r24
    3442:	96 95       	lsr	r25
    3444:	87 95       	ror	r24
    3446:	96 95       	lsr	r25
    3448:	87 95       	ror	r24
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	9c 01       	movw	r18, r24
    3450:	22 0f       	add	r18, r18
    3452:	33 1f       	adc	r19, r19
    3454:	22 0f       	add	r18, r18
    3456:	33 1f       	adc	r19, r19
    3458:	82 0f       	add	r24, r18
    345a:	93 1f       	adc	r25, r19
    345c:	9a 01       	movw	r18, r20
    345e:	28 1b       	sub	r18, r24
    3460:	39 0b       	sbc	r19, r25
    3462:	c9 01       	movw	r24, r18
    3464:	89 2b       	or	r24, r25
    3466:	31 f4       	brne	.+12     	; 0x3474 <LCD_vidSendNumber+0x84>
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	89 2b       	or	r24, r25
    346e:	11 f4       	brne	.+4      	; 0x3474 <LCD_vidSendNumber+0x84>
				add_Zero = 1;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	8b 83       	std	Y+3, r24	; 0x03
			}
			LOC_u16Digit = LOC_u16Digit * 10 + (Copy_u16Number % 10);
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	9a 81       	ldd	r25, Y+2	; 0x02
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	9c 01       	movw	r18, r24
    347e:	22 0f       	add	r18, r18
    3480:	33 1f       	adc	r19, r19
    3482:	22 0f       	add	r18, r18
    3484:	33 1f       	adc	r19, r19
    3486:	fc 01       	movw	r30, r24
    3488:	e2 0f       	add	r30, r18
    348a:	f3 1f       	adc	r31, r19
    348c:	4e 81       	ldd	r20, Y+6	; 0x06
    348e:	5f 81       	ldd	r21, Y+7	; 0x07
    3490:	9a 01       	movw	r18, r20
    3492:	ad ec       	ldi	r26, 0xCD	; 205
    3494:	bc ec       	ldi	r27, 0xCC	; 204
    3496:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__umulhisi3>
    349a:	96 95       	lsr	r25
    349c:	87 95       	ror	r24
    349e:	96 95       	lsr	r25
    34a0:	87 95       	ror	r24
    34a2:	96 95       	lsr	r25
    34a4:	87 95       	ror	r24
    34a6:	88 0f       	add	r24, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	9c 01       	movw	r18, r24
    34ac:	22 0f       	add	r18, r18
    34ae:	33 1f       	adc	r19, r19
    34b0:	22 0f       	add	r18, r18
    34b2:	33 1f       	adc	r19, r19
    34b4:	82 0f       	add	r24, r18
    34b6:	93 1f       	adc	r25, r19
    34b8:	9a 01       	movw	r18, r20
    34ba:	28 1b       	sub	r18, r24
    34bc:	39 0b       	sbc	r19, r25
    34be:	c9 01       	movw	r24, r18
    34c0:	8e 0f       	add	r24, r30
    34c2:	9f 1f       	adc	r25, r31
    34c4:	9a 83       	std	Y+2, r25	; 0x02
    34c6:	89 83       	std	Y+1, r24	; 0x01
			Copy_u16Number /= 10;
    34c8:	8e 81       	ldd	r24, Y+6	; 0x06
    34ca:	9f 81       	ldd	r25, Y+7	; 0x07
    34cc:	9c 01       	movw	r18, r24
    34ce:	ad ec       	ldi	r26, 0xCD	; 205
    34d0:	bc ec       	ldi	r27, 0xCC	; 204
    34d2:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__umulhisi3>
    34d6:	96 95       	lsr	r25
    34d8:	87 95       	ror	r24
    34da:	96 95       	lsr	r25
    34dc:	87 95       	ror	r24
    34de:	96 95       	lsr	r25
    34e0:	87 95       	ror	r24
    34e2:	9f 83       	std	Y+7, r25	; 0x07
    34e4:	8e 83       	std	Y+6, r24	; 0x06
		LOC_u8ErrorStatus = LCD_invalidInput;
		return LOC_u8ErrorStatus; //There is no need to continue with the function past this point: waste of time, memory and potential malicious use
	} else {
		u16 LOC_u16Digit = 0;
		u8 add_Zero = 0;
		while (Copy_u16Number > 0) {
    34e6:	8e 81       	ldd	r24, Y+6	; 0x06
    34e8:	9f 81       	ldd	r25, Y+7	; 0x07
    34ea:	89 2b       	or	r24, r25
    34ec:	09 f0       	breq	.+2      	; 0x34f0 <LCD_vidSendNumber+0x100>
    34ee:	a0 cf       	rjmp	.-192    	; 0x3430 <LCD_vidSendNumber+0x40>
				add_Zero = 1;
			}
			LOC_u16Digit = LOC_u16Digit * 10 + (Copy_u16Number % 10);
			Copy_u16Number /= 10;
		}
		while (LOC_u16Digit > 0) {
    34f0:	32 c0       	rjmp	.+100    	; 0x3556 <LCD_vidSendNumber+0x166>
			u8 LOC_u8Digit = LOC_u16Digit % 10;
    34f2:	49 81       	ldd	r20, Y+1	; 0x01
    34f4:	5a 81       	ldd	r21, Y+2	; 0x02
    34f6:	9a 01       	movw	r18, r20
    34f8:	ad ec       	ldi	r26, 0xCD	; 205
    34fa:	bc ec       	ldi	r27, 0xCC	; 204
    34fc:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__umulhisi3>
    3500:	96 95       	lsr	r25
    3502:	87 95       	ror	r24
    3504:	96 95       	lsr	r25
    3506:	87 95       	ror	r24
    3508:	96 95       	lsr	r25
    350a:	87 95       	ror	r24
    350c:	88 0f       	add	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	9c 01       	movw	r18, r24
    3512:	22 0f       	add	r18, r18
    3514:	33 1f       	adc	r19, r19
    3516:	22 0f       	add	r18, r18
    3518:	33 1f       	adc	r19, r19
    351a:	82 0f       	add	r24, r18
    351c:	93 1f       	adc	r25, r19
    351e:	9a 01       	movw	r18, r20
    3520:	28 1b       	sub	r18, r24
    3522:	39 0b       	sbc	r19, r25
    3524:	c9 01       	movw	r24, r18
    3526:	8d 83       	std	Y+5, r24	; 0x05
			LCD_vidSendDigit(LOC_u8Digit, copy_tLCD);
    3528:	28 85       	ldd	r18, Y+8	; 0x08
    352a:	39 85       	ldd	r19, Y+9	; 0x09
    352c:	4a 85       	ldd	r20, Y+10	; 0x0a
    352e:	5b 85       	ldd	r21, Y+11	; 0x0b
    3530:	6c 85       	ldd	r22, Y+12	; 0x0c
    3532:	8d 81       	ldd	r24, Y+5	; 0x05
    3534:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_vidSendDigit>
			LOC_u16Digit /= 10;
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	9c 01       	movw	r18, r24
    353e:	ad ec       	ldi	r26, 0xCD	; 205
    3540:	bc ec       	ldi	r27, 0xCC	; 204
    3542:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__umulhisi3>
    3546:	96 95       	lsr	r25
    3548:	87 95       	ror	r24
    354a:	96 95       	lsr	r25
    354c:	87 95       	ror	r24
    354e:	96 95       	lsr	r25
    3550:	87 95       	ror	r24
    3552:	9a 83       	std	Y+2, r25	; 0x02
    3554:	89 83       	std	Y+1, r24	; 0x01
				add_Zero = 1;
			}
			LOC_u16Digit = LOC_u16Digit * 10 + (Copy_u16Number % 10);
			Copy_u16Number /= 10;
		}
		while (LOC_u16Digit > 0) {
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	89 2b       	or	r24, r25
    355c:	51 f6       	brne	.-108    	; 0x34f2 <LCD_vidSendNumber+0x102>
			u8 LOC_u8Digit = LOC_u16Digit % 10;
			LCD_vidSendDigit(LOC_u8Digit, copy_tLCD);
			LOC_u16Digit /= 10;
		}
		if (add_Zero)
    355e:	8b 81       	ldd	r24, Y+3	; 0x03
    3560:	88 23       	and	r24, r24
    3562:	41 f0       	breq	.+16     	; 0x3574 <LCD_vidSendNumber+0x184>
			LCD_vidSendDigit(0, copy_tLCD);
    3564:	28 85       	ldd	r18, Y+8	; 0x08
    3566:	39 85       	ldd	r19, Y+9	; 0x09
    3568:	4a 85       	ldd	r20, Y+10	; 0x0a
    356a:	5b 85       	ldd	r21, Y+11	; 0x0b
    356c:	6c 85       	ldd	r22, Y+12	; 0x0c
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_vidSendDigit>
		return LOC_u8ErrorStatus;
    3574:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    3576:	2c 96       	adiw	r28, 0x0c	; 12
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	08 95       	ret

00003588 <LCD_vidPulseEnable>:

LCD_tenuErrorStatus LCD_vidPulseEnable(u8 LCD_u8ENPin, u8 copy_u8CfgPort) {
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	61 97       	sbiw	r28, 0x11	; 17
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
    359c:	88 8b       	std	Y+16, r24	; 0x10
    359e:	69 8b       	std	Y+17, r22	; 0x11
	u8 LOC_u8ErrorStatus = LCD_enuOk;
    35a0:	19 82       	std	Y+1, r1	; 0x01
	if (LCD_u8ENPin >= DIO_u8_PIN0 && LCD_u8ENPin <= DIO_u8_PIN7) {
    35a2:	88 89       	ldd	r24, Y+16	; 0x10
    35a4:	88 30       	cpi	r24, 0x08	; 8
    35a6:	08 f0       	brcs	.+2      	; 0x35aa <LCD_vidPulseEnable+0x22>
    35a8:	90 c0       	rjmp	.+288    	; 0x36ca <LCD_vidPulseEnable+0x142>
		if (copy_u8CfgPort >= DIO_u8_PORTA && copy_u8CfgPort <= DIO_u8_PORTD) {
    35aa:	89 89       	ldd	r24, Y+17	; 0x11
    35ac:	84 30       	cpi	r24, 0x04	; 4
    35ae:	08 f0       	brcs	.+2      	; 0x35b2 <LCD_vidPulseEnable+0x2a>
    35b0:	89 c0       	rjmp	.+274    	; 0x36c4 <LCD_vidPulseEnable+0x13c>
			DIO_enuSetPinValue(copy_u8CfgPort, LCD_u8ENPin, LCD_Enable_On);
    35b2:	88 89       	ldd	r24, Y+16	; 0x10
    35b4:	28 2f       	mov	r18, r24
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	89 89       	ldd	r24, Y+17	; 0x11
    35ba:	88 2f       	mov	r24, r24
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	41 e0       	ldi	r20, 0x01	; 1
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	b9 01       	movw	r22, r18
    35c4:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a0 e0       	ldi	r26, 0x00	; 0
    35ce:	b0 e4       	ldi	r27, 0x40	; 64
    35d0:	8a 83       	std	Y+2, r24	; 0x02
    35d2:	9b 83       	std	Y+3, r25	; 0x03
    35d4:	ac 83       	std	Y+4, r26	; 0x04
    35d6:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	4a ef       	ldi	r20, 0xFA	; 250
    35de:	54 e4       	ldi	r21, 0x44	; 68
    35e0:	6a 81       	ldd	r22, Y+2	; 0x02
    35e2:	7b 81       	ldd	r23, Y+3	; 0x03
    35e4:	8c 81       	ldd	r24, Y+4	; 0x04
    35e6:	9d 81       	ldd	r25, Y+5	; 0x05
    35e8:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	8e 83       	std	Y+6, r24	; 0x06
    35f2:	9f 83       	std	Y+7, r25	; 0x07
    35f4:	a8 87       	std	Y+8, r26	; 0x08
    35f6:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e8       	ldi	r20, 0x80	; 128
    35fe:	5f e3       	ldi	r21, 0x3F	; 63
    3600:	6e 81       	ldd	r22, Y+6	; 0x06
    3602:	7f 81       	ldd	r23, Y+7	; 0x07
    3604:	88 85       	ldd	r24, Y+8	; 0x08
    3606:	99 85       	ldd	r25, Y+9	; 0x09
    3608:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    360c:	88 23       	and	r24, r24
    360e:	2c f4       	brge	.+10     	; 0x361a <LCD_vidPulseEnable+0x92>
		__ticks = 1;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	9b 87       	std	Y+11, r25	; 0x0b
    3616:	8a 87       	std	Y+10, r24	; 0x0a
    3618:	3f c0       	rjmp	.+126    	; 0x3698 <LCD_vidPulseEnable+0x110>
	else if (__tmp > 65535)
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	3f ef       	ldi	r19, 0xFF	; 255
    361e:	4f e7       	ldi	r20, 0x7F	; 127
    3620:	57 e4       	ldi	r21, 0x47	; 71
    3622:	6e 81       	ldd	r22, Y+6	; 0x06
    3624:	7f 81       	ldd	r23, Y+7	; 0x07
    3626:	88 85       	ldd	r24, Y+8	; 0x08
    3628:	99 85       	ldd	r25, Y+9	; 0x09
    362a:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    362e:	18 16       	cp	r1, r24
    3630:	4c f5       	brge	.+82     	; 0x3684 <LCD_vidPulseEnable+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e2       	ldi	r20, 0x20	; 32
    3638:	51 e4       	ldi	r21, 0x41	; 65
    363a:	6a 81       	ldd	r22, Y+2	; 0x02
    363c:	7b 81       	ldd	r23, Y+3	; 0x03
    363e:	8c 81       	ldd	r24, Y+4	; 0x04
    3640:	9d 81       	ldd	r25, Y+5	; 0x05
    3642:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	9b 87       	std	Y+11, r25	; 0x0b
    3658:	8a 87       	std	Y+10, r24	; 0x0a
    365a:	0f c0       	rjmp	.+30     	; 0x367a <LCD_vidPulseEnable+0xf2>
    365c:	88 ec       	ldi	r24, 0xC8	; 200
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	9d 87       	std	Y+13, r25	; 0x0d
    3662:	8c 87       	std	Y+12, r24	; 0x0c
    3664:	8c 85       	ldd	r24, Y+12	; 0x0c
    3666:	9d 85       	ldd	r25, Y+13	; 0x0d
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <LCD_vidPulseEnable+0xe0>
    366c:	9d 87       	std	Y+13, r25	; 0x0d
    366e:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3670:	8a 85       	ldd	r24, Y+10	; 0x0a
    3672:	9b 85       	ldd	r25, Y+11	; 0x0b
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	9b 87       	std	Y+11, r25	; 0x0b
    3678:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367a:	8a 85       	ldd	r24, Y+10	; 0x0a
    367c:	9b 85       	ldd	r25, Y+11	; 0x0b
    367e:	89 2b       	or	r24, r25
    3680:	69 f7       	brne	.-38     	; 0x365c <LCD_vidPulseEnable+0xd4>
    3682:	14 c0       	rjmp	.+40     	; 0x36ac <LCD_vidPulseEnable+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3684:	6e 81       	ldd	r22, Y+6	; 0x06
    3686:	7f 81       	ldd	r23, Y+7	; 0x07
    3688:	88 85       	ldd	r24, Y+8	; 0x08
    368a:	99 85       	ldd	r25, Y+9	; 0x09
    368c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9b 87       	std	Y+11, r25	; 0x0b
    3696:	8a 87       	std	Y+10, r24	; 0x0a
    3698:	8a 85       	ldd	r24, Y+10	; 0x0a
    369a:	9b 85       	ldd	r25, Y+11	; 0x0b
    369c:	9f 87       	std	Y+15, r25	; 0x0f
    369e:	8e 87       	std	Y+14, r24	; 0x0e
    36a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    36a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <LCD_vidPulseEnable+0x11c>
    36a8:	9f 87       	std	Y+15, r25	; 0x0f
    36aa:	8e 87       	std	Y+14, r24	; 0x0e
			_delay_ms(2);
			DIO_enuSetPinValue(copy_u8CfgPort, LCD_u8ENPin, LCD_Enable_Off);
    36ac:	88 89       	ldd	r24, Y+16	; 0x10
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	89 89       	ldd	r24, Y+17	; 0x11
    36b4:	88 2f       	mov	r24, r24
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	40 e0       	ldi	r20, 0x00	; 0
    36ba:	50 e0       	ldi	r21, 0x00	; 0
    36bc:	b9 01       	movw	r22, r18
    36be:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
    36c2:	05 c0       	rjmp	.+10     	; 0x36ce <LCD_vidPulseEnable+0x146>
		} else
			LOC_u8ErrorStatus = LCD_invalidInput;
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	89 83       	std	Y+1, r24	; 0x01
    36c8:	02 c0       	rjmp	.+4      	; 0x36ce <LCD_vidPulseEnable+0x146>
	} else
		LOC_u8ErrorStatus = LCD_invalidInput;
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	89 83       	std	Y+1, r24	; 0x01
	return LOC_u8ErrorStatus;
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    36d0:	61 96       	adiw	r28, 0x11	; 17
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	08 95       	ret

000036e2 <Keypad_voidGetPressedKey>:
//  I took this driver from Anas  

u8 KeyPadValues[4][4] = { { 1, 2, 3, 1 }, { 3, 4, 5, 1 }, { 6, 7, 8, 1 }, { 4,
		0, 2, 1 } };

u8 Keypad_voidGetPressedKey(void) {
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
    36ea:	61 97       	sbiw	r28, 0x11	; 17
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	cd bf       	out	0x3d, r28	; 61

	u8 KeyPadResult = 0xff;
    36f6:	8f ef       	ldi	r24, 0xFF	; 255
    36f8:	89 83       	std	Y+1, r24	; 0x01

	for (u8 col = 0; col < 4; col++) {
    36fa:	1a 82       	std	Y+2, r1	; 0x02
    36fc:	b5 c0       	rjmp	.+362    	; 0x3868 <Keypad_voidGetPressedKey+0x186>
		DIO_enuSetPinValue(DIO_u8_PORTD, col, DIO_u8_LOW); //to activate  column
    36fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3700:	88 2f       	mov	r24, r24
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	bc 01       	movw	r22, r24
    370a:	83 e0       	ldi	r24, 0x03	; 3
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
		for (u8 row = 0; row < 4; row++) {
    3712:	1b 82       	std	Y+3, r1	; 0x03
    3714:	98 c0       	rjmp	.+304    	; 0x3846 <Keypad_voidGetPressedKey+0x164>

			if (DIO_u8GetPinValue(DIO_u8_PORTD, row + 4) == 0) {
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	8c 5f       	subi	r24, 0xFC	; 252
    371a:	68 2f       	mov	r22, r24
    371c:	83 e0       	ldi	r24, 0x03	; 3
    371e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_u8GetPinValue>
    3722:	88 23       	and	r24, r24
    3724:	09 f0       	breq	.+2      	; 0x3728 <Keypad_voidGetPressedKey+0x46>
    3726:	8c c0       	rjmp	.+280    	; 0x3840 <Keypad_voidGetPressedKey+0x15e>

				KeyPadResult = KeyPadValues[col][row];
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	28 2f       	mov	r18, r24
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	8b 81       	ldd	r24, Y+3	; 0x03
    3730:	88 2f       	mov	r24, r24
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	22 0f       	add	r18, r18
    3736:	33 1f       	adc	r19, r19
    3738:	22 0f       	add	r18, r18
    373a:	33 1f       	adc	r19, r19
    373c:	82 0f       	add	r24, r18
    373e:	93 1f       	adc	r25, r19
    3740:	85 59       	subi	r24, 0x95	; 149
    3742:	9f 4f       	sbci	r25, 0xFF	; 255
    3744:	fc 01       	movw	r30, r24
    3746:	80 81       	ld	r24, Z
    3748:	89 83       	std	Y+1, r24	; 0x01

				while (DIO_u8GetPinValue(DIO_u8_PORTD, row + 4) == 0)
    374a:	00 00       	nop
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	8c 5f       	subi	r24, 0xFC	; 252
    3750:	68 2f       	mov	r22, r24
    3752:	83 e0       	ldi	r24, 0x03	; 3
    3754:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_u8GetPinValue>
    3758:	88 23       	and	r24, r24
    375a:	c1 f3       	breq	.-16     	; 0x374c <Keypad_voidGetPressedKey+0x6a>
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	a0 e2       	ldi	r26, 0x20	; 32
    3762:	b1 e4       	ldi	r27, 0x41	; 65
    3764:	8c 83       	std	Y+4, r24	; 0x04
    3766:	9d 83       	std	Y+5, r25	; 0x05
    3768:	ae 83       	std	Y+6, r26	; 0x06
    376a:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	4a ef       	ldi	r20, 0xFA	; 250
    3772:	54 e4       	ldi	r21, 0x44	; 68
    3774:	6c 81       	ldd	r22, Y+4	; 0x04
    3776:	7d 81       	ldd	r23, Y+5	; 0x05
    3778:	8e 81       	ldd	r24, Y+6	; 0x06
    377a:	9f 81       	ldd	r25, Y+7	; 0x07
    377c:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	88 87       	std	Y+8, r24	; 0x08
    3786:	99 87       	std	Y+9, r25	; 0x09
    3788:	aa 87       	std	Y+10, r26	; 0x0a
    378a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e8       	ldi	r20, 0x80	; 128
    3792:	5f e3       	ldi	r21, 0x3F	; 63
    3794:	68 85       	ldd	r22, Y+8	; 0x08
    3796:	79 85       	ldd	r23, Y+9	; 0x09
    3798:	8a 85       	ldd	r24, Y+10	; 0x0a
    379a:	9b 85       	ldd	r25, Y+11	; 0x0b
    379c:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__cmpsf2>
    37a0:	88 23       	and	r24, r24
    37a2:	2c f4       	brge	.+10     	; 0x37ae <Keypad_voidGetPressedKey+0xcc>
		__ticks = 1;
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	9d 87       	std	Y+13, r25	; 0x0d
    37aa:	8c 87       	std	Y+12, r24	; 0x0c
    37ac:	3f c0       	rjmp	.+126    	; 0x382c <Keypad_voidGetPressedKey+0x14a>
	else if (__tmp > 65535)
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	3f ef       	ldi	r19, 0xFF	; 255
    37b2:	4f e7       	ldi	r20, 0x7F	; 127
    37b4:	57 e4       	ldi	r21, 0x47	; 71
    37b6:	68 85       	ldd	r22, Y+8	; 0x08
    37b8:	79 85       	ldd	r23, Y+9	; 0x09
    37ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    37bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    37be:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    37c2:	18 16       	cp	r1, r24
    37c4:	4c f5       	brge	.+82     	; 0x3818 <Keypad_voidGetPressedKey+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e2       	ldi	r20, 0x20	; 32
    37cc:	51 e4       	ldi	r21, 0x41	; 65
    37ce:	6c 81       	ldd	r22, Y+4	; 0x04
    37d0:	7d 81       	ldd	r23, Y+5	; 0x05
    37d2:	8e 81       	ldd	r24, Y+6	; 0x06
    37d4:	9f 81       	ldd	r25, Y+7	; 0x07
    37d6:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	bc 01       	movw	r22, r24
    37e0:	cd 01       	movw	r24, r26
    37e2:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	9d 87       	std	Y+13, r25	; 0x0d
    37ec:	8c 87       	std	Y+12, r24	; 0x0c
    37ee:	0f c0       	rjmp	.+30     	; 0x380e <Keypad_voidGetPressedKey+0x12c>
    37f0:	88 ec       	ldi	r24, 0xC8	; 200
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	9f 87       	std	Y+15, r25	; 0x0f
    37f6:	8e 87       	std	Y+14, r24	; 0x0e
    37f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    37fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	f1 f7       	brne	.-4      	; 0x37fc <Keypad_voidGetPressedKey+0x11a>
    3800:	9f 87       	std	Y+15, r25	; 0x0f
    3802:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3804:	8c 85       	ldd	r24, Y+12	; 0x0c
    3806:	9d 85       	ldd	r25, Y+13	; 0x0d
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	9d 87       	std	Y+13, r25	; 0x0d
    380c:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3810:	9d 85       	ldd	r25, Y+13	; 0x0d
    3812:	89 2b       	or	r24, r25
    3814:	69 f7       	brne	.-38     	; 0x37f0 <Keypad_voidGetPressedKey+0x10e>
    3816:	14 c0       	rjmp	.+40     	; 0x3840 <Keypad_voidGetPressedKey+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3818:	68 85       	ldd	r22, Y+8	; 0x08
    381a:	79 85       	ldd	r23, Y+9	; 0x09
    381c:	8a 85       	ldd	r24, Y+10	; 0x0a
    381e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3820:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__fixunssfsi>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	9d 87       	std	Y+13, r25	; 0x0d
    382a:	8c 87       	std	Y+12, r24	; 0x0c
    382c:	8c 85       	ldd	r24, Y+12	; 0x0c
    382e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3830:	99 8b       	std	Y+17, r25	; 0x11
    3832:	88 8b       	std	Y+16, r24	; 0x10
    3834:	88 89       	ldd	r24, Y+16	; 0x10
    3836:	99 89       	ldd	r25, Y+17	; 0x11
    3838:	01 97       	sbiw	r24, 0x01	; 1
    383a:	f1 f7       	brne	.-4      	; 0x3838 <Keypad_voidGetPressedKey+0x156>
    383c:	99 8b       	std	Y+17, r25	; 0x11
    383e:	88 8b       	std	Y+16, r24	; 0x10

	u8 KeyPadResult = 0xff;

	for (u8 col = 0; col < 4; col++) {
		DIO_enuSetPinValue(DIO_u8_PORTD, col, DIO_u8_LOW); //to activate  column
		for (u8 row = 0; row < 4; row++) {
    3840:	8b 81       	ldd	r24, Y+3	; 0x03
    3842:	8f 5f       	subi	r24, 0xFF	; 255
    3844:	8b 83       	std	Y+3, r24	; 0x03
    3846:	8b 81       	ldd	r24, Y+3	; 0x03
    3848:	84 30       	cpi	r24, 0x04	; 4
    384a:	08 f4       	brcc	.+2      	; 0x384e <Keypad_voidGetPressedKey+0x16c>
    384c:	64 cf       	rjmp	.-312    	; 0x3716 <Keypad_voidGetPressedKey+0x34>
				_delay_ms(10);

			}

		}
		DIO_enuSetPinValue(DIO_u8_PORTD, col, DIO_u8_LOW); //to close column
    384e:	8a 81       	ldd	r24, Y+2	; 0x02
    3850:	88 2f       	mov	r24, r24
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	40 e0       	ldi	r20, 0x00	; 0
    3856:	50 e0       	ldi	r21, 0x00	; 0
    3858:	bc 01       	movw	r22, r24
    385a:	83 e0       	ldi	r24, 0x03	; 3
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>

u8 Keypad_voidGetPressedKey(void) {

	u8 KeyPadResult = 0xff;

	for (u8 col = 0; col < 4; col++) {
    3862:	8a 81       	ldd	r24, Y+2	; 0x02
    3864:	8f 5f       	subi	r24, 0xFF	; 255
    3866:	8a 83       	std	Y+2, r24	; 0x02
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	84 30       	cpi	r24, 0x04	; 4
    386c:	08 f4       	brcc	.+2      	; 0x3870 <Keypad_voidGetPressedKey+0x18e>
    386e:	47 cf       	rjmp	.-370    	; 0x36fe <Keypad_voidGetPressedKey+0x1c>

		}
		DIO_enuSetPinValue(DIO_u8_PORTD, col, DIO_u8_LOW); //to close column

	}
	return KeyPadResult;
    3870:	89 81       	ldd	r24, Y+1	; 0x01
}
    3872:	61 96       	adiw	r28, 0x11	; 17
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	f8 94       	cli
    3878:	de bf       	out	0x3e, r29	; 62
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	cd bf       	out	0x3d, r28	; 61
    387e:	df 91       	pop	r29
    3880:	cf 91       	pop	r28
    3882:	08 95       	ret

00003884 <Keypad_voidSetKeyPadDir>:
////////////////////////////////////////////////
void Keypad_voidSetKeyPadDir() {
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62

	DIO_enuSetPortDirection(DIO_u8_PORTD, 0x0f);
    388c:	6f e0       	ldi	r22, 0x0F	; 15
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	0e 94 25 10 	call	0x204a	; 0x204a <DIO_enuSetPortDirection>
	DIO_enuSetPortValue(DIO_u8_PORTD, 0xff); // F for 1111 of columns and F for pull up
    3894:	6f ef       	ldi	r22, 0xFF	; 255
    3896:	83 e0       	ldi	r24, 0x03	; 3
    3898:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_enuSetPortValue>

}
    389c:	00 00       	nop
    389e:	df 91       	pop	r29
    38a0:	cf 91       	pop	r28
    38a2:	08 95       	ret

000038a4 <main>:
			{ 'p', 'a','s', 's', '2' },
			{ 'p', 'a', 's', 's', '3' } };

u8 compare_arrays(u8 *arr1, u8 *arr2, u8 size);
void LogIn(void);
int main() {
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	00 d0       	rcall	.+0      	; 0x38aa <main+0x6>
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62



	UART_voidInit();
    38ae:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_voidInit>
	DIO_enuSetPinDirection(DIO_u8_PORTA, DIO_u8_PIN7, DIO_u8_OUTPUT);
    38b2:	41 e0       	ldi	r20, 0x01	; 1
    38b4:	67 e0       	ldi	r22, 0x07	; 7
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8_PORTA, DIO_u8_PIN4, DIO_u8_OUTPUT);
    38bc:	41 e0       	ldi	r20, 0x01	; 1
    38be:	64 e0       	ldi	r22, 0x04	; 4
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_enuSetPinDirection>


	LogIn();
    38c6:	0e 94 cf 1c 	call	0x399e	; 0x399e <LogIn>
	while (1) {
		if (userFound && passFound) {
    38ca:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
    38ce:	88 23       	and	r24, r24
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <main+0x30>
    38d2:	57 c0       	rjmp	.+174    	; 0x3982 <main+0xde>
    38d4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <passFound>
    38d8:	88 23       	and	r24, r24
    38da:	09 f4       	brne	.+2      	; 0x38de <main+0x3a>
    38dc:	52 c0       	rjmp	.+164    	; 0x3982 <main+0xde>
			u8 adminMode = 1;
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	89 83       	std	Y+1, r24	; 0x01
			UART_sendString("\n\nLogin Successful!\n");
    38e2:	8c e9       	ldi	r24, 0x9C	; 156
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>
			UART_sendString(
    38ea:	81 eb       	ldi	r24, 0xB1	; 177
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>
					"Send 1 to turn on the LED\n0 to turn it Off\nq to Log Out");
			while (adminMode) {
    38f2:	42 c0       	rjmp	.+132    	; 0x3978 <main+0xd4>
				u8 command = UART_u8GetChar();
    38f4:	0e 94 af 00 	call	0x15e	; 0x15e <UART_u8GetChar>
    38f8:	8a 83       	std	Y+2, r24	; 0x02
				switch (command) {
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	88 2f       	mov	r24, r24
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	81 33       	cpi	r24, 0x31	; 49
    3902:	91 05       	cpc	r25, r1
    3904:	31 f0       	breq	.+12     	; 0x3912 <main+0x6e>
    3906:	81 37       	cpi	r24, 0x71	; 113
    3908:	91 05       	cpc	r25, r1
    390a:	a9 f0       	breq	.+42     	; 0x3936 <main+0x92>
    390c:	c0 97       	sbiw	r24, 0x30	; 48
    390e:	51 f0       	breq	.+20     	; 0x3924 <main+0x80>
    3910:	32 c0       	rjmp	.+100    	; 0x3976 <main+0xd2>
				case '1':
					DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN7, DIO_u8_HIGH);
    3912:	41 e0       	ldi	r20, 0x01	; 1
    3914:	50 e0       	ldi	r21, 0x00	; 0
    3916:	67 e0       	ldi	r22, 0x07	; 7
    3918:	70 e0       	ldi	r23, 0x00	; 0
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
					break;
    3922:	2a c0       	rjmp	.+84     	; 0x3978 <main+0xd4>
				case '0':
					DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN7, DIO_u8_LOW);
    3924:	40 e0       	ldi	r20, 0x00	; 0
    3926:	50 e0       	ldi	r21, 0x00	; 0
    3928:	67 e0       	ldi	r22, 0x07	; 7
    392a:	70 e0       	ldi	r23, 0x00	; 0
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
					break;
    3934:	21 c0       	rjmp	.+66     	; 0x3978 <main+0xd4>
				case 'q':
					DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN7, DIO_u8_LOW);
    3936:	40 e0       	ldi	r20, 0x00	; 0
    3938:	50 e0       	ldi	r21, 0x00	; 0
    393a:	67 e0       	ldi	r22, 0x07	; 7
    393c:	70 e0       	ldi	r23, 0x00	; 0
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
					UART_sendString("\n\n\n");
    3946:	89 ee       	ldi	r24, 0xE9	; 233
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>
					userFound = 0;
    394e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
					passFound = 0;
    3952:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <passFound>
					adminMode = 0;
    3956:	19 82       	std	Y+1, r1	; 0x01
					userIndex = 0;
    3958:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <userIndex>
					clear_array(dataUser, MAX_LENGTH);
    395c:	65 e0       	ldi	r22, 0x05	; 5
    395e:	86 e4       	ldi	r24, 0x46	; 70
    3960:	91 e0       	ldi	r25, 0x01	; 1
    3962:	0e 94 1f 01 	call	0x23e	; 0x23e <clear_array>
					clear_array(dataPass, MAX_LENGTH+1);
    3966:	66 e0       	ldi	r22, 0x06	; 6
    3968:	81 e4       	ldi	r24, 0x41	; 65
    396a:	91 e0       	ldi	r25, 0x01	; 1
    396c:	0e 94 1f 01 	call	0x23e	; 0x23e <clear_array>
					LogIn();
    3970:	0e 94 cf 1c 	call	0x399e	; 0x399e <LogIn>
					break;
    3974:	01 c0       	rjmp	.+2      	; 0x3978 <main+0xd4>
				default:
					break;
    3976:	00 00       	nop
		if (userFound && passFound) {
			u8 adminMode = 1;
			UART_sendString("\n\nLogin Successful!\n");
			UART_sendString(
					"Send 1 to turn on the LED\n0 to turn it Off\nq to Log Out");
			while (adminMode) {
    3978:	89 81       	ldd	r24, Y+1	; 0x01
    397a:	88 23       	and	r24, r24
    397c:	09 f0       	breq	.+2      	; 0x3980 <main+0xdc>
    397e:	ba cf       	rjmp	.-140    	; 0x38f4 <main+0x50>
	DIO_enuSetPinDirection(DIO_u8_PORTA, DIO_u8_PIN4, DIO_u8_OUTPUT);


	LogIn();
	while (1) {
		if (userFound && passFound) {
    3980:	0d c0       	rjmp	.+26     	; 0x399c <main+0xf8>
					break;
				}
			}
		}
		else {
			UART_sendString("\nWrong Entry!\n");
    3982:	8d ee       	ldi	r24, 0xED	; 237
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>
			DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN4, DIO_u8_HIGH);
    398a:	41 e0       	ldi	r20, 0x01	; 1
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	64 e0       	ldi	r22, 0x04	; 4
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuSetPinValue>
			while (1);
    399a:	ff cf       	rjmp	.-2      	; 0x399a <main+0xf6>
		}
	}
    399c:	96 cf       	rjmp	.-212    	; 0x38ca <main+0x26>

0000399e <LogIn>:
}



void LogIn(){
    399e:	cf 93       	push	r28
    39a0:	df 93       	push	r29
    39a2:	00 d0       	rcall	.+0      	; 0x39a4 <LogIn+0x6>
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <LogIn+0x8>
    39a6:	1f 92       	push	r1
    39a8:	cd b7       	in	r28, 0x3d	; 61
    39aa:	de b7       	in	r29, 0x3e	; 62
//Linear search for the user
		for (u8 k = 0; k < 3; k++) { //prompts the user to type the username 3 times
    39ac:	19 82       	std	Y+1, r1	; 0x01
    39ae:	a4 c0       	rjmp	.+328    	; 0x3af8 <LogIn+0x15a>
			UART_sendString("Type your username:\n");
    39b0:	8c ef       	ldi	r24, 0xFC	; 252
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>

			//checks the entered username against the 3, iff the user wasn't found
			if (userFound != 1) {
    39b8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
    39bc:	81 30       	cpi	r24, 0x01	; 1
    39be:	09 f4       	brne	.+2      	; 0x39c2 <LogIn+0x24>
    39c0:	94 c0       	rjmp	.+296    	; 0x3aea <LogIn+0x14c>
				UART_u8GetString(dataUser, MAX_LENGTH); //gets the string (works fine)
    39c2:	65 e0       	ldi	r22, 0x05	; 5
    39c4:	86 e4       	ldi	r24, 0x46	; 70
    39c6:	91 e0       	ldi	r25, 0x01	; 1
    39c8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_u8GetString>
				for (u8 i = 0; i < 3; i++) {
    39cc:	1a 82       	std	Y+2, r1	; 0x02
    39ce:	89 c0       	rjmp	.+274    	; 0x3ae2 <LogIn+0x144>
					for (u8 j = 0; j < MAX_LENGTH; j++) {
    39d0:	1b 82       	std	Y+3, r1	; 0x03
    39d2:	75 c0       	rjmp	.+234    	; 0x3abe <LogIn+0x120>
						if (dataUser[j] == usernames[i][j]) {
    39d4:	8b 81       	ldd	r24, Y+3	; 0x03
    39d6:	88 2f       	mov	r24, r24
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	8a 5b       	subi	r24, 0xBA	; 186
    39dc:	9e 4f       	sbci	r25, 0xFE	; 254
    39de:	fc 01       	movw	r30, r24
    39e0:	60 81       	ld	r22, Z
    39e2:	8a 81       	ldd	r24, Y+2	; 0x02
    39e4:	28 2f       	mov	r18, r24
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ea:	48 2f       	mov	r20, r24
    39ec:	50 e0       	ldi	r21, 0x00	; 0
    39ee:	c9 01       	movw	r24, r18
    39f0:	88 0f       	add	r24, r24
    39f2:	99 1f       	adc	r25, r25
    39f4:	88 0f       	add	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	82 0f       	add	r24, r18
    39fa:	93 1f       	adc	r25, r19
    39fc:	84 0f       	add	r24, r20
    39fe:	95 1f       	adc	r25, r21
    3a00:	85 58       	subi	r24, 0x85	; 133
    3a02:	9f 4f       	sbci	r25, 0xFF	; 255
    3a04:	fc 01       	movw	r30, r24
    3a06:	80 81       	ld	r24, Z
    3a08:	68 17       	cp	r22, r24
    3a0a:	61 f5       	brne	.+88     	; 0x3a64 <LogIn+0xc6>
							userFound = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
							UART_sendString("I am true ");
    3a12:	81 e1       	ldi	r24, 0x11	; 17
    3a14:	91 e0       	ldi	r25, 0x01	; 1
    3a16:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>
							UART_voidSendChar(dataUser[j]);
    3a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1c:	88 2f       	mov	r24, r24
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	8a 5b       	subi	r24, 0xBA	; 186
    3a22:	9e 4f       	sbci	r25, 0xFE	; 254
    3a24:	fc 01       	movw	r30, r24
    3a26:	80 81       	ld	r24, Z
    3a28:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
							UART_voidSendChar(' ');
    3a2c:	80 e2       	ldi	r24, 0x20	; 32
    3a2e:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
							UART_voidSendChar(usernames[i][j]);
    3a32:	8a 81       	ldd	r24, Y+2	; 0x02
    3a34:	28 2f       	mov	r18, r24
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3a:	48 2f       	mov	r20, r24
    3a3c:	50 e0       	ldi	r21, 0x00	; 0
    3a3e:	c9 01       	movw	r24, r18
    3a40:	88 0f       	add	r24, r24
    3a42:	99 1f       	adc	r25, r25
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	82 0f       	add	r24, r18
    3a4a:	93 1f       	adc	r25, r19
    3a4c:	84 0f       	add	r24, r20
    3a4e:	95 1f       	adc	r25, r21
    3a50:	85 58       	subi	r24, 0x85	; 133
    3a52:	9f 4f       	sbci	r25, 0xFF	; 255
    3a54:	fc 01       	movw	r30, r24
    3a56:	80 81       	ld	r24, Z
    3a58:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
							UART_voidSendChar('\n');
    3a5c:	8a e0       	ldi	r24, 0x0A	; 10
    3a5e:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
    3a62:	2a c0       	rjmp	.+84     	; 0x3ab8 <LogIn+0x11a>
						} else {
							userFound = 0;
    3a64:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
							UART_sendString("I am False ");
    3a68:	8c e1       	ldi	r24, 0x1C	; 28
    3a6a:	91 e0       	ldi	r25, 0x01	; 1
    3a6c:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>
							UART_voidSendChar(dataUser[i]);
    3a70:	8a 81       	ldd	r24, Y+2	; 0x02
    3a72:	88 2f       	mov	r24, r24
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	8a 5b       	subi	r24, 0xBA	; 186
    3a78:	9e 4f       	sbci	r25, 0xFE	; 254
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	80 81       	ld	r24, Z
    3a7e:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
							UART_voidSendChar(' ');
    3a82:	80 e2       	ldi	r24, 0x20	; 32
    3a84:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
							UART_voidSendChar(usernames[i][j]);
    3a88:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8a:	28 2f       	mov	r18, r24
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a90:	48 2f       	mov	r20, r24
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	c9 01       	movw	r24, r18
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	82 0f       	add	r24, r18
    3aa0:	93 1f       	adc	r25, r19
    3aa2:	84 0f       	add	r24, r20
    3aa4:	95 1f       	adc	r25, r21
    3aa6:	85 58       	subi	r24, 0x85	; 133
    3aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    3aaa:	fc 01       	movw	r30, r24
    3aac:	80 81       	ld	r24, Z
    3aae:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
							UART_voidSendChar('\n');
    3ab2:	8a e0       	ldi	r24, 0x0A	; 10
    3ab4:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>

			//checks the entered username against the 3, iff the user wasn't found
			if (userFound != 1) {
				UART_u8GetString(dataUser, MAX_LENGTH); //gets the string (works fine)
				for (u8 i = 0; i < 3; i++) {
					for (u8 j = 0; j < MAX_LENGTH; j++) {
    3ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aba:	8f 5f       	subi	r24, 0xFF	; 255
    3abc:	8b 83       	std	Y+3, r24	; 0x03
    3abe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac0:	85 30       	cpi	r24, 0x05	; 5
    3ac2:	08 f4       	brcc	.+2      	; 0x3ac6 <LogIn+0x128>
    3ac4:	87 cf       	rjmp	.-242    	; 0x39d4 <LogIn+0x36>
							UART_voidSendChar(' ');
							UART_voidSendChar(usernames[i][j]);
							UART_voidSendChar('\n');
						}
					}
					if (userFound == 1) {
    3ac6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
    3aca:	81 30       	cpi	r24, 0x01	; 1
    3acc:	21 f4       	brne	.+8      	; 0x3ad6 <LogIn+0x138>
						userIndex = i;
    3ace:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <userIndex>
						break;
    3ad4:	0a c0       	rjmp	.+20     	; 0x3aea <LogIn+0x14c>
					}
					UART_voidSendChar('\n');
    3ad6:	8a e0       	ldi	r24, 0x0A	; 10
    3ad8:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
			UART_sendString("Type your username:\n");

			//checks the entered username against the 3, iff the user wasn't found
			if (userFound != 1) {
				UART_u8GetString(dataUser, MAX_LENGTH); //gets the string (works fine)
				for (u8 i = 0; i < 3; i++) {
    3adc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ade:	8f 5f       	subi	r24, 0xFF	; 255
    3ae0:	8a 83       	std	Y+2, r24	; 0x02
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	83 30       	cpi	r24, 0x03	; 3
    3ae6:	08 f4       	brcc	.+2      	; 0x3aea <LogIn+0x14c>
    3ae8:	73 cf       	rjmp	.-282    	; 0x39d0 <LogIn+0x32>
						break;
					}
					UART_voidSendChar('\n');
				}
			}
			if (userFound == 1)
    3aea:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
    3aee:	81 30       	cpi	r24, 0x01	; 1
    3af0:	41 f0       	breq	.+16     	; 0x3b02 <LogIn+0x164>



void LogIn(){
//Linear search for the user
		for (u8 k = 0; k < 3; k++) { //prompts the user to type the username 3 times
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	8f 5f       	subi	r24, 0xFF	; 255
    3af6:	89 83       	std	Y+1, r24	; 0x01
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	83 30       	cpi	r24, 0x03	; 3
    3afc:	08 f4       	brcc	.+2      	; 0x3b00 <LogIn+0x162>
    3afe:	58 cf       	rjmp	.-336    	; 0x39b0 <LogIn+0x12>
    3b00:	01 c0       	rjmp	.+2      	; 0x3b04 <LogIn+0x166>
					}
					UART_voidSendChar('\n');
				}
			}
			if (userFound == 1)
				break;
    3b02:	00 00       	nop
		}

		//if user was found, search for the password
		if (userFound) {
    3b04:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
    3b08:	88 23       	and	r24, r24
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <LogIn+0x170>
    3b0c:	9b c0       	rjmp	.+310    	; 0x3c44 <LogIn+0x2a6>
			for (u8 var = 0; var < 3; ++var) {
    3b0e:	1c 82       	std	Y+4, r1	; 0x04
    3b10:	93 c0       	rjmp	.+294    	; 0x3c38 <LogIn+0x29a>
				UART_voidSendChar('\n');
    3b12:	8a e0       	ldi	r24, 0x0A	; 10
    3b14:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
				UART_sendString("Type your password:\n");
    3b18:	88 e2       	ldi	r24, 0x28	; 40
    3b1a:	91 e0       	ldi	r25, 0x01	; 1
    3b1c:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>
				UART_u8GetString(dataPass, MAX_LENGTH+1);
    3b20:	66 e0       	ldi	r22, 0x06	; 6
    3b22:	81 e4       	ldi	r24, 0x41	; 65
    3b24:	91 e0       	ldi	r25, 0x01	; 1
    3b26:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_u8GetString>
			for (u8 l = 0; l < MAX_LENGTH; l++) {
    3b2a:	1d 82       	std	Y+5, r1	; 0x05
    3b2c:	7a c0       	rjmp	.+244    	; 0x3c22 <LogIn+0x284>
				if (dataPass[l+1] == passwords[userIndex][l]) {
    3b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b30:	88 2f       	mov	r24, r24
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	01 96       	adiw	r24, 0x01	; 1
    3b36:	8f 5b       	subi	r24, 0xBF	; 191
    3b38:	9e 4f       	sbci	r25, 0xFE	; 254
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	60 81       	ld	r22, Z
    3b3e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <userIndex>
    3b42:	28 2f       	mov	r18, r24
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	8d 81       	ldd	r24, Y+5	; 0x05
    3b48:	48 2f       	mov	r20, r24
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	c9 01       	movw	r24, r18
    3b4e:	88 0f       	add	r24, r24
    3b50:	99 1f       	adc	r25, r25
    3b52:	82 0f       	add	r24, r18
    3b54:	93 1f       	adc	r25, r19
    3b56:	88 0f       	add	r24, r24
    3b58:	99 1f       	adc	r25, r25
    3b5a:	84 0f       	add	r24, r20
    3b5c:	95 1f       	adc	r25, r21
    3b5e:	86 57       	subi	r24, 0x76	; 118
    3b60:	9f 4f       	sbci	r25, 0xFF	; 255
    3b62:	fc 01       	movw	r30, r24
    3b64:	80 81       	ld	r24, Z
    3b66:	68 17       	cp	r22, r24
    3b68:	71 f5       	brne	.+92     	; 0x3bc6 <LogIn+0x228>
					passFound = 1;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <passFound>
					UART_sendString("I am true ");
    3b70:	81 e1       	ldi	r24, 0x11	; 17
    3b72:	91 e0       	ldi	r25, 0x01	; 1
    3b74:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>
					UART_voidSendChar(dataPass[l+1]);
    3b78:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7a:	88 2f       	mov	r24, r24
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	8f 5b       	subi	r24, 0xBF	; 191
    3b82:	9e 4f       	sbci	r25, 0xFE	; 254
    3b84:	fc 01       	movw	r30, r24
    3b86:	80 81       	ld	r24, Z
    3b88:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
					UART_voidSendChar(' ');
    3b8c:	80 e2       	ldi	r24, 0x20	; 32
    3b8e:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
					UART_voidSendChar(passwords[userIndex][l]);
    3b92:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <userIndex>
    3b96:	28 2f       	mov	r18, r24
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9c:	48 2f       	mov	r20, r24
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	c9 01       	movw	r24, r18
    3ba2:	88 0f       	add	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	82 0f       	add	r24, r18
    3ba8:	93 1f       	adc	r25, r19
    3baa:	88 0f       	add	r24, r24
    3bac:	99 1f       	adc	r25, r25
    3bae:	84 0f       	add	r24, r20
    3bb0:	95 1f       	adc	r25, r21
    3bb2:	86 57       	subi	r24, 0x76	; 118
    3bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	80 81       	ld	r24, Z
    3bba:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
					UART_voidSendChar('\n');
    3bbe:	8a e0       	ldi	r24, 0x0A	; 10
    3bc0:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
    3bc4:	2b c0       	rjmp	.+86     	; 0x3c1c <LogIn+0x27e>
				}
				else {
					passFound = 0;
    3bc6:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <passFound>
					UART_sendString("I am False ");
    3bca:	8c e1       	ldi	r24, 0x1C	; 28
    3bcc:	91 e0       	ldi	r25, 0x01	; 1
    3bce:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_sendString>
					UART_voidSendChar(dataPass[l]);
    3bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd4:	88 2f       	mov	r24, r24
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	8f 5b       	subi	r24, 0xBF	; 191
    3bda:	9e 4f       	sbci	r25, 0xFE	; 254
    3bdc:	fc 01       	movw	r30, r24
    3bde:	80 81       	ld	r24, Z
    3be0:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
					UART_voidSendChar(' ');
    3be4:	80 e2       	ldi	r24, 0x20	; 32
    3be6:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
					UART_voidSendChar(passwords[userIndex][l]);
    3bea:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <userIndex>
    3bee:	28 2f       	mov	r18, r24
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf4:	48 2f       	mov	r20, r24
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	c9 01       	movw	r24, r18
    3bfa:	88 0f       	add	r24, r24
    3bfc:	99 1f       	adc	r25, r25
    3bfe:	82 0f       	add	r24, r18
    3c00:	93 1f       	adc	r25, r19
    3c02:	88 0f       	add	r24, r24
    3c04:	99 1f       	adc	r25, r25
    3c06:	84 0f       	add	r24, r20
    3c08:	95 1f       	adc	r25, r21
    3c0a:	86 57       	subi	r24, 0x76	; 118
    3c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0e:	fc 01       	movw	r30, r24
    3c10:	80 81       	ld	r24, Z
    3c12:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
					UART_voidSendChar('\n');
    3c16:	8a e0       	ldi	r24, 0x0A	; 10
    3c18:	0e 94 94 00 	call	0x128	; 0x128 <UART_voidSendChar>
		if (userFound) {
			for (u8 var = 0; var < 3; ++var) {
				UART_voidSendChar('\n');
				UART_sendString("Type your password:\n");
				UART_u8GetString(dataPass, MAX_LENGTH+1);
			for (u8 l = 0; l < MAX_LENGTH; l++) {
    3c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1e:	8f 5f       	subi	r24, 0xFF	; 255
    3c20:	8d 83       	std	Y+5, r24	; 0x05
    3c22:	8d 81       	ldd	r24, Y+5	; 0x05
    3c24:	85 30       	cpi	r24, 0x05	; 5
    3c26:	08 f4       	brcc	.+2      	; 0x3c2a <LogIn+0x28c>
    3c28:	82 cf       	rjmp	.-252    	; 0x3b2e <LogIn+0x190>
					UART_voidSendChar(' ');
					UART_voidSendChar(passwords[userIndex][l]);
					UART_voidSendChar('\n');
				}
			}
			if (passFound)
    3c2a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <passFound>
    3c2e:	88 23       	and	r24, r24
    3c30:	41 f4       	brne	.+16     	; 0x3c42 <LogIn+0x2a4>
				break;
		}

		//if user was found, search for the password
		if (userFound) {
			for (u8 var = 0; var < 3; ++var) {
    3c32:	8c 81       	ldd	r24, Y+4	; 0x04
    3c34:	8f 5f       	subi	r24, 0xFF	; 255
    3c36:	8c 83       	std	Y+4, r24	; 0x04
    3c38:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3a:	83 30       	cpi	r24, 0x03	; 3
    3c3c:	08 f4       	brcc	.+2      	; 0x3c40 <LogIn+0x2a2>
    3c3e:	69 cf       	rjmp	.-302    	; 0x3b12 <LogIn+0x174>
			}
			if (passFound)
				break;
		}
	}
}
    3c40:	01 c0       	rjmp	.+2      	; 0x3c44 <LogIn+0x2a6>
					UART_voidSendChar(passwords[userIndex][l]);
					UART_voidSendChar('\n');
				}
			}
			if (passFound)
				break;
    3c42:	00 00       	nop
		}
	}
}
    3c44:	00 00       	nop
    3c46:	0f 90       	pop	r0
    3c48:	0f 90       	pop	r0
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	0f 90       	pop	r0
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	08 95       	ret

00003c56 <compare_arrays>:



u8 compare_arrays(u8 *arr1, u8 *arr2, u8 size) {
    3c56:	cf 93       	push	r28
    3c58:	df 93       	push	r29
    3c5a:	00 d0       	rcall	.+0      	; 0x3c5c <compare_arrays+0x6>
    3c5c:	00 d0       	rcall	.+0      	; 0x3c5e <compare_arrays+0x8>
    3c5e:	00 d0       	rcall	.+0      	; 0x3c60 <compare_arrays+0xa>
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
    3c64:	9b 83       	std	Y+3, r25	; 0x03
    3c66:	8a 83       	std	Y+2, r24	; 0x02
    3c68:	7d 83       	std	Y+5, r23	; 0x05
    3c6a:	6c 83       	std	Y+4, r22	; 0x04
    3c6c:	4e 83       	std	Y+6, r20	; 0x06
	for (u8 i = 0; i < size; i++) {
    3c6e:	19 82       	std	Y+1, r1	; 0x01
    3c70:	19 c0       	rjmp	.+50     	; 0x3ca4 <compare_arrays+0x4e>
		if (arr1[i] != arr2[i]) {
    3c72:	89 81       	ldd	r24, Y+1	; 0x01
    3c74:	88 2f       	mov	r24, r24
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	2a 81       	ldd	r18, Y+2	; 0x02
    3c7a:	3b 81       	ldd	r19, Y+3	; 0x03
    3c7c:	82 0f       	add	r24, r18
    3c7e:	93 1f       	adc	r25, r19
    3c80:	fc 01       	movw	r30, r24
    3c82:	40 81       	ld	r20, Z
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	88 2f       	mov	r24, r24
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    3c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    3c8e:	82 0f       	add	r24, r18
    3c90:	93 1f       	adc	r25, r19
    3c92:	fc 01       	movw	r30, r24
    3c94:	80 81       	ld	r24, Z
    3c96:	48 17       	cp	r20, r24
    3c98:	11 f0       	breq	.+4      	; 0x3c9e <compare_arrays+0x48>
			return 0;
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	08 c0       	rjmp	.+16     	; 0x3cae <compare_arrays+0x58>
}



u8 compare_arrays(u8 *arr1, u8 *arr2, u8 size) {
	for (u8 i = 0; i < size; i++) {
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ca0:	8f 5f       	subi	r24, 0xFF	; 255
    3ca2:	89 83       	std	Y+1, r24	; 0x01
    3ca4:	99 81       	ldd	r25, Y+1	; 0x01
    3ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ca8:	98 17       	cp	r25, r24
    3caa:	18 f3       	brcs	.-58     	; 0x3c72 <compare_arrays+0x1c>
		if (arr1[i] != arr2[i]) {
			return 0;
		}
	}
	return 1;
    3cac:	81 e0       	ldi	r24, 0x01	; 1
}
    3cae:	26 96       	adiw	r28, 0x06	; 6
    3cb0:	0f b6       	in	r0, 0x3f	; 63
    3cb2:	f8 94       	cli
    3cb4:	de bf       	out	0x3e, r29	; 62
    3cb6:	0f be       	out	0x3f, r0	; 63
    3cb8:	cd bf       	out	0x3d, r28	; 61
    3cba:	df 91       	pop	r29
    3cbc:	cf 91       	pop	r28
    3cbe:	08 95       	ret

00003cc0 <__tablejump2__>:
    3cc0:	ee 0f       	add	r30, r30
    3cc2:	ff 1f       	adc	r31, r31
    3cc4:	05 90       	lpm	r0, Z+
    3cc6:	f4 91       	lpm	r31, Z
    3cc8:	e0 2d       	mov	r30, r0
    3cca:	09 94       	ijmp

00003ccc <__umulhisi3>:
    3ccc:	a2 9f       	mul	r26, r18
    3cce:	b0 01       	movw	r22, r0
    3cd0:	b3 9f       	mul	r27, r19
    3cd2:	c0 01       	movw	r24, r0
    3cd4:	a3 9f       	mul	r26, r19
    3cd6:	70 0d       	add	r23, r0
    3cd8:	81 1d       	adc	r24, r1
    3cda:	11 24       	eor	r1, r1
    3cdc:	91 1d       	adc	r25, r1
    3cde:	b2 9f       	mul	r27, r18
    3ce0:	70 0d       	add	r23, r0
    3ce2:	81 1d       	adc	r24, r1
    3ce4:	11 24       	eor	r1, r1
    3ce6:	91 1d       	adc	r25, r1
    3ce8:	08 95       	ret

00003cea <__subsf3>:
    3cea:	50 58       	subi	r21, 0x80	; 128

00003cec <__addsf3>:
    3cec:	bb 27       	eor	r27, r27
    3cee:	aa 27       	eor	r26, r26
    3cf0:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__addsf3x>
    3cf4:	0c 94 00 20 	jmp	0x4000	; 0x4000 <__fp_round>
    3cf8:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__fp_pscA>
    3cfc:	38 f0       	brcs	.+14     	; 0x3d0c <__addsf3+0x20>
    3cfe:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__fp_pscB>
    3d02:	20 f0       	brcs	.+8      	; 0x3d0c <__addsf3+0x20>
    3d04:	39 f4       	brne	.+14     	; 0x3d14 <__addsf3+0x28>
    3d06:	9f 3f       	cpi	r25, 0xFF	; 255
    3d08:	19 f4       	brne	.+6      	; 0x3d10 <__addsf3+0x24>
    3d0a:	26 f4       	brtc	.+8      	; 0x3d14 <__addsf3+0x28>
    3d0c:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__fp_nan>
    3d10:	0e f4       	brtc	.+2      	; 0x3d14 <__addsf3+0x28>
    3d12:	e0 95       	com	r30
    3d14:	e7 fb       	bst	r30, 7
    3d16:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__fp_inf>

00003d1a <__addsf3x>:
    3d1a:	e9 2f       	mov	r30, r25
    3d1c:	0e 94 11 20 	call	0x4022	; 0x4022 <__fp_split3>
    3d20:	58 f3       	brcs	.-42     	; 0x3cf8 <__addsf3+0xc>
    3d22:	ba 17       	cp	r27, r26
    3d24:	62 07       	cpc	r22, r18
    3d26:	73 07       	cpc	r23, r19
    3d28:	84 07       	cpc	r24, r20
    3d2a:	95 07       	cpc	r25, r21
    3d2c:	20 f0       	brcs	.+8      	; 0x3d36 <__addsf3x+0x1c>
    3d2e:	79 f4       	brne	.+30     	; 0x3d4e <__addsf3x+0x34>
    3d30:	a6 f5       	brtc	.+104    	; 0x3d9a <__addsf3x+0x80>
    3d32:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__fp_zero>
    3d36:	0e f4       	brtc	.+2      	; 0x3d3a <__addsf3x+0x20>
    3d38:	e0 95       	com	r30
    3d3a:	0b 2e       	mov	r0, r27
    3d3c:	ba 2f       	mov	r27, r26
    3d3e:	a0 2d       	mov	r26, r0
    3d40:	0b 01       	movw	r0, r22
    3d42:	b9 01       	movw	r22, r18
    3d44:	90 01       	movw	r18, r0
    3d46:	0c 01       	movw	r0, r24
    3d48:	ca 01       	movw	r24, r20
    3d4a:	a0 01       	movw	r20, r0
    3d4c:	11 24       	eor	r1, r1
    3d4e:	ff 27       	eor	r31, r31
    3d50:	59 1b       	sub	r21, r25
    3d52:	99 f0       	breq	.+38     	; 0x3d7a <__addsf3x+0x60>
    3d54:	59 3f       	cpi	r21, 0xF9	; 249
    3d56:	50 f4       	brcc	.+20     	; 0x3d6c <__addsf3x+0x52>
    3d58:	50 3e       	cpi	r21, 0xE0	; 224
    3d5a:	68 f1       	brcs	.+90     	; 0x3db6 <__addsf3x+0x9c>
    3d5c:	1a 16       	cp	r1, r26
    3d5e:	f0 40       	sbci	r31, 0x00	; 0
    3d60:	a2 2f       	mov	r26, r18
    3d62:	23 2f       	mov	r18, r19
    3d64:	34 2f       	mov	r19, r20
    3d66:	44 27       	eor	r20, r20
    3d68:	58 5f       	subi	r21, 0xF8	; 248
    3d6a:	f3 cf       	rjmp	.-26     	; 0x3d52 <__addsf3x+0x38>
    3d6c:	46 95       	lsr	r20
    3d6e:	37 95       	ror	r19
    3d70:	27 95       	ror	r18
    3d72:	a7 95       	ror	r26
    3d74:	f0 40       	sbci	r31, 0x00	; 0
    3d76:	53 95       	inc	r21
    3d78:	c9 f7       	brne	.-14     	; 0x3d6c <__addsf3x+0x52>
    3d7a:	7e f4       	brtc	.+30     	; 0x3d9a <__addsf3x+0x80>
    3d7c:	1f 16       	cp	r1, r31
    3d7e:	ba 0b       	sbc	r27, r26
    3d80:	62 0b       	sbc	r22, r18
    3d82:	73 0b       	sbc	r23, r19
    3d84:	84 0b       	sbc	r24, r20
    3d86:	ba f0       	brmi	.+46     	; 0x3db6 <__addsf3x+0x9c>
    3d88:	91 50       	subi	r25, 0x01	; 1
    3d8a:	a1 f0       	breq	.+40     	; 0x3db4 <__addsf3x+0x9a>
    3d8c:	ff 0f       	add	r31, r31
    3d8e:	bb 1f       	adc	r27, r27
    3d90:	66 1f       	adc	r22, r22
    3d92:	77 1f       	adc	r23, r23
    3d94:	88 1f       	adc	r24, r24
    3d96:	c2 f7       	brpl	.-16     	; 0x3d88 <__addsf3x+0x6e>
    3d98:	0e c0       	rjmp	.+28     	; 0x3db6 <__addsf3x+0x9c>
    3d9a:	ba 0f       	add	r27, r26
    3d9c:	62 1f       	adc	r22, r18
    3d9e:	73 1f       	adc	r23, r19
    3da0:	84 1f       	adc	r24, r20
    3da2:	48 f4       	brcc	.+18     	; 0x3db6 <__addsf3x+0x9c>
    3da4:	87 95       	ror	r24
    3da6:	77 95       	ror	r23
    3da8:	67 95       	ror	r22
    3daa:	b7 95       	ror	r27
    3dac:	f7 95       	ror	r31
    3dae:	9e 3f       	cpi	r25, 0xFE	; 254
    3db0:	08 f0       	brcs	.+2      	; 0x3db4 <__addsf3x+0x9a>
    3db2:	b0 cf       	rjmp	.-160    	; 0x3d14 <__addsf3+0x28>
    3db4:	93 95       	inc	r25
    3db6:	88 0f       	add	r24, r24
    3db8:	08 f0       	brcs	.+2      	; 0x3dbc <__addsf3x+0xa2>
    3dba:	99 27       	eor	r25, r25
    3dbc:	ee 0f       	add	r30, r30
    3dbe:	97 95       	ror	r25
    3dc0:	87 95       	ror	r24
    3dc2:	08 95       	ret

00003dc4 <__cmpsf2>:
    3dc4:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__fp_cmp>
    3dc8:	08 f4       	brcc	.+2      	; 0x3dcc <__cmpsf2+0x8>
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	08 95       	ret

00003dce <__divsf3>:
    3dce:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__divsf3x>
    3dd2:	0c 94 00 20 	jmp	0x4000	; 0x4000 <__fp_round>
    3dd6:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__fp_pscB>
    3dda:	58 f0       	brcs	.+22     	; 0x3df2 <__divsf3+0x24>
    3ddc:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__fp_pscA>
    3de0:	40 f0       	brcs	.+16     	; 0x3df2 <__divsf3+0x24>
    3de2:	29 f4       	brne	.+10     	; 0x3dee <__divsf3+0x20>
    3de4:	5f 3f       	cpi	r21, 0xFF	; 255
    3de6:	29 f0       	breq	.+10     	; 0x3df2 <__divsf3+0x24>
    3de8:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__fp_inf>
    3dec:	51 11       	cpse	r21, r1
    3dee:	0c 94 34 20 	jmp	0x4068	; 0x4068 <__fp_szero>
    3df2:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__fp_nan>

00003df6 <__divsf3x>:
    3df6:	0e 94 11 20 	call	0x4022	; 0x4022 <__fp_split3>
    3dfa:	68 f3       	brcs	.-38     	; 0x3dd6 <__divsf3+0x8>

00003dfc <__divsf3_pse>:
    3dfc:	99 23       	and	r25, r25
    3dfe:	b1 f3       	breq	.-20     	; 0x3dec <__divsf3+0x1e>
    3e00:	55 23       	and	r21, r21
    3e02:	91 f3       	breq	.-28     	; 0x3de8 <__divsf3+0x1a>
    3e04:	95 1b       	sub	r25, r21
    3e06:	55 0b       	sbc	r21, r21
    3e08:	bb 27       	eor	r27, r27
    3e0a:	aa 27       	eor	r26, r26
    3e0c:	62 17       	cp	r22, r18
    3e0e:	73 07       	cpc	r23, r19
    3e10:	84 07       	cpc	r24, r20
    3e12:	38 f0       	brcs	.+14     	; 0x3e22 <__divsf3_pse+0x26>
    3e14:	9f 5f       	subi	r25, 0xFF	; 255
    3e16:	5f 4f       	sbci	r21, 0xFF	; 255
    3e18:	22 0f       	add	r18, r18
    3e1a:	33 1f       	adc	r19, r19
    3e1c:	44 1f       	adc	r20, r20
    3e1e:	aa 1f       	adc	r26, r26
    3e20:	a9 f3       	breq	.-22     	; 0x3e0c <__divsf3_pse+0x10>
    3e22:	35 d0       	rcall	.+106    	; 0x3e8e <__divsf3_pse+0x92>
    3e24:	0e 2e       	mov	r0, r30
    3e26:	3a f0       	brmi	.+14     	; 0x3e36 <__divsf3_pse+0x3a>
    3e28:	e0 e8       	ldi	r30, 0x80	; 128
    3e2a:	32 d0       	rcall	.+100    	; 0x3e90 <__divsf3_pse+0x94>
    3e2c:	91 50       	subi	r25, 0x01	; 1
    3e2e:	50 40       	sbci	r21, 0x00	; 0
    3e30:	e6 95       	lsr	r30
    3e32:	00 1c       	adc	r0, r0
    3e34:	ca f7       	brpl	.-14     	; 0x3e28 <__divsf3_pse+0x2c>
    3e36:	2b d0       	rcall	.+86     	; 0x3e8e <__divsf3_pse+0x92>
    3e38:	fe 2f       	mov	r31, r30
    3e3a:	29 d0       	rcall	.+82     	; 0x3e8e <__divsf3_pse+0x92>
    3e3c:	66 0f       	add	r22, r22
    3e3e:	77 1f       	adc	r23, r23
    3e40:	88 1f       	adc	r24, r24
    3e42:	bb 1f       	adc	r27, r27
    3e44:	26 17       	cp	r18, r22
    3e46:	37 07       	cpc	r19, r23
    3e48:	48 07       	cpc	r20, r24
    3e4a:	ab 07       	cpc	r26, r27
    3e4c:	b0 e8       	ldi	r27, 0x80	; 128
    3e4e:	09 f0       	breq	.+2      	; 0x3e52 <__divsf3_pse+0x56>
    3e50:	bb 0b       	sbc	r27, r27
    3e52:	80 2d       	mov	r24, r0
    3e54:	bf 01       	movw	r22, r30
    3e56:	ff 27       	eor	r31, r31
    3e58:	93 58       	subi	r25, 0x83	; 131
    3e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e5c:	3a f0       	brmi	.+14     	; 0x3e6c <__divsf3_pse+0x70>
    3e5e:	9e 3f       	cpi	r25, 0xFE	; 254
    3e60:	51 05       	cpc	r21, r1
    3e62:	78 f0       	brcs	.+30     	; 0x3e82 <__divsf3_pse+0x86>
    3e64:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__fp_inf>
    3e68:	0c 94 34 20 	jmp	0x4068	; 0x4068 <__fp_szero>
    3e6c:	5f 3f       	cpi	r21, 0xFF	; 255
    3e6e:	e4 f3       	brlt	.-8      	; 0x3e68 <__divsf3_pse+0x6c>
    3e70:	98 3e       	cpi	r25, 0xE8	; 232
    3e72:	d4 f3       	brlt	.-12     	; 0x3e68 <__divsf3_pse+0x6c>
    3e74:	86 95       	lsr	r24
    3e76:	77 95       	ror	r23
    3e78:	67 95       	ror	r22
    3e7a:	b7 95       	ror	r27
    3e7c:	f7 95       	ror	r31
    3e7e:	9f 5f       	subi	r25, 0xFF	; 255
    3e80:	c9 f7       	brne	.-14     	; 0x3e74 <__divsf3_pse+0x78>
    3e82:	88 0f       	add	r24, r24
    3e84:	91 1d       	adc	r25, r1
    3e86:	96 95       	lsr	r25
    3e88:	87 95       	ror	r24
    3e8a:	97 f9       	bld	r25, 7
    3e8c:	08 95       	ret
    3e8e:	e1 e0       	ldi	r30, 0x01	; 1
    3e90:	66 0f       	add	r22, r22
    3e92:	77 1f       	adc	r23, r23
    3e94:	88 1f       	adc	r24, r24
    3e96:	bb 1f       	adc	r27, r27
    3e98:	62 17       	cp	r22, r18
    3e9a:	73 07       	cpc	r23, r19
    3e9c:	84 07       	cpc	r24, r20
    3e9e:	ba 07       	cpc	r27, r26
    3ea0:	20 f0       	brcs	.+8      	; 0x3eaa <__divsf3_pse+0xae>
    3ea2:	62 1b       	sub	r22, r18
    3ea4:	73 0b       	sbc	r23, r19
    3ea6:	84 0b       	sbc	r24, r20
    3ea8:	ba 0b       	sbc	r27, r26
    3eaa:	ee 1f       	adc	r30, r30
    3eac:	88 f7       	brcc	.-30     	; 0x3e90 <__divsf3_pse+0x94>
    3eae:	e0 95       	com	r30
    3eb0:	08 95       	ret

00003eb2 <__fixunssfsi>:
    3eb2:	0e 94 19 20 	call	0x4032	; 0x4032 <__fp_splitA>
    3eb6:	88 f0       	brcs	.+34     	; 0x3eda <__fixunssfsi+0x28>
    3eb8:	9f 57       	subi	r25, 0x7F	; 127
    3eba:	98 f0       	brcs	.+38     	; 0x3ee2 <__fixunssfsi+0x30>
    3ebc:	b9 2f       	mov	r27, r25
    3ebe:	99 27       	eor	r25, r25
    3ec0:	b7 51       	subi	r27, 0x17	; 23
    3ec2:	b0 f0       	brcs	.+44     	; 0x3ef0 <__fixunssfsi+0x3e>
    3ec4:	e1 f0       	breq	.+56     	; 0x3efe <__fixunssfsi+0x4c>
    3ec6:	66 0f       	add	r22, r22
    3ec8:	77 1f       	adc	r23, r23
    3eca:	88 1f       	adc	r24, r24
    3ecc:	99 1f       	adc	r25, r25
    3ece:	1a f0       	brmi	.+6      	; 0x3ed6 <__fixunssfsi+0x24>
    3ed0:	ba 95       	dec	r27
    3ed2:	c9 f7       	brne	.-14     	; 0x3ec6 <__fixunssfsi+0x14>
    3ed4:	14 c0       	rjmp	.+40     	; 0x3efe <__fixunssfsi+0x4c>
    3ed6:	b1 30       	cpi	r27, 0x01	; 1
    3ed8:	91 f0       	breq	.+36     	; 0x3efe <__fixunssfsi+0x4c>
    3eda:	0e 94 33 20 	call	0x4066	; 0x4066 <__fp_zero>
    3ede:	b1 e0       	ldi	r27, 0x01	; 1
    3ee0:	08 95       	ret
    3ee2:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__fp_zero>
    3ee6:	67 2f       	mov	r22, r23
    3ee8:	78 2f       	mov	r23, r24
    3eea:	88 27       	eor	r24, r24
    3eec:	b8 5f       	subi	r27, 0xF8	; 248
    3eee:	39 f0       	breq	.+14     	; 0x3efe <__fixunssfsi+0x4c>
    3ef0:	b9 3f       	cpi	r27, 0xF9	; 249
    3ef2:	cc f3       	brlt	.-14     	; 0x3ee6 <__fixunssfsi+0x34>
    3ef4:	86 95       	lsr	r24
    3ef6:	77 95       	ror	r23
    3ef8:	67 95       	ror	r22
    3efa:	b3 95       	inc	r27
    3efc:	d9 f7       	brne	.-10     	; 0x3ef4 <__fixunssfsi+0x42>
    3efe:	3e f4       	brtc	.+14     	; 0x3f0e <__fixunssfsi+0x5c>
    3f00:	90 95       	com	r25
    3f02:	80 95       	com	r24
    3f04:	70 95       	com	r23
    3f06:	61 95       	neg	r22
    3f08:	7f 4f       	sbci	r23, 0xFF	; 255
    3f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0e:	08 95       	ret

00003f10 <__floatunsisf>:
    3f10:	e8 94       	clt
    3f12:	09 c0       	rjmp	.+18     	; 0x3f26 <__floatsisf+0x12>

00003f14 <__floatsisf>:
    3f14:	97 fb       	bst	r25, 7
    3f16:	3e f4       	brtc	.+14     	; 0x3f26 <__floatsisf+0x12>
    3f18:	90 95       	com	r25
    3f1a:	80 95       	com	r24
    3f1c:	70 95       	com	r23
    3f1e:	61 95       	neg	r22
    3f20:	7f 4f       	sbci	r23, 0xFF	; 255
    3f22:	8f 4f       	sbci	r24, 0xFF	; 255
    3f24:	9f 4f       	sbci	r25, 0xFF	; 255
    3f26:	99 23       	and	r25, r25
    3f28:	a9 f0       	breq	.+42     	; 0x3f54 <__floatsisf+0x40>
    3f2a:	f9 2f       	mov	r31, r25
    3f2c:	96 e9       	ldi	r25, 0x96	; 150
    3f2e:	bb 27       	eor	r27, r27
    3f30:	93 95       	inc	r25
    3f32:	f6 95       	lsr	r31
    3f34:	87 95       	ror	r24
    3f36:	77 95       	ror	r23
    3f38:	67 95       	ror	r22
    3f3a:	b7 95       	ror	r27
    3f3c:	f1 11       	cpse	r31, r1
    3f3e:	f8 cf       	rjmp	.-16     	; 0x3f30 <__floatsisf+0x1c>
    3f40:	fa f4       	brpl	.+62     	; 0x3f80 <__floatsisf+0x6c>
    3f42:	bb 0f       	add	r27, r27
    3f44:	11 f4       	brne	.+4      	; 0x3f4a <__floatsisf+0x36>
    3f46:	60 ff       	sbrs	r22, 0
    3f48:	1b c0       	rjmp	.+54     	; 0x3f80 <__floatsisf+0x6c>
    3f4a:	6f 5f       	subi	r22, 0xFF	; 255
    3f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f50:	9f 4f       	sbci	r25, 0xFF	; 255
    3f52:	16 c0       	rjmp	.+44     	; 0x3f80 <__floatsisf+0x6c>
    3f54:	88 23       	and	r24, r24
    3f56:	11 f0       	breq	.+4      	; 0x3f5c <__floatsisf+0x48>
    3f58:	96 e9       	ldi	r25, 0x96	; 150
    3f5a:	11 c0       	rjmp	.+34     	; 0x3f7e <__floatsisf+0x6a>
    3f5c:	77 23       	and	r23, r23
    3f5e:	21 f0       	breq	.+8      	; 0x3f68 <__floatsisf+0x54>
    3f60:	9e e8       	ldi	r25, 0x8E	; 142
    3f62:	87 2f       	mov	r24, r23
    3f64:	76 2f       	mov	r23, r22
    3f66:	05 c0       	rjmp	.+10     	; 0x3f72 <__floatsisf+0x5e>
    3f68:	66 23       	and	r22, r22
    3f6a:	71 f0       	breq	.+28     	; 0x3f88 <__floatsisf+0x74>
    3f6c:	96 e8       	ldi	r25, 0x86	; 134
    3f6e:	86 2f       	mov	r24, r22
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	60 e0       	ldi	r22, 0x00	; 0
    3f74:	2a f0       	brmi	.+10     	; 0x3f80 <__floatsisf+0x6c>
    3f76:	9a 95       	dec	r25
    3f78:	66 0f       	add	r22, r22
    3f7a:	77 1f       	adc	r23, r23
    3f7c:	88 1f       	adc	r24, r24
    3f7e:	da f7       	brpl	.-10     	; 0x3f76 <__floatsisf+0x62>
    3f80:	88 0f       	add	r24, r24
    3f82:	96 95       	lsr	r25
    3f84:	87 95       	ror	r24
    3f86:	97 f9       	bld	r25, 7
    3f88:	08 95       	ret

00003f8a <__fp_cmp>:
    3f8a:	99 0f       	add	r25, r25
    3f8c:	00 08       	sbc	r0, r0
    3f8e:	55 0f       	add	r21, r21
    3f90:	aa 0b       	sbc	r26, r26
    3f92:	e0 e8       	ldi	r30, 0x80	; 128
    3f94:	fe ef       	ldi	r31, 0xFE	; 254
    3f96:	16 16       	cp	r1, r22
    3f98:	17 06       	cpc	r1, r23
    3f9a:	e8 07       	cpc	r30, r24
    3f9c:	f9 07       	cpc	r31, r25
    3f9e:	c0 f0       	brcs	.+48     	; 0x3fd0 <__fp_cmp+0x46>
    3fa0:	12 16       	cp	r1, r18
    3fa2:	13 06       	cpc	r1, r19
    3fa4:	e4 07       	cpc	r30, r20
    3fa6:	f5 07       	cpc	r31, r21
    3fa8:	98 f0       	brcs	.+38     	; 0x3fd0 <__fp_cmp+0x46>
    3faa:	62 1b       	sub	r22, r18
    3fac:	73 0b       	sbc	r23, r19
    3fae:	84 0b       	sbc	r24, r20
    3fb0:	95 0b       	sbc	r25, r21
    3fb2:	39 f4       	brne	.+14     	; 0x3fc2 <__fp_cmp+0x38>
    3fb4:	0a 26       	eor	r0, r26
    3fb6:	61 f0       	breq	.+24     	; 0x3fd0 <__fp_cmp+0x46>
    3fb8:	23 2b       	or	r18, r19
    3fba:	24 2b       	or	r18, r20
    3fbc:	25 2b       	or	r18, r21
    3fbe:	21 f4       	brne	.+8      	; 0x3fc8 <__fp_cmp+0x3e>
    3fc0:	08 95       	ret
    3fc2:	0a 26       	eor	r0, r26
    3fc4:	09 f4       	brne	.+2      	; 0x3fc8 <__fp_cmp+0x3e>
    3fc6:	a1 40       	sbci	r26, 0x01	; 1
    3fc8:	a6 95       	lsr	r26
    3fca:	8f ef       	ldi	r24, 0xFF	; 255
    3fcc:	81 1d       	adc	r24, r1
    3fce:	81 1d       	adc	r24, r1
    3fd0:	08 95       	ret

00003fd2 <__fp_inf>:
    3fd2:	97 f9       	bld	r25, 7
    3fd4:	9f 67       	ori	r25, 0x7F	; 127
    3fd6:	80 e8       	ldi	r24, 0x80	; 128
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	60 e0       	ldi	r22, 0x00	; 0
    3fdc:	08 95       	ret

00003fde <__fp_nan>:
    3fde:	9f ef       	ldi	r25, 0xFF	; 255
    3fe0:	80 ec       	ldi	r24, 0xC0	; 192
    3fe2:	08 95       	ret

00003fe4 <__fp_pscA>:
    3fe4:	00 24       	eor	r0, r0
    3fe6:	0a 94       	dec	r0
    3fe8:	16 16       	cp	r1, r22
    3fea:	17 06       	cpc	r1, r23
    3fec:	18 06       	cpc	r1, r24
    3fee:	09 06       	cpc	r0, r25
    3ff0:	08 95       	ret

00003ff2 <__fp_pscB>:
    3ff2:	00 24       	eor	r0, r0
    3ff4:	0a 94       	dec	r0
    3ff6:	12 16       	cp	r1, r18
    3ff8:	13 06       	cpc	r1, r19
    3ffa:	14 06       	cpc	r1, r20
    3ffc:	05 06       	cpc	r0, r21
    3ffe:	08 95       	ret

00004000 <__fp_round>:
    4000:	09 2e       	mov	r0, r25
    4002:	03 94       	inc	r0
    4004:	00 0c       	add	r0, r0
    4006:	11 f4       	brne	.+4      	; 0x400c <__fp_round+0xc>
    4008:	88 23       	and	r24, r24
    400a:	52 f0       	brmi	.+20     	; 0x4020 <__fp_round+0x20>
    400c:	bb 0f       	add	r27, r27
    400e:	40 f4       	brcc	.+16     	; 0x4020 <__fp_round+0x20>
    4010:	bf 2b       	or	r27, r31
    4012:	11 f4       	brne	.+4      	; 0x4018 <__fp_round+0x18>
    4014:	60 ff       	sbrs	r22, 0
    4016:	04 c0       	rjmp	.+8      	; 0x4020 <__fp_round+0x20>
    4018:	6f 5f       	subi	r22, 0xFF	; 255
    401a:	7f 4f       	sbci	r23, 0xFF	; 255
    401c:	8f 4f       	sbci	r24, 0xFF	; 255
    401e:	9f 4f       	sbci	r25, 0xFF	; 255
    4020:	08 95       	ret

00004022 <__fp_split3>:
    4022:	57 fd       	sbrc	r21, 7
    4024:	90 58       	subi	r25, 0x80	; 128
    4026:	44 0f       	add	r20, r20
    4028:	55 1f       	adc	r21, r21
    402a:	59 f0       	breq	.+22     	; 0x4042 <__fp_splitA+0x10>
    402c:	5f 3f       	cpi	r21, 0xFF	; 255
    402e:	71 f0       	breq	.+28     	; 0x404c <__fp_splitA+0x1a>
    4030:	47 95       	ror	r20

00004032 <__fp_splitA>:
    4032:	88 0f       	add	r24, r24
    4034:	97 fb       	bst	r25, 7
    4036:	99 1f       	adc	r25, r25
    4038:	61 f0       	breq	.+24     	; 0x4052 <__fp_splitA+0x20>
    403a:	9f 3f       	cpi	r25, 0xFF	; 255
    403c:	79 f0       	breq	.+30     	; 0x405c <__fp_splitA+0x2a>
    403e:	87 95       	ror	r24
    4040:	08 95       	ret
    4042:	12 16       	cp	r1, r18
    4044:	13 06       	cpc	r1, r19
    4046:	14 06       	cpc	r1, r20
    4048:	55 1f       	adc	r21, r21
    404a:	f2 cf       	rjmp	.-28     	; 0x4030 <__fp_split3+0xe>
    404c:	46 95       	lsr	r20
    404e:	f1 df       	rcall	.-30     	; 0x4032 <__fp_splitA>
    4050:	08 c0       	rjmp	.+16     	; 0x4062 <__fp_splitA+0x30>
    4052:	16 16       	cp	r1, r22
    4054:	17 06       	cpc	r1, r23
    4056:	18 06       	cpc	r1, r24
    4058:	99 1f       	adc	r25, r25
    405a:	f1 cf       	rjmp	.-30     	; 0x403e <__fp_splitA+0xc>
    405c:	86 95       	lsr	r24
    405e:	71 05       	cpc	r23, r1
    4060:	61 05       	cpc	r22, r1
    4062:	08 94       	sec
    4064:	08 95       	ret

00004066 <__fp_zero>:
    4066:	e8 94       	clt

00004068 <__fp_szero>:
    4068:	bb 27       	eor	r27, r27
    406a:	66 27       	eor	r22, r22
    406c:	77 27       	eor	r23, r23
    406e:	cb 01       	movw	r24, r22
    4070:	97 f9       	bld	r25, 7
    4072:	08 95       	ret

00004074 <__gesf2>:
    4074:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__fp_cmp>
    4078:	08 f4       	brcc	.+2      	; 0x407c <__gesf2+0x8>
    407a:	8f ef       	ldi	r24, 0xFF	; 255
    407c:	08 95       	ret

0000407e <__mulsf3>:
    407e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsf3x>
    4082:	0c 94 00 20 	jmp	0x4000	; 0x4000 <__fp_round>
    4086:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__fp_pscA>
    408a:	38 f0       	brcs	.+14     	; 0x409a <__mulsf3+0x1c>
    408c:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__fp_pscB>
    4090:	20 f0       	brcs	.+8      	; 0x409a <__mulsf3+0x1c>
    4092:	95 23       	and	r25, r21
    4094:	11 f0       	breq	.+4      	; 0x409a <__mulsf3+0x1c>
    4096:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__fp_inf>
    409a:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__fp_nan>
    409e:	11 24       	eor	r1, r1
    40a0:	0c 94 34 20 	jmp	0x4068	; 0x4068 <__fp_szero>

000040a4 <__mulsf3x>:
    40a4:	0e 94 11 20 	call	0x4022	; 0x4022 <__fp_split3>
    40a8:	70 f3       	brcs	.-36     	; 0x4086 <__mulsf3+0x8>

000040aa <__mulsf3_pse>:
    40aa:	95 9f       	mul	r25, r21
    40ac:	c1 f3       	breq	.-16     	; 0x409e <__mulsf3+0x20>
    40ae:	95 0f       	add	r25, r21
    40b0:	50 e0       	ldi	r21, 0x00	; 0
    40b2:	55 1f       	adc	r21, r21
    40b4:	62 9f       	mul	r22, r18
    40b6:	f0 01       	movw	r30, r0
    40b8:	72 9f       	mul	r23, r18
    40ba:	bb 27       	eor	r27, r27
    40bc:	f0 0d       	add	r31, r0
    40be:	b1 1d       	adc	r27, r1
    40c0:	63 9f       	mul	r22, r19
    40c2:	aa 27       	eor	r26, r26
    40c4:	f0 0d       	add	r31, r0
    40c6:	b1 1d       	adc	r27, r1
    40c8:	aa 1f       	adc	r26, r26
    40ca:	64 9f       	mul	r22, r20
    40cc:	66 27       	eor	r22, r22
    40ce:	b0 0d       	add	r27, r0
    40d0:	a1 1d       	adc	r26, r1
    40d2:	66 1f       	adc	r22, r22
    40d4:	82 9f       	mul	r24, r18
    40d6:	22 27       	eor	r18, r18
    40d8:	b0 0d       	add	r27, r0
    40da:	a1 1d       	adc	r26, r1
    40dc:	62 1f       	adc	r22, r18
    40de:	73 9f       	mul	r23, r19
    40e0:	b0 0d       	add	r27, r0
    40e2:	a1 1d       	adc	r26, r1
    40e4:	62 1f       	adc	r22, r18
    40e6:	83 9f       	mul	r24, r19
    40e8:	a0 0d       	add	r26, r0
    40ea:	61 1d       	adc	r22, r1
    40ec:	22 1f       	adc	r18, r18
    40ee:	74 9f       	mul	r23, r20
    40f0:	33 27       	eor	r19, r19
    40f2:	a0 0d       	add	r26, r0
    40f4:	61 1d       	adc	r22, r1
    40f6:	23 1f       	adc	r18, r19
    40f8:	84 9f       	mul	r24, r20
    40fa:	60 0d       	add	r22, r0
    40fc:	21 1d       	adc	r18, r1
    40fe:	82 2f       	mov	r24, r18
    4100:	76 2f       	mov	r23, r22
    4102:	6a 2f       	mov	r22, r26
    4104:	11 24       	eor	r1, r1
    4106:	9f 57       	subi	r25, 0x7F	; 127
    4108:	50 40       	sbci	r21, 0x00	; 0
    410a:	9a f0       	brmi	.+38     	; 0x4132 <__mulsf3_pse+0x88>
    410c:	f1 f0       	breq	.+60     	; 0x414a <__mulsf3_pse+0xa0>
    410e:	88 23       	and	r24, r24
    4110:	4a f0       	brmi	.+18     	; 0x4124 <__mulsf3_pse+0x7a>
    4112:	ee 0f       	add	r30, r30
    4114:	ff 1f       	adc	r31, r31
    4116:	bb 1f       	adc	r27, r27
    4118:	66 1f       	adc	r22, r22
    411a:	77 1f       	adc	r23, r23
    411c:	88 1f       	adc	r24, r24
    411e:	91 50       	subi	r25, 0x01	; 1
    4120:	50 40       	sbci	r21, 0x00	; 0
    4122:	a9 f7       	brne	.-22     	; 0x410e <__mulsf3_pse+0x64>
    4124:	9e 3f       	cpi	r25, 0xFE	; 254
    4126:	51 05       	cpc	r21, r1
    4128:	80 f0       	brcs	.+32     	; 0x414a <__mulsf3_pse+0xa0>
    412a:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__fp_inf>
    412e:	0c 94 34 20 	jmp	0x4068	; 0x4068 <__fp_szero>
    4132:	5f 3f       	cpi	r21, 0xFF	; 255
    4134:	e4 f3       	brlt	.-8      	; 0x412e <__mulsf3_pse+0x84>
    4136:	98 3e       	cpi	r25, 0xE8	; 232
    4138:	d4 f3       	brlt	.-12     	; 0x412e <__mulsf3_pse+0x84>
    413a:	86 95       	lsr	r24
    413c:	77 95       	ror	r23
    413e:	67 95       	ror	r22
    4140:	b7 95       	ror	r27
    4142:	f7 95       	ror	r31
    4144:	e7 95       	ror	r30
    4146:	9f 5f       	subi	r25, 0xFF	; 255
    4148:	c1 f7       	brne	.-16     	; 0x413a <__mulsf3_pse+0x90>
    414a:	fe 2b       	or	r31, r30
    414c:	88 0f       	add	r24, r24
    414e:	91 1d       	adc	r25, r1
    4150:	96 95       	lsr	r25
    4152:	87 95       	ror	r24
    4154:	97 f9       	bld	r25, 7
    4156:	08 95       	ret

00004158 <_exit>:
    4158:	f8 94       	cli

0000415a <__stop_program>:
    415a:	ff cf       	rjmp	.-2      	; 0x415a <__stop_program>
